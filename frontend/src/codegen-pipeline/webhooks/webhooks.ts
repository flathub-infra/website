/**
 * Generated by orval 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query"
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query"

import type { HTTPValidationError } from ".././model"

/**
 * @summary Receive Github Webhook
 */
export type receiveGithubWebhookApiWebhooksGithubPostResponse202 = {
  data: unknown
  status: 202
}

export type receiveGithubWebhookApiWebhooksGithubPostResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type receiveGithubWebhookApiWebhooksGithubPostResponseComposite =
  | receiveGithubWebhookApiWebhooksGithubPostResponse202
  | receiveGithubWebhookApiWebhooksGithubPostResponse422

export type receiveGithubWebhookApiWebhooksGithubPostResponse =
  receiveGithubWebhookApiWebhooksGithubPostResponseComposite & {
    headers: Headers
  }

export const getReceiveGithubWebhookApiWebhooksGithubPostUrl = () => {
  return `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/webhooks/github`
}

export const receiveGithubWebhookApiWebhooksGithubPost = async (
  options?: RequestInit,
): Promise<receiveGithubWebhookApiWebhooksGithubPostResponse> => {
  const res = await fetch(getReceiveGithubWebhookApiWebhooksGithubPostUrl(), {
    ...options,
    method: "POST",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: receiveGithubWebhookApiWebhooksGithubPostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as receiveGithubWebhookApiWebhooksGithubPostResponse
}

export const getReceiveGithubWebhookApiWebhooksGithubPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>,
    TError,
    void,
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["receiveGithubWebhookApiWebhooksGithubPost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>,
    void
  > = () => {
    return receiveGithubWebhookApiWebhooksGithubPost(fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ReceiveGithubWebhookApiWebhooksGithubPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>
  >

export type ReceiveGithubWebhookApiWebhooksGithubPostMutationError =
  HTTPValidationError

/**
 * @summary Receive Github Webhook
 */
export const useReceiveGithubWebhookApiWebhooksGithubPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>,
      TError,
      void,
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getReceiveGithubWebhookApiWebhooksGithubPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
