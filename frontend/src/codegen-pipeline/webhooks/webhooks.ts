/**
 * Generated by orval üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query"
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query"

import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

import type { HTTPValidationError } from ".././model"

/**
 * @summary Receive Github Webhook
 */
export const receiveGithubWebhookApiWebhooksGithubPost = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/webhooks/github`,
    undefined,
    options,
  )
}

export const getReceiveGithubWebhookApiWebhooksGithubPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["receiveGithubWebhookApiWebhooksGithubPost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>,
    void
  > = () => {
    return receiveGithubWebhookApiWebhooksGithubPost(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ReceiveGithubWebhookApiWebhooksGithubPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>
  >

export type ReceiveGithubWebhookApiWebhooksGithubPostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Receive Github Webhook
 */
export const useReceiveGithubWebhookApiWebhooksGithubPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>,
      TError,
      void,
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof receiveGithubWebhookApiWebhooksGithubPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getReceiveGithubWebhookApiWebhooksGithubPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
