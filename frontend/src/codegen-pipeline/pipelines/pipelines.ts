/**
 * Generated by orval üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

import type {
  HTTPValidationError,
  ListPipelinesApiPipelinesGetParams,
  PipelineCallbackApiPipelinesPipelineIdCallbackPostBody,
  PipelineResponse,
  PipelineSummary,
  PipelineTriggerRequest,
  PublishSummary,
  TriggerPipelineApiPipelinesPost201,
} from ".././model"

/**
 * @summary Trigger Pipeline
 */
export const triggerPipelineApiPipelinesPost = (
  pipelineTriggerRequest: PipelineTriggerRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TriggerPipelineApiPipelinesPost201>> => {
  return axios.post(
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines`,
    pipelineTriggerRequest,
    options,
  )
}

export const getTriggerPipelineApiPipelinesPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>,
    TError,
    { data: PipelineTriggerRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>,
  TError,
  { data: PipelineTriggerRequest },
  TContext
> => {
  const mutationKey = ["triggerPipelineApiPipelinesPost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>,
    { data: PipelineTriggerRequest }
  > = (props) => {
    const { data } = props ?? {}

    return triggerPipelineApiPipelinesPost(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TriggerPipelineApiPipelinesPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>
>
export type TriggerPipelineApiPipelinesPostMutationBody = PipelineTriggerRequest
export type TriggerPipelineApiPipelinesPostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Trigger Pipeline
 */
export const useTriggerPipelineApiPipelinesPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>,
      TError,
      { data: PipelineTriggerRequest },
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>,
  TError,
  { data: PipelineTriggerRequest },
  TContext
> => {
  const mutationOptions =
    getTriggerPipelineApiPipelinesPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary List Pipelines
 */
export const listPipelinesApiPipelinesGet = (
  params?: ListPipelinesApiPipelinesGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PipelineSummary[]>> => {
  return axios.get(
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  )
}

export const getListPipelinesApiPipelinesGetQueryKey = (
  params?: ListPipelinesApiPipelinesGetParams,
) => {
  return [
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines`,
    ...(params ? [params] : []),
  ] as const
}

export const getListPipelinesApiPipelinesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListPipelinesApiPipelinesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListPipelinesApiPipelinesGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>
  > = ({ signal }) =>
    listPipelinesApiPipelinesGet(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListPipelinesApiPipelinesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>
>
export type ListPipelinesApiPipelinesGetQueryError =
  AxiosError<HTTPValidationError>

export function useListPipelinesApiPipelinesGet<
  TData = Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: undefined | ListPipelinesApiPipelinesGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
          TError,
          Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListPipelinesApiPipelinesGet<
  TData = Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListPipelinesApiPipelinesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
          TError,
          Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListPipelinesApiPipelinesGet<
  TData = Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListPipelinesApiPipelinesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List Pipelines
 */

export function useListPipelinesApiPipelinesGet<
  TData = Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListPipelinesApiPipelinesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListPipelinesApiPipelinesGetQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Pipeline
 */
export const getPipelineApiPipelinesPipelineIdGet = (
  pipelineId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PipelineResponse>> => {
  return axios.get(
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/${pipelineId}`,
    options,
  )
}

export const getGetPipelineApiPipelinesPipelineIdGetQueryKey = (
  pipelineId: string,
) => {
  return [
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/${pipelineId}`,
  ] as const
}

export const getGetPipelineApiPipelinesPipelineIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetPipelineApiPipelinesPipelineIdGetQueryKey(pipelineId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>
  > = ({ signal }) =>
    getPipelineApiPipelinesPipelineIdGet(pipelineId, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!pipelineId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPipelineApiPipelinesPipelineIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>
>
export type GetPipelineApiPipelinesPipelineIdGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetPipelineApiPipelinesPipelineIdGet<
  TData = Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  pipelineId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPipelineApiPipelinesPipelineIdGet<
  TData = Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPipelineApiPipelinesPipelineIdGet<
  TData = Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Pipeline
 */

export function useGetPipelineApiPipelinesPipelineIdGet<
  TData = Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetPipelineApiPipelinesPipelineIdGetQueryOptions(
    pipelineId,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Pipeline Callback
 */
export const pipelineCallbackApiPipelinesPipelineIdCallbackPost = (
  pipelineId: string,
  pipelineCallbackApiPipelinesPipelineIdCallbackPostBody: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/${pipelineId}/callback`,
    pipelineCallbackApiPipelinesPipelineIdCallbackPostBody,
    options,
  )
}

export const getPipelineCallbackApiPipelinesPipelineIdCallbackPostMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
      >,
      TError,
      {
        pipelineId: string
        data: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
      },
      TContext
    >
    axios?: AxiosRequestConfig
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
    >,
    TError,
    {
      pipelineId: string
      data: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
    },
    TContext
  > => {
    const mutationKey = ["pipelineCallbackApiPipelinesPipelineIdCallbackPost"]
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
      >,
      {
        pipelineId: string
        data: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
      }
    > = (props) => {
      const { pipelineId, data } = props ?? {}

      return pipelineCallbackApiPipelinesPipelineIdCallbackPost(
        pipelineId,
        data,
        axiosOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type PipelineCallbackApiPipelinesPipelineIdCallbackPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
    >
  >
export type PipelineCallbackApiPipelinesPipelineIdCallbackPostMutationBody =
  PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
export type PipelineCallbackApiPipelinesPipelineIdCallbackPostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Pipeline Callback
 */
export const usePipelineCallbackApiPipelinesPipelineIdCallbackPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
      >,
      TError,
      {
        pipelineId: string
        data: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
      },
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
  >,
  TError,
  {
    pipelineId: string
    data: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
  },
  TContext
> => {
  const mutationOptions =
    getPipelineCallbackApiPipelinesPipelineIdCallbackPostMutationOptions(
      options,
    )

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Redirect To Log Url
 */
export const redirectToLogUrlApiPipelinesPipelineIdLogUrlGet = (
  pipelineId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/${pipelineId}/log_url`,
    options,
  )
}

export const getRedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryKey = (
  pipelineId: string,
) => {
  return [
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/${pipelineId}/log_url`,
  ] as const
}

export const getRedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
        >,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getRedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryKey(pipelineId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>>
  > = ({ signal }) =>
    redirectToLogUrlApiPipelinesPipelineIdLogUrlGet(pipelineId, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!pipelineId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>>
  >
export type RedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryError =
  AxiosError<HTTPValidationError>

export function useRedirectToLogUrlApiPipelinesPipelineIdLogUrlGet<
  TData = Awaited<
    ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  pipelineId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
          >
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useRedirectToLogUrlApiPipelinesPipelineIdLogUrlGet<
  TData = Awaited<
    ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
          >
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useRedirectToLogUrlApiPipelinesPipelineIdLogUrlGet<
  TData = Awaited<
    ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
        >,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Redirect To Log Url
 */

export function useRedirectToLogUrlApiPipelinesPipelineIdLogUrlGet<
  TData = Awaited<
    ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
        >,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getRedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryOptions(
      pipelineId,
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Publish Pipelines
 */
export const publishPipelinesApiPipelinesPublishPost = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PublishSummary>> => {
  return axios.post(
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/publish`,
    undefined,
    options,
  )
}

export const getPublishPipelinesApiPipelinesPublishPostMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["publishPipelinesApiPipelinesPublishPost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>,
    void
  > = () => {
    return publishPipelinesApiPipelinesPublishPost(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PublishPipelinesApiPipelinesPublishPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>
>

export type PublishPipelinesApiPipelinesPublishPostMutationError =
  AxiosError<unknown>

/**
 * @summary Publish Pipelines
 */
export const usePublishPipelinesApiPipelinesPublishPost = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>,
      TError,
      void,
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPublishPipelinesApiPipelinesPublishPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Check Pipeline Jobs
 */
export const checkPipelineJobsApiPipelinesCheckJobsPost = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/check-jobs`,
    undefined,
    options,
  )
}

export const getCheckPipelineJobsApiPipelinesCheckJobsPostMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["checkPipelineJobsApiPipelinesCheckJobsPost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>,
    void
  > = () => {
    return checkPipelineJobsApiPipelinesCheckJobsPost(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CheckPipelineJobsApiPipelinesCheckJobsPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>
  >

export type CheckPipelineJobsApiPipelinesCheckJobsPostMutationError =
  AxiosError<unknown>

/**
 * @summary Check Pipeline Jobs
 */
export const useCheckPipelineJobsApiPipelinesCheckJobsPost = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>,
      TError,
      void,
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getCheckPipelineJobsApiPipelinesCheckJobsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
