/**
 * Generated by orval 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  HTTPValidationError,
  ListPipelinesApiPipelinesGetParams,
  PipelineCallbackApiPipelinesPipelineIdCallbackPostBody,
  PipelineResponse,
  PipelineSummary,
  PipelineTriggerRequest,
  PublishSummary,
  TriggerPipelineApiPipelinesPost201,
} from ".././model"

/**
 * @summary Trigger Pipeline
 */
export type triggerPipelineApiPipelinesPostResponse201 = {
  data: TriggerPipelineApiPipelinesPost201
  status: 201
}

export type triggerPipelineApiPipelinesPostResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type triggerPipelineApiPipelinesPostResponseComposite =
  | triggerPipelineApiPipelinesPostResponse201
  | triggerPipelineApiPipelinesPostResponse422

export type triggerPipelineApiPipelinesPostResponse =
  triggerPipelineApiPipelinesPostResponseComposite & {
    headers: Headers
  }

export const getTriggerPipelineApiPipelinesPostUrl = () => {
  return `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines`
}

export const triggerPipelineApiPipelinesPost = async (
  pipelineTriggerRequest: PipelineTriggerRequest,
  options?: RequestInit,
): Promise<triggerPipelineApiPipelinesPostResponse> => {
  const res = await fetch(getTriggerPipelineApiPipelinesPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(pipelineTriggerRequest),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: triggerPipelineApiPipelinesPostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as triggerPipelineApiPipelinesPostResponse
}

export const getTriggerPipelineApiPipelinesPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>,
    TError,
    { data: PipelineTriggerRequest },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>,
  TError,
  { data: PipelineTriggerRequest },
  TContext
> => {
  const mutationKey = ["triggerPipelineApiPipelinesPost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>,
    { data: PipelineTriggerRequest }
  > = (props) => {
    const { data } = props ?? {}

    return triggerPipelineApiPipelinesPost(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TriggerPipelineApiPipelinesPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>
>
export type TriggerPipelineApiPipelinesPostMutationBody = PipelineTriggerRequest
export type TriggerPipelineApiPipelinesPostMutationError = HTTPValidationError

/**
 * @summary Trigger Pipeline
 */
export const useTriggerPipelineApiPipelinesPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>,
      TError,
      { data: PipelineTriggerRequest },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof triggerPipelineApiPipelinesPost>>,
  TError,
  { data: PipelineTriggerRequest },
  TContext
> => {
  const mutationOptions =
    getTriggerPipelineApiPipelinesPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary List Pipelines
 */
export type listPipelinesApiPipelinesGetResponse200 = {
  data: PipelineSummary[]
  status: 200
}

export type listPipelinesApiPipelinesGetResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type listPipelinesApiPipelinesGetResponseComposite =
  | listPipelinesApiPipelinesGetResponse200
  | listPipelinesApiPipelinesGetResponse422

export type listPipelinesApiPipelinesGetResponse =
  listPipelinesApiPipelinesGetResponseComposite & {
    headers: Headers
  }

export const getListPipelinesApiPipelinesGetUrl = (
  params?: ListPipelinesApiPipelinesGetParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines?${stringifiedParams}`
    : `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines`
}

export const listPipelinesApiPipelinesGet = async (
  params?: ListPipelinesApiPipelinesGetParams,
  options?: RequestInit,
): Promise<listPipelinesApiPipelinesGetResponse> => {
  const res = await fetch(getListPipelinesApiPipelinesGetUrl(params), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: listPipelinesApiPipelinesGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as listPipelinesApiPipelinesGetResponse
}

export const getListPipelinesApiPipelinesGetQueryKey = (
  params?: ListPipelinesApiPipelinesGetParams,
) => {
  return [
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines`,
    ...(params ? [params] : []),
  ] as const
}

export const getListPipelinesApiPipelinesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
  TError = HTTPValidationError,
>(
  params?: ListPipelinesApiPipelinesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListPipelinesApiPipelinesGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>
  > = ({ signal }) =>
    listPipelinesApiPipelinesGet(params, { signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListPipelinesApiPipelinesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>
>
export type ListPipelinesApiPipelinesGetQueryError = HTTPValidationError

export function useListPipelinesApiPipelinesGet<
  TData = Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
  TError = HTTPValidationError,
>(
  params: undefined | ListPipelinesApiPipelinesGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
          TError,
          Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListPipelinesApiPipelinesGet<
  TData = Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
  TError = HTTPValidationError,
>(
  params?: ListPipelinesApiPipelinesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
          TError,
          Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListPipelinesApiPipelinesGet<
  TData = Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
  TError = HTTPValidationError,
>(
  params?: ListPipelinesApiPipelinesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List Pipelines
 */

export function useListPipelinesApiPipelinesGet<
  TData = Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
  TError = HTTPValidationError,
>(
  params?: ListPipelinesApiPipelinesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPipelinesApiPipelinesGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListPipelinesApiPipelinesGetQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Pipeline
 */
export type getPipelineApiPipelinesPipelineIdGetResponse200 = {
  data: PipelineResponse
  status: 200
}

export type getPipelineApiPipelinesPipelineIdGetResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type getPipelineApiPipelinesPipelineIdGetResponseComposite =
  | getPipelineApiPipelinesPipelineIdGetResponse200
  | getPipelineApiPipelinesPipelineIdGetResponse422

export type getPipelineApiPipelinesPipelineIdGetResponse =
  getPipelineApiPipelinesPipelineIdGetResponseComposite & {
    headers: Headers
  }

export const getGetPipelineApiPipelinesPipelineIdGetUrl = (
  pipelineId: string,
) => {
  return `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/${pipelineId}`
}

export const getPipelineApiPipelinesPipelineIdGet = async (
  pipelineId: string,
  options?: RequestInit,
): Promise<getPipelineApiPipelinesPipelineIdGetResponse> => {
  const res = await fetch(
    getGetPipelineApiPipelinesPipelineIdGetUrl(pipelineId),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getPipelineApiPipelinesPipelineIdGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getPipelineApiPipelinesPipelineIdGetResponse
}

export const getGetPipelineApiPipelinesPipelineIdGetQueryKey = (
  pipelineId?: string,
) => {
  return [
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/${pipelineId}`,
  ] as const
}

export const getGetPipelineApiPipelinesPipelineIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
  TError = HTTPValidationError,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetPipelineApiPipelinesPipelineIdGetQueryKey(pipelineId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>
  > = ({ signal }) =>
    getPipelineApiPipelinesPipelineIdGet(pipelineId, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!pipelineId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPipelineApiPipelinesPipelineIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>
>
export type GetPipelineApiPipelinesPipelineIdGetQueryError = HTTPValidationError

export function useGetPipelineApiPipelinesPipelineIdGet<
  TData = Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
  TError = HTTPValidationError,
>(
  pipelineId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPipelineApiPipelinesPipelineIdGet<
  TData = Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
  TError = HTTPValidationError,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPipelineApiPipelinesPipelineIdGet<
  TData = Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
  TError = HTTPValidationError,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Pipeline
 */

export function useGetPipelineApiPipelinesPipelineIdGet<
  TData = Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
  TError = HTTPValidationError,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPipelineApiPipelinesPipelineIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetPipelineApiPipelinesPipelineIdGetQueryOptions(
    pipelineId,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Pipeline Callback
 */
export type pipelineCallbackApiPipelinesPipelineIdCallbackPostResponse200 = {
  data: unknown
  status: 200
}

export type pipelineCallbackApiPipelinesPipelineIdCallbackPostResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type pipelineCallbackApiPipelinesPipelineIdCallbackPostResponseComposite =

    | pipelineCallbackApiPipelinesPipelineIdCallbackPostResponse200
    | pipelineCallbackApiPipelinesPipelineIdCallbackPostResponse422

export type pipelineCallbackApiPipelinesPipelineIdCallbackPostResponse =
  pipelineCallbackApiPipelinesPipelineIdCallbackPostResponseComposite & {
    headers: Headers
  }

export const getPipelineCallbackApiPipelinesPipelineIdCallbackPostUrl = (
  pipelineId: string,
) => {
  return `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/${pipelineId}/callback`
}

export const pipelineCallbackApiPipelinesPipelineIdCallbackPost = async (
  pipelineId: string,
  pipelineCallbackApiPipelinesPipelineIdCallbackPostBody: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody,
  options?: RequestInit,
): Promise<pipelineCallbackApiPipelinesPipelineIdCallbackPostResponse> => {
  const res = await fetch(
    getPipelineCallbackApiPipelinesPipelineIdCallbackPostUrl(pipelineId),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(
        pipelineCallbackApiPipelinesPipelineIdCallbackPostBody,
      ),
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: pipelineCallbackApiPipelinesPipelineIdCallbackPostResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as pipelineCallbackApiPipelinesPipelineIdCallbackPostResponse
}

export const getPipelineCallbackApiPipelinesPipelineIdCallbackPostMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
      >,
      TError,
      {
        pipelineId: string
        data: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
      },
      TContext
    >
    fetch?: RequestInit
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
    >,
    TError,
    {
      pipelineId: string
      data: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
    },
    TContext
  > => {
    const mutationKey = ["pipelineCallbackApiPipelinesPipelineIdCallbackPost"]
    const { mutation: mutationOptions, fetch: fetchOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, fetch: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
      >,
      {
        pipelineId: string
        data: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
      }
    > = (props) => {
      const { pipelineId, data } = props ?? {}

      return pipelineCallbackApiPipelinesPipelineIdCallbackPost(
        pipelineId,
        data,
        fetchOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type PipelineCallbackApiPipelinesPipelineIdCallbackPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
    >
  >
export type PipelineCallbackApiPipelinesPipelineIdCallbackPostMutationBody =
  PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
export type PipelineCallbackApiPipelinesPipelineIdCallbackPostMutationError =
  HTTPValidationError

/**
 * @summary Pipeline Callback
 */
export const usePipelineCallbackApiPipelinesPipelineIdCallbackPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
      >,
      TError,
      {
        pipelineId: string
        data: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
      },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof pipelineCallbackApiPipelinesPipelineIdCallbackPost>
  >,
  TError,
  {
    pipelineId: string
    data: PipelineCallbackApiPipelinesPipelineIdCallbackPostBody
  },
  TContext
> => {
  const mutationOptions =
    getPipelineCallbackApiPipelinesPipelineIdCallbackPostMutationOptions(
      options,
    )

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Redirect To Log Url
 */
export type redirectToLogUrlApiPipelinesPipelineIdLogUrlGetResponse200 = {
  data: unknown
  status: 200
}

export type redirectToLogUrlApiPipelinesPipelineIdLogUrlGetResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type redirectToLogUrlApiPipelinesPipelineIdLogUrlGetResponseComposite =
  | redirectToLogUrlApiPipelinesPipelineIdLogUrlGetResponse200
  | redirectToLogUrlApiPipelinesPipelineIdLogUrlGetResponse422

export type redirectToLogUrlApiPipelinesPipelineIdLogUrlGetResponse =
  redirectToLogUrlApiPipelinesPipelineIdLogUrlGetResponseComposite & {
    headers: Headers
  }

export const getRedirectToLogUrlApiPipelinesPipelineIdLogUrlGetUrl = (
  pipelineId: string,
) => {
  return `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/${pipelineId}/log_url`
}

export const redirectToLogUrlApiPipelinesPipelineIdLogUrlGet = async (
  pipelineId: string,
  options?: RequestInit,
): Promise<redirectToLogUrlApiPipelinesPipelineIdLogUrlGetResponse> => {
  const res = await fetch(
    getRedirectToLogUrlApiPipelinesPipelineIdLogUrlGetUrl(pipelineId),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: redirectToLogUrlApiPipelinesPipelineIdLogUrlGetResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as redirectToLogUrlApiPipelinesPipelineIdLogUrlGetResponse
}

export const getRedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryKey = (
  pipelineId?: string,
) => {
  return [
    `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/${pipelineId}/log_url`,
  ] as const
}

export const getRedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
  >,
  TError = HTTPValidationError,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getRedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryKey(pipelineId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>>
  > = ({ signal }) =>
    redirectToLogUrlApiPipelinesPipelineIdLogUrlGet(pipelineId, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!pipelineId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>>
  >
export type RedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryError =
  HTTPValidationError

export function useRedirectToLogUrlApiPipelinesPipelineIdLogUrlGet<
  TData = Awaited<
    ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
  >,
  TError = HTTPValidationError,
>(
  pipelineId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useRedirectToLogUrlApiPipelinesPipelineIdLogUrlGet<
  TData = Awaited<
    ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
  >,
  TError = HTTPValidationError,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useRedirectToLogUrlApiPipelinesPipelineIdLogUrlGet<
  TData = Awaited<
    ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
  >,
  TError = HTTPValidationError,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Redirect To Log Url
 */

export function useRedirectToLogUrlApiPipelinesPipelineIdLogUrlGet<
  TData = Awaited<
    ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
  >,
  TError = HTTPValidationError,
>(
  pipelineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof redirectToLogUrlApiPipelinesPipelineIdLogUrlGet>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getRedirectToLogUrlApiPipelinesPipelineIdLogUrlGetQueryOptions(
      pipelineId,
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Publish Pipelines
 */
export type publishPipelinesApiPipelinesPublishPostResponse200 = {
  data: PublishSummary
  status: 200
}

export type publishPipelinesApiPipelinesPublishPostResponseComposite =
  publishPipelinesApiPipelinesPublishPostResponse200

export type publishPipelinesApiPipelinesPublishPostResponse =
  publishPipelinesApiPipelinesPublishPostResponseComposite & {
    headers: Headers
  }

export const getPublishPipelinesApiPipelinesPublishPostUrl = () => {
  return `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/publish`
}

export const publishPipelinesApiPipelinesPublishPost = async (
  options?: RequestInit,
): Promise<publishPipelinesApiPipelinesPublishPostResponse> => {
  const res = await fetch(getPublishPipelinesApiPipelinesPublishPostUrl(), {
    ...options,
    method: "POST",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: publishPipelinesApiPipelinesPublishPostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as publishPipelinesApiPipelinesPublishPostResponse
}

export const getPublishPipelinesApiPipelinesPublishPostMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>,
    TError,
    void,
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["publishPipelinesApiPipelinesPublishPost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>,
    void
  > = () => {
    return publishPipelinesApiPipelinesPublishPost(fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PublishPipelinesApiPipelinesPublishPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>
>

export type PublishPipelinesApiPipelinesPublishPostMutationError = unknown

/**
 * @summary Publish Pipelines
 */
export const usePublishPipelinesApiPipelinesPublishPost = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>,
      TError,
      void,
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof publishPipelinesApiPipelinesPublishPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPublishPipelinesApiPipelinesPublishPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Check Pipeline Jobs
 */
export type checkPipelineJobsApiPipelinesCheckJobsPostResponse200 = {
  data: unknown
  status: 200
}

export type checkPipelineJobsApiPipelinesCheckJobsPostResponseComposite =
  checkPipelineJobsApiPipelinesCheckJobsPostResponse200

export type checkPipelineJobsApiPipelinesCheckJobsPostResponse =
  checkPipelineJobsApiPipelinesCheckJobsPostResponseComposite & {
    headers: Headers
  }

export const getCheckPipelineJobsApiPipelinesCheckJobsPostUrl = () => {
  return `https://flathub-vorarbeiter.apps.openshift.gnome.org/api/pipelines/check-jobs`
}

export const checkPipelineJobsApiPipelinesCheckJobsPost = async (
  options?: RequestInit,
): Promise<checkPipelineJobsApiPipelinesCheckJobsPostResponse> => {
  const res = await fetch(getCheckPipelineJobsApiPipelinesCheckJobsPostUrl(), {
    ...options,
    method: "POST",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: checkPipelineJobsApiPipelinesCheckJobsPostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as checkPipelineJobsApiPipelinesCheckJobsPostResponse
}

export const getCheckPipelineJobsApiPipelinesCheckJobsPostMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>,
    TError,
    void,
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["checkPipelineJobsApiPipelinesCheckJobsPost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>,
    void
  > = () => {
    return checkPipelineJobsApiPipelinesCheckJobsPost(fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CheckPipelineJobsApiPipelinesCheckJobsPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>
  >

export type CheckPipelineJobsApiPipelinesCheckJobsPostMutationError = unknown

/**
 * @summary Check Pipeline Jobs
 */
export const useCheckPipelineJobsApiPipelinesCheckJobsPost = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>,
      TError,
      void,
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof checkPipelineJobsApiPipelinesCheckJobsPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getCheckPipelineJobsApiPipelinesCheckJobsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
