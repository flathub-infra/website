/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

/**
 * @summary Healthcheck
 */
export type healthcheckStatusGetResponse200 = {
  data: unknown
  status: 200
}

export type healthcheckStatusGetResponseComposite =
  healthcheckStatusGetResponse200

export type healthcheckStatusGetResponse =
  healthcheckStatusGetResponseComposite & {
    headers: Headers
  }

export const getHealthcheckStatusGetUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/status`
}

export const healthcheckStatusGet = async (
  options?: RequestInit,
): Promise<healthcheckStatusGetResponse> => {
  const res = await fetch(getHealthcheckStatusGetUrl(), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: healthcheckStatusGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as healthcheckStatusGetResponse
}

export const getHealthcheckStatusGetQueryKey = () => {
  return [`${process.env.NEXT_PUBLIC_API_BASE_URI}/status`] as const
}

export const getHealthcheckStatusGetQueryOptions = <
  TData = Awaited<ReturnType<typeof healthcheckStatusGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof healthcheckStatusGet>>,
      TError,
      TData
    >
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getHealthcheckStatusGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof healthcheckStatusGet>>
  > = ({ signal }) => healthcheckStatusGet({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof healthcheckStatusGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthcheckStatusGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthcheckStatusGet>>
>
export type HealthcheckStatusGetQueryError = unknown

export function useHealthcheckStatusGet<
  TData = Awaited<ReturnType<typeof healthcheckStatusGet>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof healthcheckStatusGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthcheckStatusGet>>,
          TError,
          Awaited<ReturnType<typeof healthcheckStatusGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useHealthcheckStatusGet<
  TData = Awaited<ReturnType<typeof healthcheckStatusGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof healthcheckStatusGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthcheckStatusGet>>,
          TError,
          Awaited<ReturnType<typeof healthcheckStatusGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useHealthcheckStatusGet<
  TData = Awaited<ReturnType<typeof healthcheckStatusGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof healthcheckStatusGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Healthcheck
 */

export function useHealthcheckStatusGet<
  TData = Awaited<ReturnType<typeof healthcheckStatusGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof healthcheckStatusGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getHealthcheckStatusGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
