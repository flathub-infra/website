/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import type {
  ModerationApp,
  ModerationAppsResponse,
  ReviewRequestResponse,
  SubmitReviewModerationRequestsIdReviewPost200,
} from ".././model"

export const getGetModerationAppsModerationAppsGetResponseMock = (
  overrideResponse: any = {},
): ModerationAppsResponse => ({
  apps: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    appid: faker.word.sample(),
    is_new_submission: faker.datatype.boolean(),
    request_types: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    updated_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        {},
      ]),
      undefined,
    ]),
    ...overrideResponse,
  })),
  apps_count: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
})

export const getGetModerationAppModerationAppsAppIdGetResponseMock = (
  overrideResponse: any = {},
): ModerationApp => ({
  requests: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    app_id: faker.word.sample(),
    build_id: faker.number.int({ min: undefined, max: undefined }),
    comment: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), {}]),
      undefined,
    ]),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    handled_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        {},
      ]),
      undefined,
    ]),
    handled_by: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), {}]),
      undefined,
    ]),
    id: faker.number.int({ min: undefined, max: undefined }),
    is_approved: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.datatype.boolean(), {}]),
      undefined,
    ]),
    is_new_submission: faker.datatype.boolean(),
    is_outdated: faker.datatype.boolean(),
    job_id: faker.number.int({ min: undefined, max: undefined }),
    request_data: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          current_values: {
            [faker.string.alphanumeric(5)]: faker.helpers.arrayElement([
              faker.word.sample(),
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({})),
              {},
              faker.datatype.boolean(),
              {},
            ]),
          },
          keys: {
            [faker.string.alphanumeric(5)]: faker.helpers.arrayElement([
              faker.word.sample(),
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({})),
              {},
              faker.datatype.boolean(),
              {},
            ]),
          },
          ...overrideResponse,
        },
        {},
      ]),
      undefined,
    ]),
    request_type: faker.word.sample(),
    ...overrideResponse,
  })),
  requests_count: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
})

export const getSubmitReviewRequestModerationSubmitReviewRequestPostResponseMock =
  (overrideResponse: any = {}): ReviewRequestResponse => ({
    requires_review: faker.datatype.boolean(),
    ...overrideResponse,
  })

export const getSubmitReviewModerationRequestsIdReviewPostResponseMock = (
  overrideResponse: any = {},
): SubmitReviewModerationRequestsIdReviewPost200 =>
  faker.helpers.arrayElement([
    { github_issue_url: faker.word.sample(), ...overrideResponse },
    {},
  ])

export const getGetModerationAppsModerationAppsGetMockHandler = (
  overrideResponse?: ModerationAppsResponse,
) => {
  return http.get("*/moderation/apps", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetModerationAppsModerationAppsGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetModerationAppModerationAppsAppIdGetMockHandler = (
  overrideResponse?: ModerationApp,
) => {
  return http.get("*/moderation/apps/:appId", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetModerationAppModerationAppsAppIdGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getSubmitReviewRequestModerationSubmitReviewRequestPostMockHandler =
  (overrideResponse?: ReviewRequestResponse) => {
    return http.post("*/moderation/submit_review_request", async () => {
      await delay(1000)
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getSubmitReviewRequestModerationSubmitReviewRequestPostResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      )
    })
  }

export const getSubmitReviewModerationRequestsIdReviewPostMockHandler = (
  overrideResponse?: SubmitReviewModerationRequestsIdReviewPost200,
) => {
  return http.post("*/moderation/requests/:id/review", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getSubmitReviewModerationRequestsIdReviewPostResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}
export const getModerationMock = () => [
  getGetModerationAppsModerationAppsGetMockHandler(),
  getGetModerationAppModerationAppsAppIdGetMockHandler(),
  getSubmitReviewRequestModerationSubmitReviewRequestPostMockHandler(),
  getSubmitReviewModerationRequestsIdReviewPostMockHandler(),
]
