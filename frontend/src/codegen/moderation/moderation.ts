/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  GetModerationAppModerationAppsAppIdGetParams,
  GetModerationAppsModerationAppsGetParams,
  ModerationApp,
  ModerationAppsResponse,
  Review,
  ReviewRequest,
  ReviewRequestResponse,
  ReviewResponse,
} from ".././model"

/**
 * Get a list of apps with unhandled moderation requests.
 * @summary Get Moderation Apps
 */
export type getModerationAppsModerationAppsGetResponse200 = {
  data: ModerationAppsResponse
  status: 200
}

export type getModerationAppsModerationAppsGetResponse401 = {
  data: null
  status: 401
}

export type getModerationAppsModerationAppsGetResponse403 = {
  data: null
  status: 403
}

export type getModerationAppsModerationAppsGetResponse422 = {
  data: null
  status: 422
}

export type getModerationAppsModerationAppsGetResponse500 = {
  data: null
  status: 500
}

export type getModerationAppsModerationAppsGetResponseComposite =
  | getModerationAppsModerationAppsGetResponse200
  | getModerationAppsModerationAppsGetResponse401
  | getModerationAppsModerationAppsGetResponse403
  | getModerationAppsModerationAppsGetResponse422
  | getModerationAppsModerationAppsGetResponse500

export type getModerationAppsModerationAppsGetResponse =
  getModerationAppsModerationAppsGetResponseComposite & {
    headers: Headers
  }

export const getGetModerationAppsModerationAppsGetUrl = (
  params?: GetModerationAppsModerationAppsGetParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/moderation/apps?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/moderation/apps`
}

export const getModerationAppsModerationAppsGet = async (
  params?: GetModerationAppsModerationAppsGetParams,
  options?: RequestInit,
): Promise<getModerationAppsModerationAppsGetResponse> => {
  const res = await fetch(getGetModerationAppsModerationAppsGetUrl(params), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getModerationAppsModerationAppsGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getModerationAppsModerationAppsGetResponse
}

export const getGetModerationAppsModerationAppsGetQueryKey = (
  params?: GetModerationAppsModerationAppsGetParams,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/moderation/apps`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetModerationAppsModerationAppsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
  TError = null | null | null | null,
>(
  params?: GetModerationAppsModerationAppsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetModerationAppsModerationAppsGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>
  > = ({ signal }) =>
    getModerationAppsModerationAppsGet(params, { signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetModerationAppsModerationAppsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>
>
export type GetModerationAppsModerationAppsGetQueryError =
  | null
  | null
  | null
  | null

export function useGetModerationAppsModerationAppsGet<
  TData = Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
  TError = null | null | null | null,
>(
  params: undefined | GetModerationAppsModerationAppsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
          TError,
          Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetModerationAppsModerationAppsGet<
  TData = Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
  TError = null | null | null | null,
>(
  params?: GetModerationAppsModerationAppsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
          TError,
          Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetModerationAppsModerationAppsGet<
  TData = Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
  TError = null | null | null | null,
>(
  params?: GetModerationAppsModerationAppsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Moderation Apps
 */

export function useGetModerationAppsModerationAppsGet<
  TData = Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
  TError = null | null | null | null,
>(
  params?: GetModerationAppsModerationAppsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getModerationAppsModerationAppsGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetModerationAppsModerationAppsGetQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get a list of moderation requests for an app.
 * @summary Get Moderation App
 */
export type getModerationAppModerationAppsAppIdGetResponse200 = {
  data: ModerationApp
  status: 200
}

export type getModerationAppModerationAppsAppIdGetResponse401 = {
  data: null
  status: 401
}

export type getModerationAppModerationAppsAppIdGetResponse403 = {
  data: null
  status: 403
}

export type getModerationAppModerationAppsAppIdGetResponse404 = {
  data: null
  status: 404
}

export type getModerationAppModerationAppsAppIdGetResponse422 = {
  data: null
  status: 422
}

export type getModerationAppModerationAppsAppIdGetResponse500 = {
  data: null
  status: 500
}

export type getModerationAppModerationAppsAppIdGetResponseComposite =
  | getModerationAppModerationAppsAppIdGetResponse200
  | getModerationAppModerationAppsAppIdGetResponse401
  | getModerationAppModerationAppsAppIdGetResponse403
  | getModerationAppModerationAppsAppIdGetResponse404
  | getModerationAppModerationAppsAppIdGetResponse422
  | getModerationAppModerationAppsAppIdGetResponse500

export type getModerationAppModerationAppsAppIdGetResponse =
  getModerationAppModerationAppsAppIdGetResponseComposite & {
    headers: Headers
  }

export const getGetModerationAppModerationAppsAppIdGetUrl = (
  appId: string,
  params?: GetModerationAppModerationAppsAppIdGetParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/moderation/apps/${appId}?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/moderation/apps/${appId}`
}

export const getModerationAppModerationAppsAppIdGet = async (
  appId: string,
  params?: GetModerationAppModerationAppsAppIdGetParams,
  options?: RequestInit,
): Promise<getModerationAppModerationAppsAppIdGetResponse> => {
  const res = await fetch(
    getGetModerationAppModerationAppsAppIdGetUrl(appId, params),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getModerationAppModerationAppsAppIdGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getModerationAppModerationAppsAppIdGetResponse
}

export const getGetModerationAppModerationAppsAppIdGetQueryKey = (
  appId?: string,
  params?: GetModerationAppModerationAppsAppIdGetParams,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/moderation/apps/${appId}`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetModerationAppModerationAppsAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
  TError = null | null | null | null | null,
>(
  appId: string,
  params?: GetModerationAppModerationAppsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetModerationAppModerationAppsAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>
  > = ({ signal }) =>
    getModerationAppModerationAppsAppIdGet(appId, params, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetModerationAppModerationAppsAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>
>
export type GetModerationAppModerationAppsAppIdGetQueryError =
  | null
  | null
  | null
  | null
  | null

export function useGetModerationAppModerationAppsAppIdGet<
  TData = Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
  TError = null | null | null | null | null,
>(
  appId: string,
  params: undefined | GetModerationAppModerationAppsAppIdGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetModerationAppModerationAppsAppIdGet<
  TData = Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
  TError = null | null | null | null | null,
>(
  appId: string,
  params?: GetModerationAppModerationAppsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetModerationAppModerationAppsAppIdGet<
  TData = Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
  TError = null | null | null | null | null,
>(
  appId: string,
  params?: GetModerationAppModerationAppsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Moderation App
 */

export function useGetModerationAppModerationAppsAppIdGet<
  TData = Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
  TError = null | null | null | null | null,
>(
  appId: string,
  params?: GetModerationAppModerationAppsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getModerationAppModerationAppsAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetModerationAppModerationAppsAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Submit Review Request
 */
export type submitReviewRequestModerationSubmitReviewRequestPostResponse200 = {
  data: ReviewRequestResponse
  status: 200
}

export type submitReviewRequestModerationSubmitReviewRequestPostResponse401 = {
  data: null
  status: 401
}

export type submitReviewRequestModerationSubmitReviewRequestPostResponse422 = {
  data: null
  status: 422
}

export type submitReviewRequestModerationSubmitReviewRequestPostResponse500 = {
  data: null
  status: 500
}

export type submitReviewRequestModerationSubmitReviewRequestPostResponseComposite =

    | submitReviewRequestModerationSubmitReviewRequestPostResponse200
    | submitReviewRequestModerationSubmitReviewRequestPostResponse401
    | submitReviewRequestModerationSubmitReviewRequestPostResponse422
    | submitReviewRequestModerationSubmitReviewRequestPostResponse500

export type submitReviewRequestModerationSubmitReviewRequestPostResponse =
  submitReviewRequestModerationSubmitReviewRequestPostResponseComposite & {
    headers: Headers
  }

export const getSubmitReviewRequestModerationSubmitReviewRequestPostUrl =
  () => {
    return `${process.env.NEXT_PUBLIC_API_BASE_URI}/moderation/submit_review_request`
  }

export const submitReviewRequestModerationSubmitReviewRequestPost = async (
  reviewRequest: ReviewRequest,
  options?: RequestInit,
): Promise<submitReviewRequestModerationSubmitReviewRequestPostResponse> => {
  const res = await fetch(
    getSubmitReviewRequestModerationSubmitReviewRequestPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(reviewRequest),
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: submitReviewRequestModerationSubmitReviewRequestPostResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as submitReviewRequestModerationSubmitReviewRequestPostResponse
}

export const getSubmitReviewRequestModerationSubmitReviewRequestPostMutationOptions =
  <TError = null | null | null, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof submitReviewRequestModerationSubmitReviewRequestPost>
      >,
      TError,
      { data: ReviewRequest },
      TContext
    >
    fetch?: RequestInit
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof submitReviewRequestModerationSubmitReviewRequestPost>
    >,
    TError,
    { data: ReviewRequest },
    TContext
  > => {
    const mutationKey = ["submitReviewRequestModerationSubmitReviewRequestPost"]
    const { mutation: mutationOptions, fetch: fetchOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, fetch: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof submitReviewRequestModerationSubmitReviewRequestPost>
      >,
      { data: ReviewRequest }
    > = (props) => {
      const { data } = props ?? {}

      return submitReviewRequestModerationSubmitReviewRequestPost(
        data,
        fetchOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type SubmitReviewRequestModerationSubmitReviewRequestPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof submitReviewRequestModerationSubmitReviewRequestPost>
    >
  >
export type SubmitReviewRequestModerationSubmitReviewRequestPostMutationBody =
  ReviewRequest
export type SubmitReviewRequestModerationSubmitReviewRequestPostMutationError =
  | null
  | null
  | null

/**
 * @summary Submit Review Request
 */
export const useSubmitReviewRequestModerationSubmitReviewRequestPost = <
  TError = null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof submitReviewRequestModerationSubmitReviewRequestPost>
      >,
      TError,
      { data: ReviewRequest },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof submitReviewRequestModerationSubmitReviewRequestPost>
  >,
  TError,
  { data: ReviewRequest },
  TContext
> => {
  const mutationOptions =
    getSubmitReviewRequestModerationSubmitReviewRequestPostMutationOptions(
      options,
    )

  return useMutation(mutationOptions, queryClient)
}
/**
 * Approve or reject the moderation request with a comment. If all requests for a job are approved, the job is
marked as successful in flat-manager.
 * @summary Submit Review
 */
export type submitReviewModerationRequestsIdReviewPostResponse200 = {
  data: ReviewResponse
  status: 200
}

export type submitReviewModerationRequestsIdReviewPostResponse401 = {
  data: null
  status: 401
}

export type submitReviewModerationRequestsIdReviewPostResponse403 = {
  data: null
  status: 403
}

export type submitReviewModerationRequestsIdReviewPostResponse404 = {
  data: null
  status: 404
}

export type submitReviewModerationRequestsIdReviewPostResponse422 = {
  data: null
  status: 422
}

export type submitReviewModerationRequestsIdReviewPostResponse500 = {
  data: null
  status: 500
}

export type submitReviewModerationRequestsIdReviewPostResponseComposite =
  | submitReviewModerationRequestsIdReviewPostResponse200
  | submitReviewModerationRequestsIdReviewPostResponse401
  | submitReviewModerationRequestsIdReviewPostResponse403
  | submitReviewModerationRequestsIdReviewPostResponse404
  | submitReviewModerationRequestsIdReviewPostResponse422
  | submitReviewModerationRequestsIdReviewPostResponse500

export type submitReviewModerationRequestsIdReviewPostResponse =
  submitReviewModerationRequestsIdReviewPostResponseComposite & {
    headers: Headers
  }

export const getSubmitReviewModerationRequestsIdReviewPostUrl = (
  id: number,
) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/moderation/requests/${id}/review`
}

export const submitReviewModerationRequestsIdReviewPost = async (
  id: number,
  review: Review,
  options?: RequestInit,
): Promise<submitReviewModerationRequestsIdReviewPostResponse> => {
  const res = await fetch(
    getSubmitReviewModerationRequestsIdReviewPostUrl(id),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(review),
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: submitReviewModerationRequestsIdReviewPostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as submitReviewModerationRequestsIdReviewPostResponse
}

export const getSubmitReviewModerationRequestsIdReviewPostMutationOptions = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitReviewModerationRequestsIdReviewPost>>,
    TError,
    { id: number; data: Review },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof submitReviewModerationRequestsIdReviewPost>>,
  TError,
  { id: number; data: Review },
  TContext
> => {
  const mutationKey = ["submitReviewModerationRequestsIdReviewPost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof submitReviewModerationRequestsIdReviewPost>>,
    { id: number; data: Review }
  > = (props) => {
    const { id, data } = props ?? {}

    return submitReviewModerationRequestsIdReviewPost(id, data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SubmitReviewModerationRequestsIdReviewPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof submitReviewModerationRequestsIdReviewPost>>
  >
export type SubmitReviewModerationRequestsIdReviewPostMutationBody = Review
export type SubmitReviewModerationRequestsIdReviewPostMutationError =
  | null
  | null
  | null
  | null
  | null

/**
 * @summary Submit Review
 */
export const useSubmitReviewModerationRequestsIdReviewPost = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof submitReviewModerationRequestsIdReviewPost>>,
      TError,
      { id: number; data: Review },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof submitReviewModerationRequestsIdReviewPost>>,
  TError,
  { id: number; data: Review },
  TContext
> => {
  const mutationOptions =
    getSubmitReviewModerationRequestsIdReviewPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
