/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"

import { HttpResponse, delay, http } from "msw"
import type { RequestHandlerOptions } from "msw"

import { MainCategory, VerificationMethod } from ".././model"
import type {
  FavoriteApp,
  GetEolMessageAppidEolMessageAppIdGet200,
  GetEolMessageEolMessageGet200,
  GetEolRebaseAppidEolRebaseAppIdGet200,
  GetEolRebaseEolRebaseGet200,
  GetPlatformsPlatformsGet200,
  GetRuntimeListRuntimesGet200,
  MeilisearchResponseAppsIndex,
} from ".././model"

export const getGetEolRebaseEolRebaseGetResponseMock =
  (): GetEolRebaseEolRebaseGet200 => ({
    [faker.string.alphanumeric(5)]: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  })

export const getGetEolRebaseAppidEolRebaseAppIdGetResponseMock =
  (): GetEolRebaseAppidEolRebaseAppIdGet200 =>
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ])

export const getGetEolMessageEolMessageGetResponseMock =
  (): GetEolMessageEolMessageGet200 => ({
    [faker.string.alphanumeric(5)]: faker.string.alpha({
      length: { min: 10, max: 20 },
    }),
  })

export const getGetEolMessageAppidEolMessageAppIdGetResponseMock =
  (): GetEolMessageAppidEolMessageAppIdGet200 =>
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ])

export const getListAppstreamAppstreamGetResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  )

export const getGetIsFullscreenAppIsFullscreenAppAppIdGetResponseMock =
  (): boolean => faker.datatype.boolean()

export const getPostSearchSearchPostResponseMock = (
  overrideResponse: Partial<MeilisearchResponseAppsIndex> = {},
): MeilisearchResponseAppsIndex => ({
  hits: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    keywords: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      null,
    ]),
    summary: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    translations: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          [faker.string.alphanumeric(5)]: {
            [faker.string.alphanumeric(5)]: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            ]),
          },
        },
        null,
      ]),
      undefined,
    ]),
    project_license: faker.string.alpha({ length: { min: 10, max: 20 } }),
    is_free_license: faker.datatype.boolean(),
    app_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    icon: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    main_categories: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(MainCategory)),
      faker.helpers.arrayElements(Object.values(MainCategory)),
    ]),
    sub_categories: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        null,
      ]),
      undefined,
    ]),
    developer_name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    verification_verified: faker.datatype.boolean(),
    verification_method: faker.helpers.arrayElement(
      Object.values(VerificationMethod),
    ),
    verification_login_name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    verification_login_provider: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    verification_login_is_organization: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    verification_website: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    verification_timestamp: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    runtime: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    updated_at: faker.number.int({ min: undefined, max: undefined }),
    arches: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      null,
    ]),
    added_at: faker.number.int({ min: undefined, max: undefined }),
    trending: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        null,
      ]),
      undefined,
    ]),
    installs_last_month: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    isMobileFriendly: faker.datatype.boolean(),
  })),
  query: faker.string.alpha({ length: { min: 10, max: 20 } }),
  processingTimeMs: faker.number.int({ min: undefined, max: undefined }),
  hitsPerPage: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined }),
  totalHits: faker.number.int({ min: undefined, max: undefined }),
  facetDistribution: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        [faker.string.alphanumeric(5)]: {
          [faker.string.alphanumeric(5)]: faker.number.int({
            min: undefined,
            max: undefined,
          }),
        },
      },
      null,
    ]),
    undefined,
  ]),
  facetStats: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        [faker.string.alphanumeric(5)]: {
          [faker.string.alphanumeric(5)]: faker.number.int({
            min: undefined,
            max: undefined,
          }),
        },
      },
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
})

export const getGetRuntimeListRuntimesGetResponseMock =
  (): GetRuntimeListRuntimesGet200 => ({
    [faker.string.alphanumeric(5)]: faker.number.int({
      min: undefined,
      max: undefined,
    }),
  })

export const getGetPlatformsPlatformsGetResponseMock =
  (): GetPlatformsPlatformsGet200 => ({
    [faker.string.alphanumeric(5)]: {
      depends: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      aliases: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      keep: faker.number.int({ min: undefined, max: undefined }),
      stripe_account: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    },
  })

export const getGetAddonsAddonAppIdGetResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  )

export const getGetFavoritesFavoritesGetResponseMock = (): FavoriteApp[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    app_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }))

export const getIsFavoritedFavoritesAppIdGetResponseMock = (): boolean =>
  faker.datatype.boolean()

export const getGetEolRebaseEolRebaseGetMockHandler = (
  overrideResponse?:
    | GetEolRebaseEolRebaseGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetEolRebaseEolRebaseGet200> | GetEolRebaseEolRebaseGet200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/eol/rebase",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetEolRebaseEolRebaseGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetEolRebaseAppidEolRebaseAppIdGetMockHandler = (
  overrideResponse?:
    | GetEolRebaseAppidEolRebaseAppIdGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetEolRebaseAppidEolRebaseAppIdGet200>
        | GetEolRebaseAppidEolRebaseAppIdGet200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/eol/rebase/:appId",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetEolRebaseAppidEolRebaseAppIdGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetEolMessageEolMessageGetMockHandler = (
  overrideResponse?:
    | GetEolMessageEolMessageGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetEolMessageEolMessageGet200>
        | GetEolMessageEolMessageGet200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/eol/message",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetEolMessageEolMessageGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetEolMessageAppidEolMessageAppIdGetMockHandler = (
  overrideResponse?:
    | GetEolMessageAppidEolMessageAppIdGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetEolMessageAppidEolMessageAppIdGet200>
        | GetEolMessageAppidEolMessageAppIdGet200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/eol/message/:appId",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetEolMessageAppidEolMessageAppIdGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getListAppstreamAppstreamGetMockHandler = (
  overrideResponse?:
    | string[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string[]> | string[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/appstream",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListAppstreamAppstreamGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetAppstreamAppstreamAppIdGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/appstream/:appId",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getGetIsFullscreenAppIsFullscreenAppAppIdGetMockHandler = (
  overrideResponse?:
    | boolean
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<boolean> | boolean),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/is-fullscreen-app/:appId",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetIsFullscreenAppIsFullscreenAppAppIdGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getPostSearchSearchPostMockHandler = (
  overrideResponse?:
    | MeilisearchResponseAppsIndex
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<MeilisearchResponseAppsIndex>
        | MeilisearchResponseAppsIndex),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/search",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostSearchSearchPostResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetRuntimeListRuntimesGetMockHandler = (
  overrideResponse?:
    | GetRuntimeListRuntimesGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetRuntimeListRuntimesGet200>
        | GetRuntimeListRuntimesGet200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/runtimes",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetRuntimeListRuntimesGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetSummarySummaryAppIdGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/summary/:appId",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getGetPlatformsPlatformsGetMockHandler = (
  overrideResponse?:
    | GetPlatformsPlatformsGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetPlatformsPlatformsGet200> | GetPlatformsPlatformsGet200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/platforms",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetPlatformsPlatformsGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetAddonsAddonAppIdGetMockHandler = (
  overrideResponse?:
    | string[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string[]> | string[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/addon/:appId",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetAddonsAddonAppIdGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetExceptionsExceptionsGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/exceptions/",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getGetExceptionsForAppExceptionsAppIdGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/exceptions/:appId",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getAddToFavoritesFavoritesAppIdAddPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/favorites/:appId/add",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getRemoveFromFavoritesFavoritesAppIdRemoveDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/favorites/:appId/remove",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getGetFavoritesFavoritesGetMockHandler = (
  overrideResponse?:
    | FavoriteApp[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FavoriteApp[]> | FavoriteApp[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/favorites",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetFavoritesFavoritesGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getIsFavoritedFavoritesAppIdGetMockHandler = (
  overrideResponse?:
    | boolean
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<boolean> | boolean),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/favorites/:appId",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getIsFavoritedFavoritesAppIdGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}
export const getAppMock = () => [
  getGetEolRebaseEolRebaseGetMockHandler(),
  getGetEolRebaseAppidEolRebaseAppIdGetMockHandler(),
  getGetEolMessageEolMessageGetMockHandler(),
  getGetEolMessageAppidEolMessageAppIdGetMockHandler(),
  getListAppstreamAppstreamGetMockHandler(),
  getGetAppstreamAppstreamAppIdGetMockHandler(),
  getGetIsFullscreenAppIsFullscreenAppAppIdGetMockHandler(),
  getPostSearchSearchPostMockHandler(),
  getGetRuntimeListRuntimesGetMockHandler(),
  getGetSummarySummaryAppIdGetMockHandler(),
  getGetPlatformsPlatformsGetMockHandler(),
  getGetAddonsAddonAppIdGetMockHandler(),
  getGetExceptionsExceptionsGetMockHandler(),
  getGetExceptionsForAppExceptionsAppIdGetMockHandler(),
  getAddToFavoritesFavoritesAppIdAddPostMockHandler(),
  getRemoveFromFavoritesFavoritesAppIdRemoveDeleteMockHandler(),
  getGetFavoritesFavoritesGetMockHandler(),
  getIsFavoritedFavoritesAppIdGetMockHandler(),
]
