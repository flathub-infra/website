/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import type {
  GetAppstreamAppstreamAppIdGet200,
  GetCategoryCategoryCategoryGet200,
  GetDeveloperDeveloperDeveloperGet200,
  GetEolMessageAppidEolMessageAppIdGet200,
  GetEolMessageEolMessageGet200,
  GetEolRebaseAppidEolRebaseAppIdGet200,
  GetEolRebaseEolRebaseGet200,
  GetExceptionsExceptionsGet200,
  GetExceptionsForAppExceptionsAppIdGet200,
  GetPlatformsPlatformsGet200,
  GetPopularLastMonthPopularLastMonthGet200,
  GetRecentlyAddedCollectionRecentlyAddedGet200,
  GetRecentlyUpdatedCollectionRecentlyUpdatedGet200,
  GetRuntimeListRuntimesGet200,
  GetStatsForAppStatsAppIdGet200,
  GetStatsStatsGet200,
  GetSubcategoryCategoryCategorySubcategoriesSubcategoryGet200,
  GetSummarySummaryAppIdGet200,
  GetVerifiedCollectionVerifiedGet200,
  PostSearchSearchPost200,
} from ".././model"

export const getGetCategoriesCategoriesGetResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  )

export const getGetCategoryCategoryCategoryGetResponseMock =
  (): GetCategoryCategoryCategoryGet200 => ({})

export const getGetSubcategoryCategoryCategorySubcategoriesSubcategoryGetResponseMock =
  (): GetSubcategoryCategoryCategorySubcategoriesSubcategoryGet200 => ({})

export const getGetDevelopersDeveloperGetResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  )

export const getGetDeveloperDeveloperDeveloperGetResponseMock =
  (): GetDeveloperDeveloperDeveloperGet200 => ({})

export const getGetEolRebaseEolRebaseGetResponseMock =
  (): GetEolRebaseEolRebaseGet200 => ({
    [faker.string.alphanumeric(5)]: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
  })

export const getGetEolRebaseAppidEolRebaseAppIdGetResponseMock =
  (): GetEolRebaseAppidEolRebaseAppIdGet200 =>
    faker.helpers.arrayElement([faker.word.sample(), {}])

export const getGetEolMessageEolMessageGetResponseMock =
  (): GetEolMessageEolMessageGet200 => ({
    [faker.string.alphanumeric(5)]: faker.word.sample(),
  })

export const getGetEolMessageAppidEolMessageAppIdGetResponseMock =
  (): GetEolMessageAppidEolMessageAppIdGet200 =>
    faker.helpers.arrayElement([faker.word.sample(), {}])

export const getListAppstreamAppstreamGetResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  )

export const getGetAppstreamAppstreamAppIdGetResponseMock =
  (): GetAppstreamAppstreamAppIdGet200 => ({})

export const getPostSearchSearchPostResponseMock =
  (): PostSearchSearchPost200 => ({})

export const getGetRuntimeListRuntimesGetResponseMock =
  (): GetRuntimeListRuntimesGet200 => ({
    [faker.string.alphanumeric(5)]: faker.number.int({
      min: undefined,
      max: undefined,
    }),
  })

export const getGetRecentlyUpdatedCollectionRecentlyUpdatedGetResponseMock =
  (): GetRecentlyUpdatedCollectionRecentlyUpdatedGet200 => ({})

export const getGetRecentlyAddedCollectionRecentlyAddedGetResponseMock =
  (): GetRecentlyAddedCollectionRecentlyAddedGet200 => ({})

export const getGetVerifiedCollectionVerifiedGetResponseMock =
  (): GetVerifiedCollectionVerifiedGet200 => ({})

export const getGetPopularLastMonthPopularLastMonthGetResponseMock =
  (): GetPopularLastMonthPopularLastMonthGet200 => ({})

export const getGetStatsStatsGetResponseMock = (
  overrideResponse: any = {},
): GetStatsStatsGet200 =>
  faker.helpers.arrayElement([
    {
      category_totals: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      countries: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      delta_downloads_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      downloads: faker.number.int({ min: undefined, max: undefined }),
      downloads_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      number_of_apps: faker.number.int({ min: undefined, max: undefined }),
      updates_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      ...overrideResponse,
    },
    {},
  ])

export const getGetStatsForAppStatsAppIdGetResponseMock =
  (): GetStatsForAppStatsAppIdGet200 => ({})

export const getGetSummarySummaryAppIdGetResponseMock =
  (): GetSummarySummaryAppIdGet200 => ({})

export const getGetPlatformsPlatformsGetResponseMock = (
  overrideResponse: any = {},
): GetPlatformsPlatformsGet200 => ({
  [faker.string.alphanumeric(5)]: {
    aliases: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    depends: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), {}]),
      undefined,
    ]),
    keep: faker.number.int({ min: undefined, max: undefined }),
    stripe_account: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), {}]),
      undefined,
    ]),
    ...overrideResponse,
  },
})

export const getGetExceptionsExceptionsGetResponseMock =
  (): GetExceptionsExceptionsGet200 => ({})

export const getGetExceptionsForAppExceptionsAppIdGetResponseMock =
  (): GetExceptionsForAppExceptionsAppIdGet200 => ({})

export const getGetAddonsAddonAppIdGetResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  )

export const getGetCategoriesCategoriesGetMockHandler = (
  overrideResponse?: string[],
) => {
  return http.get("*/categories", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetCategoriesCategoriesGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetCategoryCategoryCategoryGetMockHandler = (
  overrideResponse?: GetCategoryCategoryCategoryGet200,
) => {
  return http.get("*/category/:category", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetCategoryCategoryCategoryGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetSubcategoryCategoryCategorySubcategoriesSubcategoryGetMockHandler =
  (
    overrideResponse?: GetSubcategoryCategoryCategorySubcategoriesSubcategoryGet200,
  ) => {
    return http.get(
      "*/category/:category/subcategories/:subcategory",
      async () => {
        await delay(1000)
        return new HttpResponse(
          JSON.stringify(
            overrideResponse
              ? overrideResponse
              : getGetSubcategoryCategoryCategorySubcategoriesSubcategoryGetResponseMock(),
          ),
          {
            status: 200,
            headers: {
              "Content-Type": "application/json",
            },
          },
        )
      },
    )
  }

export const getGetDevelopersDeveloperGetMockHandler = (
  overrideResponse?: string[],
) => {
  return http.get("*/developer", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetDevelopersDeveloperGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetDeveloperDeveloperDeveloperGetMockHandler = (
  overrideResponse?: GetDeveloperDeveloperDeveloperGet200,
) => {
  return http.get("*/developer/:developer", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetDeveloperDeveloperDeveloperGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetEolRebaseEolRebaseGetMockHandler = (
  overrideResponse?: GetEolRebaseEolRebaseGet200,
) => {
  return http.get("*/eol/rebase", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEolRebaseEolRebaseGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetEolRebaseAppidEolRebaseAppIdGetMockHandler = (
  overrideResponse?: GetEolRebaseAppidEolRebaseAppIdGet200,
) => {
  return http.get("*/eol/rebase/:appId", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEolRebaseAppidEolRebaseAppIdGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetEolMessageEolMessageGetMockHandler = (
  overrideResponse?: GetEolMessageEolMessageGet200,
) => {
  return http.get("*/eol/message", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEolMessageEolMessageGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetEolMessageAppidEolMessageAppIdGetMockHandler = (
  overrideResponse?: GetEolMessageAppidEolMessageAppIdGet200,
) => {
  return http.get("*/eol/message/:appId", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEolMessageAppidEolMessageAppIdGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getListAppstreamAppstreamGetMockHandler = (
  overrideResponse?: string[],
) => {
  return http.get("*/appstream", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getListAppstreamAppstreamGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetAppstreamAppstreamAppIdGetMockHandler = (
  overrideResponse?: GetAppstreamAppstreamAppIdGet200,
) => {
  return http.get("*/appstream/:appId", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetAppstreamAppstreamAppIdGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getPostSearchSearchPostMockHandler = (
  overrideResponse?: PostSearchSearchPost200,
) => {
  return http.post("*/search", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getPostSearchSearchPostResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetRuntimeListRuntimesGetMockHandler = (
  overrideResponse?: GetRuntimeListRuntimesGet200,
) => {
  return http.get("*/runtimes", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetRuntimeListRuntimesGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetRecentlyUpdatedCollectionRecentlyUpdatedGetMockHandler = (
  overrideResponse?: GetRecentlyUpdatedCollectionRecentlyUpdatedGet200,
) => {
  return http.get("*/collection/recently-updated", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetRecentlyUpdatedCollectionRecentlyUpdatedGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetRecentlyAddedCollectionRecentlyAddedGetMockHandler = (
  overrideResponse?: GetRecentlyAddedCollectionRecentlyAddedGet200,
) => {
  return http.get("*/collection/recently-added", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetRecentlyAddedCollectionRecentlyAddedGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetVerifiedCollectionVerifiedGetMockHandler = (
  overrideResponse?: GetVerifiedCollectionVerifiedGet200,
) => {
  return http.get("*/collection/verified", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetVerifiedCollectionVerifiedGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetPopularLastMonthPopularLastMonthGetMockHandler = (
  overrideResponse?: GetPopularLastMonthPopularLastMonthGet200,
) => {
  return http.get("*/popular/last-month", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetPopularLastMonthPopularLastMonthGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetStatsStatsGetMockHandler = (
  overrideResponse?: GetStatsStatsGet200,
) => {
  return http.get("*/stats", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetStatsStatsGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetStatsForAppStatsAppIdGetMockHandler = (
  overrideResponse?: GetStatsForAppStatsAppIdGet200,
) => {
  return http.get("*/stats/:appId", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetStatsForAppStatsAppIdGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetSummarySummaryAppIdGetMockHandler = (
  overrideResponse?: GetSummarySummaryAppIdGet200,
) => {
  return http.get("*/summary/:appId", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetSummarySummaryAppIdGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetPlatformsPlatformsGetMockHandler = (
  overrideResponse?: GetPlatformsPlatformsGet200,
) => {
  return http.get("*/platforms", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetPlatformsPlatformsGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetExceptionsExceptionsGetMockHandler = (
  overrideResponse?: GetExceptionsExceptionsGet200,
) => {
  return http.get("*/exceptions", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetExceptionsExceptionsGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetExceptionsForAppExceptionsAppIdGetMockHandler = (
  overrideResponse?: GetExceptionsForAppExceptionsAppIdGet200,
) => {
  return http.get("*/exceptions/:appId", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetExceptionsForAppExceptionsAppIdGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetAddonsAddonAppIdGetMockHandler = (
  overrideResponse?: string[],
) => {
  return http.get("*/addon/:appId", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetAddonsAddonAppIdGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}
export const getAppMock = () => [
  getGetCategoriesCategoriesGetMockHandler(),
  getGetCategoryCategoryCategoryGetMockHandler(),
  getGetSubcategoryCategoryCategorySubcategoriesSubcategoryGetMockHandler(),
  getGetDevelopersDeveloperGetMockHandler(),
  getGetDeveloperDeveloperDeveloperGetMockHandler(),
  getGetEolRebaseEolRebaseGetMockHandler(),
  getGetEolRebaseAppidEolRebaseAppIdGetMockHandler(),
  getGetEolMessageEolMessageGetMockHandler(),
  getGetEolMessageAppidEolMessageAppIdGetMockHandler(),
  getListAppstreamAppstreamGetMockHandler(),
  getGetAppstreamAppstreamAppIdGetMockHandler(),
  getPostSearchSearchPostMockHandler(),
  getGetRuntimeListRuntimesGetMockHandler(),
  getGetRecentlyUpdatedCollectionRecentlyUpdatedGetMockHandler(),
  getGetRecentlyAddedCollectionRecentlyAddedGetMockHandler(),
  getGetVerifiedCollectionVerifiedGetMockHandler(),
  getGetPopularLastMonthPopularLastMonthGetMockHandler(),
  getGetStatsStatsGetMockHandler(),
  getGetStatsForAppStatsAppIdGetMockHandler(),
  getGetSummarySummaryAppIdGetMockHandler(),
  getGetPlatformsPlatformsGetMockHandler(),
  getGetExceptionsExceptionsGetMockHandler(),
  getGetExceptionsForAppExceptionsAppIdGetMockHandler(),
  getGetAddonsAddonAppIdGetMockHandler(),
]
