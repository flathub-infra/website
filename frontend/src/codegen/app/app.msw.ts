/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import type {
  GetEolMessageAppidEolMessageAppIdGet200,
  GetEolMessageEolMessageGet200,
  GetEolRebaseAppidEolRebaseAppIdGet200,
  GetEolRebaseEolRebaseGet200,
  GetPlatformsPlatformsGet200,
  GetRuntimeListRuntimesGet200,
  GetStatsStatsGet200,
} from ".././model"

export const getGetCategoriesCategoriesGetResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  )

export const getGetDevelopersDeveloperGetResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  )

export const getGetEolRebaseEolRebaseGetResponseMock =
  (): GetEolRebaseEolRebaseGet200 => ({
    [faker.string.alphanumeric(5)]: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha(20)),
  })

export const getGetEolRebaseAppidEolRebaseAppIdGetResponseMock =
  (): GetEolRebaseAppidEolRebaseAppIdGet200 =>
    faker.helpers.arrayElement([faker.string.alpha(20), null])

export const getGetEolMessageEolMessageGetResponseMock =
  (): GetEolMessageEolMessageGet200 => ({
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  })

export const getGetEolMessageAppidEolMessageAppIdGetResponseMock =
  (): GetEolMessageAppidEolMessageAppIdGet200 =>
    faker.helpers.arrayElement([faker.string.alpha(20), null])

export const getListAppstreamAppstreamGetResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  )

export const getGetIsFullscreenAppIsFullscreenAppAppIdGetResponseMock =
  (): boolean => faker.datatype.boolean()

export const getGetRuntimeListRuntimesGetResponseMock =
  (): GetRuntimeListRuntimesGet200 => ({
    [faker.string.alphanumeric(5)]: faker.number.int({
      min: undefined,
      max: undefined,
    }),
  })

export const getGetStatsStatsGetResponseMock = (): GetStatsStatsGet200 =>
  faker.helpers.arrayElement([
    {
      category_totals: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      countries: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      delta_downloads_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      downloads: faker.number.int({ min: undefined, max: undefined }),
      downloads_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      number_of_apps: faker.number.int({ min: undefined, max: undefined }),
      updates_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
    },
    null,
  ])

export const getGetPlatformsPlatformsGetResponseMock =
  (): GetPlatformsPlatformsGet200 => ({
    [faker.string.alphanumeric(5)]: {
      aliases: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha(20)),
      depends: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      keep: faker.number.int({ min: undefined, max: undefined }),
      stripe_account: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
    },
  })

export const getGetAddonsAddonAppIdGetResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  )

export const getGetCategoriesCategoriesGetMockHandler = (
  overrideResponse?:
    | string[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string[]> | string[]),
) => {
  return http.get("*/categories", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCategoriesCategoriesGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetCategoryCategoryCategoryGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/category/:category", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetSubcategoryCategoryCategorySubcategoriesSubcategoryGetMockHandler =
  (
    overrideResponse?:
      | unknown
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => Promise<unknown> | unknown),
  ) => {
    return http.get(
      "*/category/:category/subcategories/:subcategory",
      async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
          await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 200 })
      },
    )
  }

export const getGetDevelopersDeveloperGetMockHandler = (
  overrideResponse?:
    | string[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string[]> | string[]),
) => {
  return http.get("*/developer", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDevelopersDeveloperGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetDeveloperDeveloperDeveloperGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/developer/:developer", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetKeywordKeywordGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/keyword", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetEolRebaseEolRebaseGetMockHandler = (
  overrideResponse?:
    | GetEolRebaseEolRebaseGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetEolRebaseEolRebaseGet200> | GetEolRebaseEolRebaseGet200),
) => {
  return http.get("*/eol/rebase", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetEolRebaseEolRebaseGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetEolRebaseAppidEolRebaseAppIdGetMockHandler = (
  overrideResponse?:
    | GetEolRebaseAppidEolRebaseAppIdGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetEolRebaseAppidEolRebaseAppIdGet200>
        | GetEolRebaseAppidEolRebaseAppIdGet200),
) => {
  return http.get("*/eol/rebase/:appId", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetEolRebaseAppidEolRebaseAppIdGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetEolMessageEolMessageGetMockHandler = (
  overrideResponse?:
    | GetEolMessageEolMessageGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetEolMessageEolMessageGet200>
        | GetEolMessageEolMessageGet200),
) => {
  return http.get("*/eol/message", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetEolMessageEolMessageGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetEolMessageAppidEolMessageAppIdGetMockHandler = (
  overrideResponse?:
    | GetEolMessageAppidEolMessageAppIdGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetEolMessageAppidEolMessageAppIdGet200>
        | GetEolMessageAppidEolMessageAppIdGet200),
) => {
  return http.get("*/eol/message/:appId", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetEolMessageAppidEolMessageAppIdGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getListAppstreamAppstreamGetMockHandler = (
  overrideResponse?:
    | string[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string[]> | string[]),
) => {
  return http.get("*/appstream", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListAppstreamAppstreamGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetAppstreamAppstreamAppIdGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/appstream/:appId", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetIsFullscreenAppIsFullscreenAppAppIdGetMockHandler = (
  overrideResponse?:
    | boolean
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<boolean> | boolean),
) => {
  return http.get("*/is-fullscreen-app/:appId", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetIsFullscreenAppIsFullscreenAppAppIdGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getPostSearchSearchPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/search", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetRuntimeListRuntimesGetMockHandler = (
  overrideResponse?:
    | GetRuntimeListRuntimesGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetRuntimeListRuntimesGet200>
        | GetRuntimeListRuntimesGet200),
) => {
  return http.get("*/runtimes", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetRuntimeListRuntimesGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetRecentlyUpdatedCollectionRecentlyUpdatedGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/recently-updated", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetRecentlyAddedCollectionRecentlyAddedGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/recently-added", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetVerifiedCollectionVerifiedGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/verified", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetPopularLastMonthPopularLastMonthGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/popular/last-month", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetTrendingLastTwoWeeksTrendingLastTwoWeeksGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/trending/last-two-weeks", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetStatsStatsGetMockHandler = (
  overrideResponse?:
    | GetStatsStatsGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetStatsStatsGet200> | GetStatsStatsGet200),
) => {
  return http.get("*/stats", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetStatsStatsGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetStatsForAppStatsAppIdGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/stats/:appId", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetSummarySummaryAppIdGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/summary/:appId", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetPlatformsPlatformsGetMockHandler = (
  overrideResponse?:
    | GetPlatformsPlatformsGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetPlatformsPlatformsGet200> | GetPlatformsPlatformsGet200),
) => {
  return http.get("*/platforms", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPlatformsPlatformsGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetExceptionsExceptionsGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/exceptions", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetExceptionsForAppExceptionsAppIdGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/exceptions/:appId", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetAddonsAddonAppIdGetMockHandler = (
  overrideResponse?:
    | string[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string[]> | string[]),
) => {
  return http.get("*/addon/:appId", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAddonsAddonAppIdGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}
export const getAppMock = () => [
  getGetCategoriesCategoriesGetMockHandler(),
  getGetCategoryCategoryCategoryGetMockHandler(),
  getGetSubcategoryCategoryCategorySubcategoriesSubcategoryGetMockHandler(),
  getGetDevelopersDeveloperGetMockHandler(),
  getGetDeveloperDeveloperDeveloperGetMockHandler(),
  getGetKeywordKeywordGetMockHandler(),
  getGetEolRebaseEolRebaseGetMockHandler(),
  getGetEolRebaseAppidEolRebaseAppIdGetMockHandler(),
  getGetEolMessageEolMessageGetMockHandler(),
  getGetEolMessageAppidEolMessageAppIdGetMockHandler(),
  getListAppstreamAppstreamGetMockHandler(),
  getGetAppstreamAppstreamAppIdGetMockHandler(),
  getGetIsFullscreenAppIsFullscreenAppAppIdGetMockHandler(),
  getPostSearchSearchPostMockHandler(),
  getGetRuntimeListRuntimesGetMockHandler(),
  getGetRecentlyUpdatedCollectionRecentlyUpdatedGetMockHandler(),
  getGetRecentlyAddedCollectionRecentlyAddedGetMockHandler(),
  getGetVerifiedCollectionVerifiedGetMockHandler(),
  getGetPopularLastMonthPopularLastMonthGetMockHandler(),
  getGetTrendingLastTwoWeeksTrendingLastTwoWeeksGetMockHandler(),
  getGetStatsStatsGetMockHandler(),
  getGetStatsForAppStatsAppIdGetMockHandler(),
  getGetSummarySummaryAppIdGetMockHandler(),
  getGetPlatformsPlatformsGetMockHandler(),
  getGetExceptionsExceptionsGetMockHandler(),
  getGetExceptionsForAppExceptionsAppIdGetMockHandler(),
  getGetAddonsAddonAppIdGetMockHandler(),
]
