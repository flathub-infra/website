/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

import type {
  FavoriteApp,
  GetAppstreamAppstreamAppIdGetParams,
  GetEolMessageAppidEolMessageAppIdGet200,
  GetEolMessageAppidEolMessageAppIdGetParams,
  GetEolMessageEolMessageGet200,
  GetEolRebaseAppidEolRebaseAppIdGet200,
  GetEolRebaseAppidEolRebaseAppIdGetParams,
  GetEolRebaseEolRebaseGet200,
  GetPlatformsPlatformsGet200,
  GetRuntimeListRuntimesGet200,
  GetSummarySummaryAppIdGetParams,
  HTTPValidationError,
  ListAppstreamAppstreamGetParams,
  MeilisearchResponseLimitedAppsIndex,
  PostSearchSearchPostParams,
  SearchQuery,
} from ".././model"

/**
 * @summary Get Eol Rebase
 */
export const getEolRebaseEolRebaseGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetEolRebaseEolRebaseGet200>> => {
  return axios.get(`/eol/rebase`, options)
}

export const getGetEolRebaseEolRebaseGetQueryKey = () => {
  return [`/eol/rebase`] as const
}

export const getGetEolRebaseEolRebaseGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetEolRebaseEolRebaseGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>
  > = ({ signal }) => getEolRebaseEolRebaseGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEolRebaseEolRebaseGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>
>
export type GetEolRebaseEolRebaseGetQueryError = AxiosError<unknown>

export function useGetEolRebaseEolRebaseGet<
  TData = Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
        TError,
        Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetEolRebaseEolRebaseGet<
  TData = Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
        TError,
        Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetEolRebaseEolRebaseGet<
  TData = Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Eol Rebase
 */

export function useGetEolRebaseEolRebaseGet<
  TData = Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetEolRebaseEolRebaseGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Eol Rebase Appid
 */
export const getEolRebaseAppidEolRebaseAppIdGet = (
  appId: string,
  params?: GetEolRebaseAppidEolRebaseAppIdGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetEolRebaseAppidEolRebaseAppIdGet200>> => {
  return axios.get(`/eol/rebase/${appId}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetEolRebaseAppidEolRebaseAppIdGetQueryKey = (
  appId: string,
  params?: GetEolRebaseAppidEolRebaseAppIdGetParams,
) => {
  return [`/eol/rebase/${appId}`, ...(params ? [params] : [])] as const
}

export const getGetEolRebaseAppidEolRebaseAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolRebaseAppidEolRebaseAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetEolRebaseAppidEolRebaseAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>
  > = ({ signal }) =>
    getEolRebaseAppidEolRebaseAppIdGet(appId, params, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEolRebaseAppidEolRebaseAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>
>
export type GetEolRebaseAppidEolRebaseAppIdGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetEolRebaseAppidEolRebaseAppIdGet<
  TData = Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params: undefined | GetEolRebaseAppidEolRebaseAppIdGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetEolRebaseAppidEolRebaseAppIdGet<
  TData = Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolRebaseAppidEolRebaseAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetEolRebaseAppidEolRebaseAppIdGet<
  TData = Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolRebaseAppidEolRebaseAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Eol Rebase Appid
 */

export function useGetEolRebaseAppidEolRebaseAppIdGet<
  TData = Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolRebaseAppidEolRebaseAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetEolRebaseAppidEolRebaseAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Eol Message
 */
export const getEolMessageEolMessageGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetEolMessageEolMessageGet200>> => {
  return axios.get(`/eol/message`, options)
}

export const getGetEolMessageEolMessageGetQueryKey = () => {
  return [`/eol/message`] as const
}

export const getGetEolMessageEolMessageGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetEolMessageEolMessageGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEolMessageEolMessageGet>>
  > = ({ signal }) => getEolMessageEolMessageGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEolMessageEolMessageGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEolMessageEolMessageGet>>
>
export type GetEolMessageEolMessageGetQueryError = AxiosError<unknown>

export function useGetEolMessageEolMessageGet<
  TData = Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
        TError,
        Awaited<ReturnType<typeof getEolMessageEolMessageGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetEolMessageEolMessageGet<
  TData = Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
        TError,
        Awaited<ReturnType<typeof getEolMessageEolMessageGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetEolMessageEolMessageGet<
  TData = Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Eol Message
 */

export function useGetEolMessageEolMessageGet<
  TData = Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetEolMessageEolMessageGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Eol Message Appid
 */
export const getEolMessageAppidEolMessageAppIdGet = (
  appId: string,
  params?: GetEolMessageAppidEolMessageAppIdGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetEolMessageAppidEolMessageAppIdGet200>> => {
  return axios.get(`/eol/message/${appId}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetEolMessageAppidEolMessageAppIdGetQueryKey = (
  appId: string,
  params?: GetEolMessageAppidEolMessageAppIdGetParams,
) => {
  return [`/eol/message/${appId}`, ...(params ? [params] : [])] as const
}

export const getGetEolMessageAppidEolMessageAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolMessageAppidEolMessageAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetEolMessageAppidEolMessageAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>
  > = ({ signal }) =>
    getEolMessageAppidEolMessageAppIdGet(appId, params, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEolMessageAppidEolMessageAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>
>
export type GetEolMessageAppidEolMessageAppIdGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetEolMessageAppidEolMessageAppIdGet<
  TData = Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params: undefined | GetEolMessageAppidEolMessageAppIdGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetEolMessageAppidEolMessageAppIdGet<
  TData = Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolMessageAppidEolMessageAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetEolMessageAppidEolMessageAppIdGet<
  TData = Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolMessageAppidEolMessageAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Eol Message Appid
 */

export function useGetEolMessageAppidEolMessageAppIdGet<
  TData = Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolMessageAppidEolMessageAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetEolMessageAppidEolMessageAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary List Appstream
 */
export const listAppstreamAppstreamGet = (
  params?: ListAppstreamAppstreamGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string[]>> => {
  return axios.get(`/appstream`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListAppstreamAppstreamGetQueryKey = (
  params?: ListAppstreamAppstreamGetParams,
) => {
  return [`/appstream`, ...(params ? [params] : [])] as const
}

export const getListAppstreamAppstreamGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListAppstreamAppstreamGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListAppstreamAppstreamGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listAppstreamAppstreamGet>>
  > = ({ signal }) =>
    listAppstreamAppstreamGet(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListAppstreamAppstreamGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAppstreamAppstreamGet>>
>
export type ListAppstreamAppstreamGetQueryError =
  AxiosError<HTTPValidationError>

export function useListAppstreamAppstreamGet<
  TData = Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: undefined | ListAppstreamAppstreamGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
          TError,
          Awaited<ReturnType<typeof listAppstreamAppstreamGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListAppstreamAppstreamGet<
  TData = Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListAppstreamAppstreamGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
          TError,
          Awaited<ReturnType<typeof listAppstreamAppstreamGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListAppstreamAppstreamGet<
  TData = Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListAppstreamAppstreamGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List Appstream
 */

export function useListAppstreamAppstreamGet<
  TData = Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListAppstreamAppstreamGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListAppstreamAppstreamGetQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Appstream
 */
export const getAppstreamAppstreamAppIdGet = (
  appId: string,
  params?: GetAppstreamAppstreamAppIdGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/appstream/${appId}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetAppstreamAppstreamAppIdGetQueryKey = (
  appId: string,
  params?: GetAppstreamAppstreamAppIdGetParams,
) => {
  return [`/appstream/${appId}`, ...(params ? [params] : [])] as const
}

export const getGetAppstreamAppstreamAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetAppstreamAppstreamAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetAppstreamAppstreamAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>
  > = ({ signal }) =>
    getAppstreamAppstreamAppIdGet(appId, params, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAppstreamAppstreamAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>
>
export type GetAppstreamAppstreamAppIdGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetAppstreamAppstreamAppIdGet<
  TData = Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params: undefined | GetAppstreamAppstreamAppIdGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppstreamAppstreamAppIdGet<
  TData = Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetAppstreamAppstreamAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppstreamAppstreamAppIdGet<
  TData = Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetAppstreamAppstreamAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Appstream
 */

export function useGetAppstreamAppstreamAppIdGet<
  TData = Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetAppstreamAppstreamAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetAppstreamAppstreamAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Isfullscreenapp
 */
export const getIsFullscreenAppIsFullscreenAppAppIdGet = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<boolean>> => {
  return axios.get(`/is-fullscreen-app/${appId}`, options)
}

export const getGetIsFullscreenAppIsFullscreenAppAppIdGetQueryKey = (
  appId: string,
) => {
  return [`/is-fullscreen-app/${appId}`] as const
}

export const getGetIsFullscreenAppIsFullscreenAppAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetIsFullscreenAppIsFullscreenAppAppIdGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>
  > = ({ signal }) =>
    getIsFullscreenAppIsFullscreenAppAppIdGet(appId, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetIsFullscreenAppIsFullscreenAppAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>
>
export type GetIsFullscreenAppIsFullscreenAppAppIdGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetIsFullscreenAppIsFullscreenAppAppIdGet<
  TData = Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetIsFullscreenAppIsFullscreenAppAppIdGet<
  TData = Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetIsFullscreenAppIsFullscreenAppAppIdGet<
  TData = Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Isfullscreenapp
 */

export function useGetIsFullscreenAppIsFullscreenAppAppIdGet<
  TData = Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getIsFullscreenAppIsFullscreenAppAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetIsFullscreenAppIsFullscreenAppAppIdGetQueryOptions(
    appId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Post Search
 */
export const postSearchSearchPost = (
  searchQuery: SearchQuery,
  params?: PostSearchSearchPostParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<MeilisearchResponseLimitedAppsIndex>> => {
  return axios.post(`/search`, searchQuery, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getPostSearchSearchPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSearchSearchPost>>,
    TError,
    { data: SearchQuery; params?: PostSearchSearchPostParams },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSearchSearchPost>>,
  TError,
  { data: SearchQuery; params?: PostSearchSearchPostParams },
  TContext
> => {
  const mutationKey = ["postSearchSearchPost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSearchSearchPost>>,
    { data: SearchQuery; params?: PostSearchSearchPostParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postSearchSearchPost(data, params, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostSearchSearchPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSearchSearchPost>>
>
export type PostSearchSearchPostMutationBody = SearchQuery
export type PostSearchSearchPostMutationError = AxiosError<HTTPValidationError>

/**
 * @summary Post Search
 */
export const usePostSearchSearchPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSearchSearchPost>>,
    TError,
    { data: SearchQuery; params?: PostSearchSearchPostParams },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof postSearchSearchPost>>,
  TError,
  { data: SearchQuery; params?: PostSearchSearchPostParams },
  TContext
> => {
  const mutationOptions = getPostSearchSearchPostMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Get Runtime List
 */
export const getRuntimeListRuntimesGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetRuntimeListRuntimesGet200>> => {
  return axios.get(`/runtimes`, options)
}

export const getGetRuntimeListRuntimesGetQueryKey = () => {
  return [`/runtimes`] as const
}

export const getGetRuntimeListRuntimesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRuntimeListRuntimesGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>
  > = ({ signal }) => getRuntimeListRuntimesGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRuntimeListRuntimesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>
>
export type GetRuntimeListRuntimesGetQueryError = AxiosError<unknown>

export function useGetRuntimeListRuntimesGet<
  TData = Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
        TError,
        Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRuntimeListRuntimesGet<
  TData = Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
        TError,
        Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRuntimeListRuntimesGet<
  TData = Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Runtime List
 */

export function useGetRuntimeListRuntimesGet<
  TData = Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetRuntimeListRuntimesGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Summary
 */
export const getSummarySummaryAppIdGet = (
  appId: string,
  params?: GetSummarySummaryAppIdGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/summary/${appId}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetSummarySummaryAppIdGetQueryKey = (
  appId: string,
  params?: GetSummarySummaryAppIdGetParams,
) => {
  return [`/summary/${appId}`, ...(params ? [params] : [])] as const
}

export const getGetSummarySummaryAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetSummarySummaryAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetSummarySummaryAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>
  > = ({ signal }) =>
    getSummarySummaryAppIdGet(appId, params, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSummarySummaryAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>
>
export type GetSummarySummaryAppIdGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetSummarySummaryAppIdGet<
  TData = Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params: undefined | GetSummarySummaryAppIdGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetSummarySummaryAppIdGet<
  TData = Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetSummarySummaryAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetSummarySummaryAppIdGet<
  TData = Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetSummarySummaryAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Summary
 */

export function useGetSummarySummaryAppIdGet<
  TData = Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetSummarySummaryAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetSummarySummaryAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Return a mapping from org-name to platform aliases and dependencies which are
recognised by the backend.  These are used by things such as the transactions
and donations APIs to address amounts to the platforms.
 * @summary Get Platforms
 */
export const getPlatformsPlatformsGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetPlatformsPlatformsGet200>> => {
  return axios.get(`/platforms`, options)
}

export const getGetPlatformsPlatformsGetQueryKey = () => {
  return [`/platforms`] as const
}

export const getGetPlatformsPlatformsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPlatformsPlatformsGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPlatformsPlatformsGet>>
  > = ({ signal }) => getPlatformsPlatformsGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPlatformsPlatformsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPlatformsPlatformsGet>>
>
export type GetPlatformsPlatformsGetQueryError = AxiosError<unknown>

export function useGetPlatformsPlatformsGet<
  TData = Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
        TError,
        Awaited<ReturnType<typeof getPlatformsPlatformsGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPlatformsPlatformsGet<
  TData = Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
        TError,
        Awaited<ReturnType<typeof getPlatformsPlatformsGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPlatformsPlatformsGet<
  TData = Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Platforms
 */

export function useGetPlatformsPlatformsGet<
  TData = Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetPlatformsPlatformsGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Addons
 */
export const getAddonsAddonAppIdGet = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string[]>> => {
  return axios.get(`/addon/${appId}`, options)
}

export const getGetAddonsAddonAppIdGetQueryKey = (appId: string) => {
  return [`/addon/${appId}`] as const
}

export const getGetAddonsAddonAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetAddonsAddonAppIdGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>
  > = ({ signal }) => getAddonsAddonAppIdGet(appId, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAddonsAddonAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>
>
export type GetAddonsAddonAppIdGetQueryError = AxiosError<HTTPValidationError>

export function useGetAddonsAddonAppIdGet<
  TData = Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAddonsAddonAppIdGet<
  TData = Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAddonsAddonAppIdGet<
  TData = Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Addons
 */

export function useGetAddonsAddonAppIdGet<
  TData = Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetAddonsAddonAppIdGetQueryOptions(appId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Exceptions
 */
export const getExceptionsExceptionsGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/exceptions/`, options)
}

export const getGetExceptionsExceptionsGetQueryKey = () => {
  return [`/exceptions/`] as const
}

export const getGetExceptionsExceptionsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetExceptionsExceptionsGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getExceptionsExceptionsGet>>
  > = ({ signal }) => getExceptionsExceptionsGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExceptionsExceptionsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getExceptionsExceptionsGet>>
>
export type GetExceptionsExceptionsGetQueryError = AxiosError<unknown>

export function useGetExceptionsExceptionsGet<
  TData = Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
        TError,
        Awaited<ReturnType<typeof getExceptionsExceptionsGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetExceptionsExceptionsGet<
  TData = Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
        TError,
        Awaited<ReturnType<typeof getExceptionsExceptionsGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetExceptionsExceptionsGet<
  TData = Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Exceptions
 */

export function useGetExceptionsExceptionsGet<
  TData = Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetExceptionsExceptionsGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Exceptions For App
 */
export const getExceptionsForAppExceptionsAppIdGet = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/exceptions/${appId}`, options)
}

export const getGetExceptionsForAppExceptionsAppIdGetQueryKey = (
  appId: string,
) => {
  return [`/exceptions/${appId}`] as const
}

export const getGetExceptionsForAppExceptionsAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetExceptionsForAppExceptionsAppIdGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>
  > = ({ signal }) =>
    getExceptionsForAppExceptionsAppIdGet(appId, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExceptionsForAppExceptionsAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>
>
export type GetExceptionsForAppExceptionsAppIdGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetExceptionsForAppExceptionsAppIdGet<
  TData = Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetExceptionsForAppExceptionsAppIdGet<
  TData = Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetExceptionsForAppExceptionsAppIdGet<
  TData = Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Exceptions For App
 */

export function useGetExceptionsForAppExceptionsAppIdGet<
  TData = Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetExceptionsForAppExceptionsAppIdGetQueryOptions(
    appId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Add an app to a users favorites. The appid is the ID of the app to add.
 * @summary Add To Favorites
 */
export const addToFavoritesFavoritesAppIdAddPost = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(`/favorites/${appId}/add`, undefined, options)
}

export const getAddToFavoritesFavoritesAppIdAddPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addToFavoritesFavoritesAppIdAddPost>>,
    TError,
    { appId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof addToFavoritesFavoritesAppIdAddPost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationKey = ["addToFavoritesFavoritesAppIdAddPost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addToFavoritesFavoritesAppIdAddPost>>,
    { appId: string }
  > = (props) => {
    const { appId } = props ?? {}

    return addToFavoritesFavoritesAppIdAddPost(appId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AddToFavoritesFavoritesAppIdAddPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addToFavoritesFavoritesAppIdAddPost>>
>

export type AddToFavoritesFavoritesAppIdAddPostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Add To Favorites
 */
export const useAddToFavoritesFavoritesAppIdAddPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addToFavoritesFavoritesAppIdAddPost>>,
    TError,
    { appId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof addToFavoritesFavoritesAppIdAddPost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationOptions =
    getAddToFavoritesFavoritesAppIdAddPostMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Remove an app from a users favorites. The appid is the ID of the app to remove.
 * @summary Remove From Favorites
 */
export const removeFromFavoritesFavoritesAppIdRemoveDelete = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.delete(`/favorites/${appId}/remove`, options)
}

export const getRemoveFromFavoritesFavoritesAppIdRemoveDeleteMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeFromFavoritesFavoritesAppIdRemoveDelete>>,
    TError,
    { appId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeFromFavoritesFavoritesAppIdRemoveDelete>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationKey = ["removeFromFavoritesFavoritesAppIdRemoveDelete"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeFromFavoritesFavoritesAppIdRemoveDelete>>,
    { appId: string }
  > = (props) => {
    const { appId } = props ?? {}

    return removeFromFavoritesFavoritesAppIdRemoveDelete(appId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RemoveFromFavoritesFavoritesAppIdRemoveDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof removeFromFavoritesFavoritesAppIdRemoveDelete>>
  >

export type RemoveFromFavoritesFavoritesAppIdRemoveDeleteMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Remove From Favorites
 */
export const useRemoveFromFavoritesFavoritesAppIdRemoveDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeFromFavoritesFavoritesAppIdRemoveDelete>>,
    TError,
    { appId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof removeFromFavoritesFavoritesAppIdRemoveDelete>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationOptions =
    getRemoveFromFavoritesFavoritesAppIdRemoveDeleteMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Get a list of the users favorite apps.
 * @summary Get Favorites
 */
export const getFavoritesFavoritesGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FavoriteApp[]>> => {
  return axios.get(`/favorites`, options)
}

export const getGetFavoritesFavoritesGetQueryKey = () => {
  return [`/favorites`] as const
}

export const getGetFavoritesFavoritesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetFavoritesFavoritesGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFavoritesFavoritesGet>>
  > = ({ signal }) => getFavoritesFavoritesGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFavoritesFavoritesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFavoritesFavoritesGet>>
>
export type GetFavoritesFavoritesGetQueryError = AxiosError<unknown>

export function useGetFavoritesFavoritesGet<
  TData = Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
        TError,
        Awaited<ReturnType<typeof getFavoritesFavoritesGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetFavoritesFavoritesGet<
  TData = Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
        TError,
        Awaited<ReturnType<typeof getFavoritesFavoritesGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetFavoritesFavoritesGet<
  TData = Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Favorites
 */

export function useGetFavoritesFavoritesGet<
  TData = Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getFavoritesFavoritesGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetFavoritesFavoritesGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Is Favorited
 */
export const isFavoritedFavoritesAppIdGet = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<boolean>> => {
  return axios.get(`/favorites/${appId}`, options)
}

export const getIsFavoritedFavoritesAppIdGetQueryKey = (appId: string) => {
  return [`/favorites/${appId}`] as const
}

export const getIsFavoritedFavoritesAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getIsFavoritedFavoritesAppIdGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>
  > = ({ signal }) =>
    isFavoritedFavoritesAppIdGet(appId, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type IsFavoritedFavoritesAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>
>
export type IsFavoritedFavoritesAppIdGetQueryError =
  AxiosError<HTTPValidationError>

export function useIsFavoritedFavoritesAppIdGet<
  TData = Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useIsFavoritedFavoritesAppIdGet<
  TData = Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useIsFavoritedFavoritesAppIdGet<
  TData = Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Is Favorited
 */

export function useIsFavoritedFavoritesAppIdGet<
  TData = Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof isFavoritedFavoritesAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getIsFavoritedFavoritesAppIdGetQueryOptions(
    appId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
