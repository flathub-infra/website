/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"
import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"
import type {
  GetCategoryCategoryCategoryGetParams,
  GetDeveloperDeveloperDeveloperGetParams,
  GetEolMessageAppidEolMessageAppIdGet200,
  GetEolMessageAppidEolMessageAppIdGetParams,
  GetEolMessageEolMessageGet200,
  GetEolRebaseAppidEolRebaseAppIdGet200,
  GetEolRebaseAppidEolRebaseAppIdGetParams,
  GetEolRebaseEolRebaseGet200,
  GetPlatformsPlatformsGet200,
  GetPopularLastMonthPopularLastMonthGetParams,
  GetRecentlyAddedCollectionRecentlyAddedGetParams,
  GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
  GetRuntimeListRuntimesGet200,
  GetStatsForAppStatsAppIdGetParams,
  GetStatsStatsGet200,
  GetSubcategoryCategoryCategorySubcategoriesSubcategoryGetParams,
  GetSummarySummaryAppIdGetParams,
  GetVerifiedCollectionVerifiedGetParams,
  HTTPValidationError,
  MainCategory,
  SearchQuery,
} from ".././model"

/**
 * @summary Get Categories
 */
export const getCategoriesCategoriesGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string[]>> => {
  return axios.get(`/categories`, options)
}

export const getGetCategoriesCategoriesGetQueryKey = () => {
  return [`/categories`] as const
}

export const getGetCategoriesCategoriesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoriesCategoriesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCategoriesCategoriesGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetCategoriesCategoriesGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCategoriesCategoriesGet>>
  > = ({ signal }) => getCategoriesCategoriesGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoriesCategoriesGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetCategoriesCategoriesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoriesCategoriesGet>>
>
export type GetCategoriesCategoriesGetQueryError = AxiosError<unknown>

/**
 * @summary Get Categories
 */
export const useGetCategoriesCategoriesGet = <
  TData = Awaited<ReturnType<typeof getCategoriesCategoriesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCategoriesCategoriesGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCategoriesCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Category
 */
export const getCategoryCategoryCategoryGet = (
  category: MainCategory,
  params?: GetCategoryCategoryCategoryGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/category/${category}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetCategoryCategoryCategoryGetQueryKey = (
  category: MainCategory,
  params?: GetCategoryCategoryCategoryGetParams,
) => {
  return [`/category/${category}`, ...(params ? [params] : [])] as const
}

export const getGetCategoryCategoryCategoryGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoryCategoryCategoryGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  category: MainCategory,
  params?: GetCategoryCategoryCategoryGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryCategoryCategoryGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetCategoryCategoryCategoryGetQueryKey(category, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCategoryCategoryCategoryGet>>
  > = ({ signal }) =>
    getCategoryCategoryCategoryGet(category, params, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!category,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoryCategoryCategoryGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetCategoryCategoryCategoryGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoryCategoryCategoryGet>>
>
export type GetCategoryCategoryCategoryGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Category
 */
export const useGetCategoryCategoryCategoryGet = <
  TData = Awaited<ReturnType<typeof getCategoryCategoryCategoryGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  category: MainCategory,
  params?: GetCategoryCategoryCategoryGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryCategoryCategoryGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCategoryCategoryCategoryGetQueryOptions(
    category,
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Subcategory
 */
export const getSubcategoryCategoryCategorySubcategoriesSubcategoryGet = (
  category: MainCategory,
  subcategory: string,
  params?: GetSubcategoryCategoryCategorySubcategoriesSubcategoryGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/category/${category}/subcategories/${subcategory}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetSubcategoryCategoryCategorySubcategoriesSubcategoryGetQueryKey =
  (
    category: MainCategory,
    subcategory: string,
    params?: GetSubcategoryCategoryCategorySubcategoriesSubcategoryGetParams,
  ) => {
    return [
      `/category/${category}/subcategories/${subcategory}`,
      ...(params ? [params] : []),
    ] as const
  }

export const getGetSubcategoryCategoryCategorySubcategoriesSubcategoryGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getSubcategoryCategoryCategorySubcategoriesSubcategoryGet
      >
    >,
    TError = AxiosError<HTTPValidationError>,
  >(
    category: MainCategory,
    subcategory: string,
    params?: GetSubcategoryCategoryCategorySubcategoriesSubcategoryGetParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getSubcategoryCategoryCategorySubcategoriesSubcategoryGet
            >
          >,
          TError,
          TData
        >
      >
      axios?: AxiosRequestConfig
    },
  ) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetSubcategoryCategoryCategorySubcategoriesSubcategoryGetQueryKey(
        category,
        subcategory,
        params,
      )

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getSubcategoryCategoryCategorySubcategoriesSubcategoryGet
        >
      >
    > = ({ signal }) =>
      getSubcategoryCategoryCategorySubcategoriesSubcategoryGet(
        category,
        subcategory,
        params,
        { signal, ...axiosOptions },
      )

    return {
      queryKey,
      queryFn,
      enabled: !!(category && subcategory),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getSubcategoryCategoryCategorySubcategoriesSubcategoryGet
        >
      >,
      TError,
      TData
    > & { queryKey: QueryKey }
  }

export type GetSubcategoryCategoryCategorySubcategoriesSubcategoryGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getSubcategoryCategoryCategorySubcategoriesSubcategoryGet
      >
    >
  >
export type GetSubcategoryCategoryCategorySubcategoriesSubcategoryGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Subcategory
 */
export const useGetSubcategoryCategoryCategorySubcategoriesSubcategoryGet = <
  TData = Awaited<
    ReturnType<typeof getSubcategoryCategoryCategorySubcategoriesSubcategoryGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  category: MainCategory,
  subcategory: string,
  params?: GetSubcategoryCategoryCategorySubcategoriesSubcategoryGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getSubcategoryCategoryCategorySubcategoriesSubcategoryGet
          >
        >,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetSubcategoryCategoryCategorySubcategoriesSubcategoryGetQueryOptions(
      category,
      subcategory,
      params,
      options,
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Developers
 */
export const getDevelopersDeveloperGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string[]>> => {
  return axios.get(`/developer`, options)
}

export const getGetDevelopersDeveloperGetQueryKey = () => {
  return [`/developer`] as const
}

export const getGetDevelopersDeveloperGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getDevelopersDeveloperGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDevelopersDeveloperGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDevelopersDeveloperGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDevelopersDeveloperGet>>
  > = ({ signal }) => getDevelopersDeveloperGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDevelopersDeveloperGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDevelopersDeveloperGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDevelopersDeveloperGet>>
>
export type GetDevelopersDeveloperGetQueryError = AxiosError<unknown>

/**
 * @summary Get Developers
 */
export const useGetDevelopersDeveloperGet = <
  TData = Awaited<ReturnType<typeof getDevelopersDeveloperGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDevelopersDeveloperGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDevelopersDeveloperGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Developer
 */
export const getDeveloperDeveloperDeveloperGet = (
  developer: string,
  params?: GetDeveloperDeveloperDeveloperGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/developer/${developer}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetDeveloperDeveloperDeveloperGetQueryKey = (
  developer: string,
  params?: GetDeveloperDeveloperDeveloperGetParams,
) => {
  return [`/developer/${developer}`, ...(params ? [params] : [])] as const
}

export const getGetDeveloperDeveloperDeveloperGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeveloperDeveloperDeveloperGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  developer: string,
  params?: GetDeveloperDeveloperDeveloperGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeveloperDeveloperDeveloperGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDeveloperDeveloperDeveloperGetQueryKey(developer, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeveloperDeveloperDeveloperGet>>
  > = ({ signal }) =>
    getDeveloperDeveloperDeveloperGet(developer, params, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!developer,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeveloperDeveloperDeveloperGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeveloperDeveloperDeveloperGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeveloperDeveloperDeveloperGet>>
>
export type GetDeveloperDeveloperDeveloperGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Developer
 */
export const useGetDeveloperDeveloperDeveloperGet = <
  TData = Awaited<ReturnType<typeof getDeveloperDeveloperDeveloperGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  developer: string,
  params?: GetDeveloperDeveloperDeveloperGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeveloperDeveloperDeveloperGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeveloperDeveloperDeveloperGetQueryOptions(
    developer,
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Eol Rebase
 */
export const getEolRebaseEolRebaseGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetEolRebaseEolRebaseGet200>> => {
  return axios.get(`/eol/rebase`, options)
}

export const getGetEolRebaseEolRebaseGetQueryKey = () => {
  return [`/eol/rebase`] as const
}

export const getGetEolRebaseEolRebaseGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetEolRebaseEolRebaseGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>
  > = ({ signal }) => getEolRebaseEolRebaseGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetEolRebaseEolRebaseGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>
>
export type GetEolRebaseEolRebaseGetQueryError = AxiosError<unknown>

/**
 * @summary Get Eol Rebase
 */
export const useGetEolRebaseEolRebaseGet = <
  TData = Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolRebaseEolRebaseGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEolRebaseEolRebaseGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Eol Rebase Appid
 */
export const getEolRebaseAppidEolRebaseAppIdGet = (
  appId: string,
  params?: GetEolRebaseAppidEolRebaseAppIdGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetEolRebaseAppidEolRebaseAppIdGet200>> => {
  return axios.get(`/eol/rebase/${appId}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetEolRebaseAppidEolRebaseAppIdGetQueryKey = (
  appId: string,
  params?: GetEolRebaseAppidEolRebaseAppIdGetParams,
) => {
  return [`/eol/rebase/${appId}`, ...(params ? [params] : [])] as const
}

export const getGetEolRebaseAppidEolRebaseAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolRebaseAppidEolRebaseAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetEolRebaseAppidEolRebaseAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>
  > = ({ signal }) =>
    getEolRebaseAppidEolRebaseAppIdGet(appId, params, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetEolRebaseAppidEolRebaseAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>
>
export type GetEolRebaseAppidEolRebaseAppIdGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Eol Rebase Appid
 */
export const useGetEolRebaseAppidEolRebaseAppIdGet = <
  TData = Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolRebaseAppidEolRebaseAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolRebaseAppidEolRebaseAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEolRebaseAppidEolRebaseAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Eol Message
 */
export const getEolMessageEolMessageGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetEolMessageEolMessageGet200>> => {
  return axios.get(`/eol/message`, options)
}

export const getGetEolMessageEolMessageGetQueryKey = () => {
  return [`/eol/message`] as const
}

export const getGetEolMessageEolMessageGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetEolMessageEolMessageGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEolMessageEolMessageGet>>
  > = ({ signal }) => getEolMessageEolMessageGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetEolMessageEolMessageGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEolMessageEolMessageGet>>
>
export type GetEolMessageEolMessageGetQueryError = AxiosError<unknown>

/**
 * @summary Get Eol Message
 */
export const useGetEolMessageEolMessageGet = <
  TData = Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEolMessageEolMessageGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEolMessageEolMessageGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Eol Message Appid
 */
export const getEolMessageAppidEolMessageAppIdGet = (
  appId: string,
  params?: GetEolMessageAppidEolMessageAppIdGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetEolMessageAppidEolMessageAppIdGet200>> => {
  return axios.get(`/eol/message/${appId}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetEolMessageAppidEolMessageAppIdGetQueryKey = (
  appId: string,
  params?: GetEolMessageAppidEolMessageAppIdGetParams,
) => {
  return [`/eol/message/${appId}`, ...(params ? [params] : [])] as const
}

export const getGetEolMessageAppidEolMessageAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolMessageAppidEolMessageAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetEolMessageAppidEolMessageAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>
  > = ({ signal }) =>
    getEolMessageAppidEolMessageAppIdGet(appId, params, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetEolMessageAppidEolMessageAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>
>
export type GetEolMessageAppidEolMessageAppIdGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Eol Message Appid
 */
export const useGetEolMessageAppidEolMessageAppIdGet = <
  TData = Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetEolMessageAppidEolMessageAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEolMessageAppidEolMessageAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEolMessageAppidEolMessageAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary List Appstream
 */
export const listAppstreamAppstreamGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string[]>> => {
  return axios.get(`/appstream`, options)
}

export const getListAppstreamAppstreamGetQueryKey = () => {
  return [`/appstream`] as const
}

export const getListAppstreamAppstreamGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListAppstreamAppstreamGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listAppstreamAppstreamGet>>
  > = ({ signal }) => listAppstreamAppstreamGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ListAppstreamAppstreamGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAppstreamAppstreamGet>>
>
export type ListAppstreamAppstreamGetQueryError = AxiosError<unknown>

/**
 * @summary List Appstream
 */
export const useListAppstreamAppstreamGet = <
  TData = Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof listAppstreamAppstreamGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListAppstreamAppstreamGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Appstream
 */
export const getAppstreamAppstreamAppIdGet = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/appstream/${appId}`, options)
}

export const getGetAppstreamAppstreamAppIdGetQueryKey = (appId: string) => {
  return [`/appstream/${appId}`] as const
}

export const getGetAppstreamAppstreamAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetAppstreamAppstreamAppIdGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>
  > = ({ signal }) =>
    getAppstreamAppstreamAppIdGet(appId, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetAppstreamAppstreamAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>
>
export type GetAppstreamAppstreamAppIdGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Appstream
 */
export const useGetAppstreamAppstreamAppIdGet = <
  TData = Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppstreamAppstreamAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAppstreamAppstreamAppIdGetQueryOptions(
    appId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Post Search
 */
export const postSearchSearchPost = (
  searchQuery: SearchQuery,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(`/search`, searchQuery, options)
}

export const getPostSearchSearchPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSearchSearchPost>>,
    TError,
    { data: SearchQuery },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSearchSearchPost>>,
  TError,
  { data: SearchQuery },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSearchSearchPost>>,
    { data: SearchQuery }
  > = (props) => {
    const { data } = props ?? {}

    return postSearchSearchPost(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostSearchSearchPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSearchSearchPost>>
>
export type PostSearchSearchPostMutationBody = SearchQuery
export type PostSearchSearchPostMutationError = AxiosError<HTTPValidationError>

/**
 * @summary Post Search
 */
export const usePostSearchSearchPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSearchSearchPost>>,
    TError,
    { data: SearchQuery },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof postSearchSearchPost>>,
  TError,
  { data: SearchQuery },
  TContext
> => {
  const mutationOptions = getPostSearchSearchPostMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Get Runtime List
 */
export const getRuntimeListRuntimesGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetRuntimeListRuntimesGet200>> => {
  return axios.get(`/runtimes`, options)
}

export const getGetRuntimeListRuntimesGetQueryKey = () => {
  return [`/runtimes`] as const
}

export const getGetRuntimeListRuntimesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRuntimeListRuntimesGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>
  > = ({ signal }) => getRuntimeListRuntimesGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRuntimeListRuntimesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>
>
export type GetRuntimeListRuntimesGetQueryError = AxiosError<unknown>

/**
 * @summary Get Runtime List
 */
export const useGetRuntimeListRuntimesGet = <
  TData = Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRuntimeListRuntimesGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRuntimeListRuntimesGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Recently Updated
 */
export const getRecentlyUpdatedCollectionRecentlyUpdatedGet = (
  params?: GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/collection/recently-updated`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryKey = (
  params?: GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
) => {
  return [`/collection/recently-updated`, ...(params ? [params] : [])] as const
}

export const getGetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
        >,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>>
  > = ({ signal }) =>
    getRecentlyUpdatedCollectionRecentlyUpdatedGet(params, {
      signal,
      ...axiosOptions,
    })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>>
  >
export type GetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Recently Updated
 */
export const useGetRecentlyUpdatedCollectionRecentlyUpdatedGet = <
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
        >,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryOptions(
      params,
      options,
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Recently Added
 */
export const getRecentlyAddedCollectionRecentlyAddedGet = (
  params?: GetRecentlyAddedCollectionRecentlyAddedGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/collection/recently-added`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetRecentlyAddedCollectionRecentlyAddedGetQueryKey = (
  params?: GetRecentlyAddedCollectionRecentlyAddedGetParams,
) => {
  return [`/collection/recently-added`, ...(params ? [params] : [])] as const
}

export const getGetRecentlyAddedCollectionRecentlyAddedGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyAddedCollectionRecentlyAddedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRecentlyAddedCollectionRecentlyAddedGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>
  > = ({ signal }) =>
    getRecentlyAddedCollectionRecentlyAddedGet(params, {
      signal,
      ...axiosOptions,
    })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRecentlyAddedCollectionRecentlyAddedGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>
>
export type GetRecentlyAddedCollectionRecentlyAddedGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Recently Added
 */
export const useGetRecentlyAddedCollectionRecentlyAddedGet = <
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyAddedCollectionRecentlyAddedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetRecentlyAddedCollectionRecentlyAddedGetQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Verified
 */
export const getVerifiedCollectionVerifiedGet = (
  params?: GetVerifiedCollectionVerifiedGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/collection/verified`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetVerifiedCollectionVerifiedGetQueryKey = (
  params?: GetVerifiedCollectionVerifiedGetParams,
) => {
  return [`/collection/verified`, ...(params ? [params] : [])] as const
}

export const getGetVerifiedCollectionVerifiedGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetVerifiedCollectionVerifiedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetVerifiedCollectionVerifiedGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>
  > = ({ signal }) =>
    getVerifiedCollectionVerifiedGet(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetVerifiedCollectionVerifiedGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>
>
export type GetVerifiedCollectionVerifiedGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Verified
 */
export const useGetVerifiedCollectionVerifiedGet = <
  TData = Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetVerifiedCollectionVerifiedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetVerifiedCollectionVerifiedGetQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Popular Last Month
 */
export const getPopularLastMonthPopularLastMonthGet = (
  params?: GetPopularLastMonthPopularLastMonthGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/popular/last-month`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetPopularLastMonthPopularLastMonthGetQueryKey = (
  params?: GetPopularLastMonthPopularLastMonthGetParams,
) => {
  return [`/popular/last-month`, ...(params ? [params] : [])] as const
}

export const getGetPopularLastMonthPopularLastMonthGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPopularLastMonthPopularLastMonthGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetPopularLastMonthPopularLastMonthGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPopularLastMonthPopularLastMonthGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetPopularLastMonthPopularLastMonthGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPopularLastMonthPopularLastMonthGet>>
  > = ({ signal }) =>
    getPopularLastMonthPopularLastMonthGet(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPopularLastMonthPopularLastMonthGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPopularLastMonthPopularLastMonthGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPopularLastMonthPopularLastMonthGet>>
>
export type GetPopularLastMonthPopularLastMonthGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Popular Last Month
 */
export const useGetPopularLastMonthPopularLastMonthGet = <
  TData = Awaited<ReturnType<typeof getPopularLastMonthPopularLastMonthGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetPopularLastMonthPopularLastMonthGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPopularLastMonthPopularLastMonthGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPopularLastMonthPopularLastMonthGetQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Stats
 */
export const getStatsStatsGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetStatsStatsGet200>> => {
  return axios.get(`/stats`, options)
}

export const getGetStatsStatsGetQueryKey = () => {
  return [`/stats`] as const
}

export const getGetStatsStatsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getStatsStatsGet>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetStatsStatsGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getStatsStatsGet>>
  > = ({ signal }) => getStatsStatsGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStatsStatsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetStatsStatsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStatsStatsGet>>
>
export type GetStatsStatsGetQueryError = AxiosError<unknown>

/**
 * @summary Get Stats
 */
export const useGetStatsStatsGet = <
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getStatsStatsGet>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStatsStatsGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Stats For App
 */
export const getStatsForAppStatsAppIdGet = (
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/stats/${appId}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetStatsForAppStatsAppIdGetQueryKey = (
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
) => {
  return [`/stats/${appId}`, ...(params ? [params] : [])] as const
}

export const getGetStatsForAppStatsAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetStatsForAppStatsAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>
  > = ({ signal }) =>
    getStatsForAppStatsAppIdGet(appId, params, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetStatsForAppStatsAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>
>
export type GetStatsForAppStatsAppIdGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Stats For App
 */
export const useGetStatsForAppStatsAppIdGet = <
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStatsForAppStatsAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Summary
 */
export const getSummarySummaryAppIdGet = (
  appId: string,
  params?: GetSummarySummaryAppIdGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/summary/${appId}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetSummarySummaryAppIdGetQueryKey = (
  appId: string,
  params?: GetSummarySummaryAppIdGetParams,
) => {
  return [`/summary/${appId}`, ...(params ? [params] : [])] as const
}

export const getGetSummarySummaryAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetSummarySummaryAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetSummarySummaryAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>
  > = ({ signal }) =>
    getSummarySummaryAppIdGet(appId, params, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSummarySummaryAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>
>
export type GetSummarySummaryAppIdGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Summary
 */
export const useGetSummarySummaryAppIdGet = <
  TData = Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetSummarySummaryAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSummarySummaryAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSummarySummaryAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Return a mapping from org-name to platform aliases and dependencies which are
recognised by the backend.  These are used by things such as the transactions
and donations APIs to address amounts to the platforms.
 * @summary Get Platforms
 */
export const getPlatformsPlatformsGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetPlatformsPlatformsGet200>> => {
  return axios.get(`/platforms`, options)
}

export const getGetPlatformsPlatformsGetQueryKey = () => {
  return [`/platforms`] as const
}

export const getGetPlatformsPlatformsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPlatformsPlatformsGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPlatformsPlatformsGet>>
  > = ({ signal }) => getPlatformsPlatformsGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPlatformsPlatformsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPlatformsPlatformsGet>>
>
export type GetPlatformsPlatformsGetQueryError = AxiosError<unknown>

/**
 * @summary Get Platforms
 */
export const useGetPlatformsPlatformsGet = <
  TData = Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPlatformsPlatformsGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPlatformsPlatformsGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Exceptions
 */
export const getExceptionsExceptionsGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/exceptions`, options)
}

export const getGetExceptionsExceptionsGetQueryKey = () => {
  return [`/exceptions`] as const
}

export const getGetExceptionsExceptionsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetExceptionsExceptionsGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getExceptionsExceptionsGet>>
  > = ({ signal }) => getExceptionsExceptionsGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetExceptionsExceptionsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getExceptionsExceptionsGet>>
>
export type GetExceptionsExceptionsGetQueryError = AxiosError<unknown>

/**
 * @summary Get Exceptions
 */
export const useGetExceptionsExceptionsGet = <
  TData = Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getExceptionsExceptionsGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetExceptionsExceptionsGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Exceptions For App
 */
export const getExceptionsForAppExceptionsAppIdGet = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/exceptions/${appId}`, options)
}

export const getGetExceptionsForAppExceptionsAppIdGetQueryKey = (
  appId: string,
) => {
  return [`/exceptions/${appId}`] as const
}

export const getGetExceptionsForAppExceptionsAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetExceptionsForAppExceptionsAppIdGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>
  > = ({ signal }) =>
    getExceptionsForAppExceptionsAppIdGet(appId, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetExceptionsForAppExceptionsAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>
>
export type GetExceptionsForAppExceptionsAppIdGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Get Exceptions For App
 */
export const useGetExceptionsForAppExceptionsAppIdGet = <
  TData = Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getExceptionsForAppExceptionsAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetExceptionsForAppExceptionsAppIdGetQueryOptions(
    appId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Addons
 */
export const getAddonsAddonAppIdGet = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string[]>> => {
  return axios.get(`/addon/${appId}`, options)
}

export const getGetAddonsAddonAppIdGetQueryKey = (appId: string) => {
  return [`/addon/${appId}`] as const
}

export const getGetAddonsAddonAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetAddonsAddonAppIdGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>
  > = ({ signal }) => getAddonsAddonAppIdGet(appId, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetAddonsAddonAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>
>
export type GetAddonsAddonAppIdGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Addons
 */
export const useGetAddonsAddonAppIdGet = <
  TData = Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAddonsAddonAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAddonsAddonAppIdGetQueryOptions(appId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
