/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import { MainCategory, VerificationMethod } from ".././model"
import type {
  GetDevelopersCollectionDeveloperGet200,
  MeilisearchResponseAppsIndex,
} from ".././model"

export const getGetCategoriesCollectionCategoryGetResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  )

export const getGetDevelopersCollectionDeveloperGetResponseMock =
  (): GetDevelopersCollectionDeveloperGet200 => ({})

export const getGetRecentlyUpdatedCollectionRecentlyUpdatedGetResponseMock = (
  overrideResponse: Partial<MeilisearchResponseAppsIndex> = {},
): MeilisearchResponseAppsIndex => ({
  hits: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha(20),
    name: faker.string.alpha(20),
    summary: faker.string.alpha(20),
    installs_last_month: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    trending: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    keywords: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha(20)),
      null,
    ]),
    app_id: faker.string.alpha(20),
    description: faker.string.alpha(20),
    icon: faker.string.alpha(20),
    categories: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha(20)),
        null,
      ]),
      undefined,
    ]),
    main_categories: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(MainCategory)),
      faker.helpers.arrayElements(Object.values(MainCategory)),
    ]),
    sub_categories: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha(20)),
        null,
      ]),
      undefined,
    ]),
    developer_name: faker.helpers.arrayElement([faker.string.alpha(20), null]),
    verification_verified: faker.datatype.boolean(),
    verification_method: faker.helpers.arrayElement(
      Object.values(VerificationMethod),
    ),
    verification_login_name: faker.helpers.arrayElement([
      faker.string.alpha(20),
      null,
    ]),
    verification_login_provider: faker.helpers.arrayElement([
      faker.string.alpha(20),
      null,
    ]),
    verification_website: faker.helpers.arrayElement([
      faker.string.alpha(20),
      null,
    ]),
    verification_timestamp: faker.helpers.arrayElement([
      faker.string.alpha(20),
      null,
    ]),
    verification_login_is_organization: faker.helpers.arrayElement([
      faker.string.alpha(20),
      null,
    ]),
  })),
  query: faker.string.alpha(20),
  processingTimeMs: faker.number.int({ min: undefined, max: undefined }),
  hitsPerPage: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  totalPages: faker.number.int({ min: undefined, max: undefined }),
  totalHits: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
})

export const getGetCategoriesCollectionCategoryGetMockHandler = (
  overrideResponse?:
    | string[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string[]> | string[]),
) => {
  return http.get("*/collection/category", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCategoriesCollectionCategoryGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetCategoryCollectionCategoryCategoryGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/category/:category", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetSubcategoryCollectionCategoryCategorySubcategoriesGetMockHandler =
  (
    overrideResponse?:
      | unknown
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => Promise<unknown> | unknown),
  ) => {
    return http.get(
      "*/collection/category/:category/subcategories",
      async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
          await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 200 })
      },
    )
  }

export const getGetKeywordCollectionKeywordGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/keyword", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetDevelopersCollectionDeveloperGetMockHandler = (
  overrideResponse?:
    | GetDevelopersCollectionDeveloperGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetDevelopersCollectionDeveloperGet200>
        | GetDevelopersCollectionDeveloperGet200),
) => {
  return http.get("*/collection/developer", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDevelopersCollectionDeveloperGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetDeveloperCollectionDeveloperDeveloperGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/developer/:developer", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetRecentlyUpdatedCollectionRecentlyUpdatedGetMockHandler = (
  overrideResponse?:
    | MeilisearchResponseAppsIndex
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<MeilisearchResponseAppsIndex>
        | MeilisearchResponseAppsIndex),
) => {
  return http.get("*/collection/recently-updated", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetRecentlyUpdatedCollectionRecentlyUpdatedGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetRecentlyAddedCollectionRecentlyAddedGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/recently-added", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetVerifiedCollectionVerifiedGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/verified", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetMobileCollectionMobileGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/mobile", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetPopularLastMonthCollectionPopularGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/popular", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetTrendingLastTwoWeeksCollectionTrendingGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/trending", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getCollectionMock = () => [
  getGetCategoriesCollectionCategoryGetMockHandler(),
  getGetCategoryCollectionCategoryCategoryGetMockHandler(),
  getGetSubcategoryCollectionCategoryCategorySubcategoriesGetMockHandler(),
  getGetKeywordCollectionKeywordGetMockHandler(),
  getGetDevelopersCollectionDeveloperGetMockHandler(),
  getGetDeveloperCollectionDeveloperDeveloperGetMockHandler(),
  getGetRecentlyUpdatedCollectionRecentlyUpdatedGetMockHandler(),
  getGetRecentlyAddedCollectionRecentlyAddedGetMockHandler(),
  getGetVerifiedCollectionVerifiedGetMockHandler(),
  getGetMobileCollectionMobileGetMockHandler(),
  getGetPopularLastMonthCollectionPopularGetMockHandler(),
  getGetTrendingLastTwoWeeksCollectionTrendingGetMockHandler(),
]
