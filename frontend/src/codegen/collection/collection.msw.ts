/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { HttpResponse, delay, http } from "msw"
import type { GetDevelopersCollectionDeveloperGet200 } from ".././model"

export const getGetDevelopersCollectionDeveloperGetResponseMock =
  (): GetDevelopersCollectionDeveloperGet200 => ({})

export const getGetDevelopersCollectionDeveloperGetMockHandler = (
  overrideResponse?:
    | GetDevelopersCollectionDeveloperGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetDevelopersCollectionDeveloperGet200>
        | GetDevelopersCollectionDeveloperGet200),
) => {
  return http.get("*/collection/developer", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDevelopersCollectionDeveloperGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetDeveloperCollectionDeveloperDeveloperGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/developer/:developer", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetRecentlyUpdatedCollectionRecentlyUpdatedGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/recently-updated", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetRecentlyAddedCollectionRecentlyAddedGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/recently-added", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetVerifiedCollectionVerifiedGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/verified", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetMobileCollectionMobileGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/collection/mobile", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getCollectionMock = () => [
  getGetDevelopersCollectionDeveloperGetMockHandler(),
  getGetDeveloperCollectionDeveloperDeveloperGetMockHandler(),
  getGetRecentlyUpdatedCollectionRecentlyUpdatedGetMockHandler(),
  getGetRecentlyAddedCollectionRecentlyAddedGetMockHandler(),
  getGetVerifiedCollectionVerifiedGetMockHandler(),
  getGetMobileCollectionMobileGetMockHandler(),
]
