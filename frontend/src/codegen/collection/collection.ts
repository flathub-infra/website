/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"
import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"
import type {
  GetDeveloperCollectionDeveloperDeveloperGetParams,
  GetDevelopersCollectionDeveloperGet200,
  GetDevelopersCollectionDeveloperGetParams,
  GetMobileCollectionMobileGetParams,
  GetRecentlyAddedCollectionRecentlyAddedGetParams,
  GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
  GetVerifiedCollectionVerifiedGetParams,
  HTTPValidationError,
} from ".././model"

/**
 * @summary Get Developers
 */
export const getDevelopersCollectionDeveloperGet = (
  params?: GetDevelopersCollectionDeveloperGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetDevelopersCollectionDeveloperGet200>> => {
  return axios.get(`/collection/developer`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetDevelopersCollectionDeveloperGetQueryKey = (
  params?: GetDevelopersCollectionDeveloperGetParams,
) => {
  return [`/collection/developer`, ...(params ? [params] : [])] as const
}

export const getGetDevelopersCollectionDeveloperGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetDevelopersCollectionDeveloperGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDevelopersCollectionDeveloperGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>
  > = ({ signal }) =>
    getDevelopersCollectionDeveloperGet(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDevelopersCollectionDeveloperGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>
>
export type GetDevelopersCollectionDeveloperGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetDevelopersCollectionDeveloperGet<
  TData = Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: undefined | GetDevelopersCollectionDeveloperGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
          TError,
          Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetDevelopersCollectionDeveloperGet<
  TData = Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetDevelopersCollectionDeveloperGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
          TError,
          Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetDevelopersCollectionDeveloperGet<
  TData = Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetDevelopersCollectionDeveloperGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Developers
 */

export function useGetDevelopersCollectionDeveloperGet<
  TData = Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetDevelopersCollectionDeveloperGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDevelopersCollectionDeveloperGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetDevelopersCollectionDeveloperGetQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Developer
 */
export const getDeveloperCollectionDeveloperDeveloperGet = (
  developer: string,
  params?: GetDeveloperCollectionDeveloperDeveloperGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/collection/developer/${developer}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetDeveloperCollectionDeveloperDeveloperGetQueryKey = (
  developer: string,
  params?: GetDeveloperCollectionDeveloperDeveloperGetParams,
) => {
  return [
    `/collection/developer/${developer}`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDeveloperCollectionDeveloperDeveloperGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  developer: string,
  params?: GetDeveloperCollectionDeveloperDeveloperGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDeveloperCollectionDeveloperDeveloperGetQueryKey(developer, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>>
  > = ({ signal }) =>
    getDeveloperCollectionDeveloperDeveloperGet(developer, params, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!developer,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDeveloperCollectionDeveloperDeveloperGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>>
  >
export type GetDeveloperCollectionDeveloperDeveloperGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetDeveloperCollectionDeveloperDeveloperGet<
  TData = Awaited<
    ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  developer: string,
  params: undefined | GetDeveloperCollectionDeveloperDeveloperGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>
          >
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetDeveloperCollectionDeveloperDeveloperGet<
  TData = Awaited<
    ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  developer: string,
  params?: GetDeveloperCollectionDeveloperDeveloperGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>
          >
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetDeveloperCollectionDeveloperDeveloperGet<
  TData = Awaited<
    ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  developer: string,
  params?: GetDeveloperCollectionDeveloperDeveloperGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Developer
 */

export function useGetDeveloperCollectionDeveloperDeveloperGet<
  TData = Awaited<
    ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  developer: string,
  params?: GetDeveloperCollectionDeveloperDeveloperGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeveloperCollectionDeveloperDeveloperGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetDeveloperCollectionDeveloperDeveloperGetQueryOptions(
      developer,
      params,
      options,
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Recently Updated
 */
export const getRecentlyUpdatedCollectionRecentlyUpdatedGet = (
  params?: GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/collection/recently-updated`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryKey = (
  params?: GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
) => {
  return [`/collection/recently-updated`, ...(params ? [params] : [])] as const
}

export const getGetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
        >,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>>
  > = ({ signal }) =>
    getRecentlyUpdatedCollectionRecentlyUpdatedGet(params, {
      signal,
      ...axiosOptions,
    })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>>
  >
export type GetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetRecentlyUpdatedCollectionRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params: undefined | GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
          >
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyUpdatedCollectionRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
          >
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyUpdatedCollectionRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
        >,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Recently Updated
 */

export function useGetRecentlyUpdatedCollectionRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyUpdatedCollectionRecentlyUpdatedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyUpdatedCollectionRecentlyUpdatedGet>
        >,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetRecentlyUpdatedCollectionRecentlyUpdatedGetQueryOptions(
      params,
      options,
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Recently Added
 */
export const getRecentlyAddedCollectionRecentlyAddedGet = (
  params?: GetRecentlyAddedCollectionRecentlyAddedGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/collection/recently-added`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetRecentlyAddedCollectionRecentlyAddedGetQueryKey = (
  params?: GetRecentlyAddedCollectionRecentlyAddedGetParams,
) => {
  return [`/collection/recently-added`, ...(params ? [params] : [])] as const
}

export const getGetRecentlyAddedCollectionRecentlyAddedGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyAddedCollectionRecentlyAddedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRecentlyAddedCollectionRecentlyAddedGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>
  > = ({ signal }) =>
    getRecentlyAddedCollectionRecentlyAddedGet(params, {
      signal,
      ...axiosOptions,
    })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRecentlyAddedCollectionRecentlyAddedGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>
>
export type GetRecentlyAddedCollectionRecentlyAddedGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetRecentlyAddedCollectionRecentlyAddedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params: undefined | GetRecentlyAddedCollectionRecentlyAddedGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>
          >,
          TError,
          Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyAddedCollectionRecentlyAddedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyAddedCollectionRecentlyAddedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>
          >,
          TError,
          Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyAddedCollectionRecentlyAddedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyAddedCollectionRecentlyAddedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Recently Added
 */

export function useGetRecentlyAddedCollectionRecentlyAddedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetRecentlyAddedCollectionRecentlyAddedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentlyAddedCollectionRecentlyAddedGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetRecentlyAddedCollectionRecentlyAddedGetQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Verified
 */
export const getVerifiedCollectionVerifiedGet = (
  params?: GetVerifiedCollectionVerifiedGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/collection/verified`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetVerifiedCollectionVerifiedGetQueryKey = (
  params?: GetVerifiedCollectionVerifiedGetParams,
) => {
  return [`/collection/verified`, ...(params ? [params] : [])] as const
}

export const getGetVerifiedCollectionVerifiedGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetVerifiedCollectionVerifiedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetVerifiedCollectionVerifiedGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>
  > = ({ signal }) =>
    getVerifiedCollectionVerifiedGet(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVerifiedCollectionVerifiedGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>
>
export type GetVerifiedCollectionVerifiedGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetVerifiedCollectionVerifiedGet<
  TData = Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: undefined | GetVerifiedCollectionVerifiedGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
          TError,
          Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetVerifiedCollectionVerifiedGet<
  TData = Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetVerifiedCollectionVerifiedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
          TError,
          Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetVerifiedCollectionVerifiedGet<
  TData = Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetVerifiedCollectionVerifiedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Verified
 */

export function useGetVerifiedCollectionVerifiedGet<
  TData = Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetVerifiedCollectionVerifiedGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCollectionVerifiedGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetVerifiedCollectionVerifiedGetQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Mobile
 */
export const getMobileCollectionMobileGet = (
  params?: GetMobileCollectionMobileGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/collection/mobile`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetMobileCollectionMobileGetQueryKey = (
  params?: GetMobileCollectionMobileGetParams,
) => {
  return [`/collection/mobile`, ...(params ? [params] : [])] as const
}

export const getGetMobileCollectionMobileGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetMobileCollectionMobileGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMobileCollectionMobileGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMobileCollectionMobileGet>>
  > = ({ signal }) =>
    getMobileCollectionMobileGet(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMobileCollectionMobileGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMobileCollectionMobileGet>>
>
export type GetMobileCollectionMobileGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetMobileCollectionMobileGet<
  TData = Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: undefined | GetMobileCollectionMobileGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
          TError,
          Awaited<ReturnType<typeof getMobileCollectionMobileGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetMobileCollectionMobileGet<
  TData = Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetMobileCollectionMobileGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
          TError,
          Awaited<ReturnType<typeof getMobileCollectionMobileGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetMobileCollectionMobileGet<
  TData = Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetMobileCollectionMobileGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Mobile
 */

export function useGetMobileCollectionMobileGet<
  TData = Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: GetMobileCollectionMobileGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMobileCollectionMobileGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetMobileCollectionMobileGetQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
