/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"

import { HttpResponse, delay, http } from "msw"
import type { RequestHandlerOptions } from "msw"

import type { AppOfTheDay, AppsOfTheWeek } from ".././model"

export const getGetAppOfTheDayAppPicksAppOfTheDayDateGetResponseMock = (
  overrideResponse: Partial<AppOfTheDay> = {},
): AppOfTheDay => ({
  app_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  day: faker.date.past().toISOString().split("T")[0],
  ...overrideResponse,
})

export const getGetAppOfTheWeekAppPicksAppsOfTheWeekDateGetResponseMock = (
  overrideResponse: Partial<AppsOfTheWeek> = {},
): AppsOfTheWeek => ({
  apps: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    app_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    position: faker.number.int({ min: undefined, max: undefined }),
    isFullscreen: faker.datatype.boolean(),
  })),
  ...overrideResponse,
})

export const getGetAppOfTheDayAppPicksAppOfTheDayDateGetMockHandler = (
  overrideResponse?:
    | AppOfTheDay
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<AppOfTheDay> | AppOfTheDay),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/app-picks/app-of-the-day/:date",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetAppOfTheDayAppPicksAppOfTheDayDateGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetAppOfTheWeekAppPicksAppsOfTheWeekDateGetMockHandler = (
  overrideResponse?:
    | AppsOfTheWeek
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<AppsOfTheWeek> | AppsOfTheWeek),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/app-picks/apps-of-the-week/:date",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetAppOfTheWeekAppPicksAppsOfTheWeekDateGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getSetAppOfTheWeekAppPicksAppOfTheWeekPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/app-picks/app-of-the-week",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getSetAppOfTheDayAppPicksAppOfTheDayPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/app-picks/app-of-the-day",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}
export const getAppPicksMock = () => [
  getGetAppOfTheDayAppPicksAppOfTheDayDateGetMockHandler(),
  getGetAppOfTheWeekAppPicksAppsOfTheWeekDateGetMockHandler(),
  getSetAppOfTheWeekAppPicksAppOfTheWeekPostMockHandler(),
  getSetAppOfTheDayAppPicksAppOfTheDayPostMockHandler(),
]
