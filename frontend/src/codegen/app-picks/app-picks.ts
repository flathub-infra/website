/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

import type { AppOfTheDay, AppsOfTheWeek, UpsertAppOfTheWeek } from ".././model"

/**
 * @summary Get App Of The Day
 */
export const getAppOfTheDayAppPicksAppOfTheDayDateGet = (
  date: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AppOfTheDay>> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/app-picks/app-of-the-day/${date}`,
    options,
  )
}

export const getGetAppOfTheDayAppPicksAppOfTheDayDateGetQueryKey = (
  date?: string,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/app-picks/app-of-the-day/${date}`,
  ] as const
}

export const getGetAppOfTheDayAppPicksAppOfTheDayDateGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
  TError = AxiosError<null | null | null>,
>(
  date: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetAppOfTheDayAppPicksAppOfTheDayDateGetQueryKey(date)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>
  > = ({ signal }) =>
    getAppOfTheDayAppPicksAppOfTheDayDateGet(date, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!date,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAppOfTheDayAppPicksAppOfTheDayDateGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>
>
export type GetAppOfTheDayAppPicksAppOfTheDayDateGetQueryError = AxiosError<
  null | null | null
>

export function useGetAppOfTheDayAppPicksAppOfTheDayDateGet<
  TData = Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
  TError = AxiosError<null | null | null>,
>(
  date: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
          TError,
          Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppOfTheDayAppPicksAppOfTheDayDateGet<
  TData = Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
  TError = AxiosError<null | null | null>,
>(
  date: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
          TError,
          Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppOfTheDayAppPicksAppOfTheDayDateGet<
  TData = Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
  TError = AxiosError<null | null | null>,
>(
  date: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get App Of The Day
 */

export function useGetAppOfTheDayAppPicksAppOfTheDayDateGet<
  TData = Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
  TError = AxiosError<null | null | null>,
>(
  date: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppOfTheDayAppPicksAppOfTheDayDateGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetAppOfTheDayAppPicksAppOfTheDayDateGetQueryOptions(
    date,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Returns apps of the week
 * @summary Get App Of The Week
 */
export const getAppOfTheWeekAppPicksAppsOfTheWeekDateGet = (
  date: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AppsOfTheWeek>> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/app-picks/apps-of-the-week/${date}`,
    options,
  )
}

export const getGetAppOfTheWeekAppPicksAppsOfTheWeekDateGetQueryKey = (
  date?: string,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/app-picks/apps-of-the-week/${date}`,
  ] as const
}

export const getGetAppOfTheWeekAppPicksAppsOfTheWeekDateGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>
  >,
  TError = AxiosError<null | null | null>,
>(
  date: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetAppOfTheWeekAppPicksAppsOfTheWeekDateGetQueryKey(date)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>>
  > = ({ signal }) =>
    getAppOfTheWeekAppPicksAppsOfTheWeekDateGet(date, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!date,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAppOfTheWeekAppPicksAppsOfTheWeekDateGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>>
  >
export type GetAppOfTheWeekAppPicksAppsOfTheWeekDateGetQueryError = AxiosError<
  null | null | null
>

export function useGetAppOfTheWeekAppPicksAppsOfTheWeekDateGet<
  TData = Awaited<
    ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>
  >,
  TError = AxiosError<null | null | null>,
>(
  date: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>
          >
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppOfTheWeekAppPicksAppsOfTheWeekDateGet<
  TData = Awaited<
    ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>
  >,
  TError = AxiosError<null | null | null>,
>(
  date: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>
          >
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppOfTheWeekAppPicksAppsOfTheWeekDateGet<
  TData = Awaited<
    ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>
  >,
  TError = AxiosError<null | null | null>,
>(
  date: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get App Of The Week
 */

export function useGetAppOfTheWeekAppPicksAppsOfTheWeekDateGet<
  TData = Awaited<
    ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>
  >,
  TError = AxiosError<null | null | null>,
>(
  date: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppOfTheWeekAppPicksAppsOfTheWeekDateGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetAppOfTheWeekAppPicksAppsOfTheWeekDateGetQueryOptions(date, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Sets an app of the week
 * @summary Set App Of The Week
 */
export const setAppOfTheWeekAppPicksAppOfTheWeekPost = (
  upsertAppOfTheWeek: UpsertAppOfTheWeek,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/app-picks/app-of-the-week`,
    upsertAppOfTheWeek,
    options,
  )
}

export const getSetAppOfTheWeekAppPicksAppOfTheWeekPostMutationOptions = <
  TError = AxiosError<null | null | null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setAppOfTheWeekAppPicksAppOfTheWeekPost>>,
    TError,
    { data: UpsertAppOfTheWeek },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof setAppOfTheWeekAppPicksAppOfTheWeekPost>>,
  TError,
  { data: UpsertAppOfTheWeek },
  TContext
> => {
  const mutationKey = ["setAppOfTheWeekAppPicksAppOfTheWeekPost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setAppOfTheWeekAppPicksAppOfTheWeekPost>>,
    { data: UpsertAppOfTheWeek }
  > = (props) => {
    const { data } = props ?? {}

    return setAppOfTheWeekAppPicksAppOfTheWeekPost(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SetAppOfTheWeekAppPicksAppOfTheWeekPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof setAppOfTheWeekAppPicksAppOfTheWeekPost>>
>
export type SetAppOfTheWeekAppPicksAppOfTheWeekPostMutationBody =
  UpsertAppOfTheWeek
export type SetAppOfTheWeekAppPicksAppOfTheWeekPostMutationError = AxiosError<
  null | null | null | null
>

/**
 * @summary Set App Of The Week
 */
export const useSetAppOfTheWeekAppPicksAppOfTheWeekPost = <
  TError = AxiosError<null | null | null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof setAppOfTheWeekAppPicksAppOfTheWeekPost>>,
      TError,
      { data: UpsertAppOfTheWeek },
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof setAppOfTheWeekAppPicksAppOfTheWeekPost>>,
  TError,
  { data: UpsertAppOfTheWeek },
  TContext
> => {
  const mutationOptions =
    getSetAppOfTheWeekAppPicksAppOfTheWeekPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Sets an app of the day
 * @summary Set App Of The Day
 */
export const setAppOfTheDayAppPicksAppOfTheDayPost = (
  appOfTheDay: AppOfTheDay,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/app-picks/app-of-the-day`,
    appOfTheDay,
    options,
  )
}

export const getSetAppOfTheDayAppPicksAppOfTheDayPostMutationOptions = <
  TError = AxiosError<null | null | null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setAppOfTheDayAppPicksAppOfTheDayPost>>,
    TError,
    { data: AppOfTheDay },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof setAppOfTheDayAppPicksAppOfTheDayPost>>,
  TError,
  { data: AppOfTheDay },
  TContext
> => {
  const mutationKey = ["setAppOfTheDayAppPicksAppOfTheDayPost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setAppOfTheDayAppPicksAppOfTheDayPost>>,
    { data: AppOfTheDay }
  > = (props) => {
    const { data } = props ?? {}

    return setAppOfTheDayAppPicksAppOfTheDayPost(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SetAppOfTheDayAppPicksAppOfTheDayPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof setAppOfTheDayAppPicksAppOfTheDayPost>>
>
export type SetAppOfTheDayAppPicksAppOfTheDayPostMutationBody = AppOfTheDay
export type SetAppOfTheDayAppPicksAppOfTheDayPostMutationError = AxiosError<
  null | null | null | null
>

/**
 * @summary Set App Of The Day
 */
export const useSetAppOfTheDayAppPicksAppOfTheDayPost = <
  TError = AxiosError<null | null | null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof setAppOfTheDayAppPicksAppOfTheDayPost>>,
      TError,
      { data: AppOfTheDay },
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof setAppOfTheDayAppPicksAppOfTheDayPost>>,
  TError,
  { data: AppOfTheDay },
  TContext
> => {
  const mutationOptions =
    getSetAppOfTheDayAppPicksAppOfTheDayPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
