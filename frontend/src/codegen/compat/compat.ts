/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type { GetSearchCompatAppsSearchQueryGetParams } from ".././model"

/**
 * @summary Get Recently Updated
 */
export type getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetResponse200 =
  {
    data: unknown
    status: 200
  }

export type getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetResponse500 =
  {
    data: null
    status: 500
  }

export type getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetResponseComposite =

    | getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetResponse200
    | getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetResponse500

export type getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetResponse =
  getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetResponseComposite & {
    headers: Headers
  }

export const getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetUrl =
  () => {
    return `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/recently-updated/25`
  }

export const getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get =
  async (
    options?: RequestInit,
  ): Promise<getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetResponse> => {
    const res = await fetch(
      getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetUrl(),
      {
        ...options,
        method: "GET",
      },
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetResponse["data"] =
      body ? JSON.parse(body) : {}

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetResponse
  }

export const getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetQueryKey =
  () => {
    return [
      `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/recently-updated/25`,
    ] as const
  }

export const getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
      >
    >,
    TError = null,
  >(options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  }) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetQueryKey()

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
        >
      >
    > = ({ signal }) =>
      getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get({
        signal,
        ...fetchOptions,
      })

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
        >
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
  }

export type GetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
      >
    >
  >
export type GetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetQueryError =
  null

export function useGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get<
  TData = Awaited<
    ReturnType<
      typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
    >
  >,
  TError = null,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get<
  TData = Awaited<
    ReturnType<
      typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
    >
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get<
  TData = Awaited<
    ReturnType<
      typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
    >
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Recently Updated
 */

export function useGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get<
  TData = Awaited<
    ReturnType<
      typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
    >
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25Get
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdated25GetQueryOptions(
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Recently Updated
 */
export type getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetResponse200 =
  {
    data: unknown
    status: 200
  }

export type getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetResponse500 =
  {
    data: null
    status: 500
  }

export type getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetResponseComposite =

    | getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetResponse200
    | getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetResponse500

export type getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetResponse =
  getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetResponseComposite & {
    headers: Headers
  }

export const getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetUrl =
  () => {
    return `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/recently-updated`
  }

export const getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet = async (
  options?: RequestInit,
): Promise<getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetResponse> => {
  const res = await fetch(
    getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetUrl(),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetResponse
}

export const getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetQueryKey =
  () => {
    return [
      `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/recently-updated`,
    ] as const
  }

export const getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
      >
    >,
    TError = null,
  >(options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  }) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetQueryKey()

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
        >
      >
    > = ({ signal }) =>
      getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet({
        signal,
        ...fetchOptions,
      })

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
        >
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
  }

export type GetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
      >
    >
  >
export type GetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetQueryError =
  null

export function useGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet>
  >,
  TError = null,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Recently Updated
 */

export function useGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGetQueryOptions(
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Recently Added
 */
export type getRecentlyAddedCompatAppsCollectionNew25GetResponse200 = {
  data: unknown
  status: 200
}

export type getRecentlyAddedCompatAppsCollectionNew25GetResponse500 = {
  data: null
  status: 500
}

export type getRecentlyAddedCompatAppsCollectionNew25GetResponseComposite =
  | getRecentlyAddedCompatAppsCollectionNew25GetResponse200
  | getRecentlyAddedCompatAppsCollectionNew25GetResponse500

export type getRecentlyAddedCompatAppsCollectionNew25GetResponse =
  getRecentlyAddedCompatAppsCollectionNew25GetResponseComposite & {
    headers: Headers
  }

export const getGetRecentlyAddedCompatAppsCollectionNew25GetUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/new/25`
}

export const getRecentlyAddedCompatAppsCollectionNew25Get = async (
  options?: RequestInit,
): Promise<getRecentlyAddedCompatAppsCollectionNew25GetResponse> => {
  const res = await fetch(
    getGetRecentlyAddedCompatAppsCollectionNew25GetUrl(),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getRecentlyAddedCompatAppsCollectionNew25GetResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getRecentlyAddedCompatAppsCollectionNew25GetResponse
}

export const getGetRecentlyAddedCompatAppsCollectionNew25GetQueryKey = () => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/new/25`,
  ] as const
}

export const getGetRecentlyAddedCompatAppsCollectionNew25GetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
  >,
  TError = null,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>>,
      TError,
      TData
    >
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRecentlyAddedCompatAppsCollectionNew25GetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>>
  > = ({ signal }) =>
    getRecentlyAddedCompatAppsCollectionNew25Get({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRecentlyAddedCompatAppsCollectionNew25GetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>>
  >
export type GetRecentlyAddedCompatAppsCollectionNew25GetQueryError = null

export function useGetRecentlyAddedCompatAppsCollectionNew25Get<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
  >,
  TError = null,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
          >,
          TError,
          Awaited<
            ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyAddedCompatAppsCollectionNew25Get<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
          >,
          TError,
          Awaited<
            ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyAddedCompatAppsCollectionNew25Get<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Recently Added
 */

export function useGetRecentlyAddedCompatAppsCollectionNew25Get<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyAddedCompatAppsCollectionNew25Get>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetRecentlyAddedCompatAppsCollectionNew25GetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Recently Added
 */
export type getRecentlyAddedCompatAppsCollectionNewGetResponse200 = {
  data: unknown
  status: 200
}

export type getRecentlyAddedCompatAppsCollectionNewGetResponse500 = {
  data: null
  status: 500
}

export type getRecentlyAddedCompatAppsCollectionNewGetResponseComposite =
  | getRecentlyAddedCompatAppsCollectionNewGetResponse200
  | getRecentlyAddedCompatAppsCollectionNewGetResponse500

export type getRecentlyAddedCompatAppsCollectionNewGetResponse =
  getRecentlyAddedCompatAppsCollectionNewGetResponseComposite & {
    headers: Headers
  }

export const getGetRecentlyAddedCompatAppsCollectionNewGetUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/new`
}

export const getRecentlyAddedCompatAppsCollectionNewGet = async (
  options?: RequestInit,
): Promise<getRecentlyAddedCompatAppsCollectionNewGetResponse> => {
  const res = await fetch(getGetRecentlyAddedCompatAppsCollectionNewGetUrl(), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getRecentlyAddedCompatAppsCollectionNewGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getRecentlyAddedCompatAppsCollectionNewGetResponse
}

export const getGetRecentlyAddedCompatAppsCollectionNewGetQueryKey = () => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/new`,
  ] as const
}

export const getGetRecentlyAddedCompatAppsCollectionNewGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>
  >,
  TError = null,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>>,
      TError,
      TData
    >
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRecentlyAddedCompatAppsCollectionNewGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>>
  > = ({ signal }) =>
    getRecentlyAddedCompatAppsCollectionNewGet({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRecentlyAddedCompatAppsCollectionNewGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>>
>
export type GetRecentlyAddedCompatAppsCollectionNewGetQueryError = null

export function useGetRecentlyAddedCompatAppsCollectionNewGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>
  >,
  TError = null,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>
          >,
          TError,
          Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyAddedCompatAppsCollectionNewGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>
          >,
          TError,
          Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyAddedCompatAppsCollectionNewGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Recently Added
 */

export function useGetRecentlyAddedCompatAppsCollectionNewGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecentlyAddedCompatAppsCollectionNewGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetRecentlyAddedCompatAppsCollectionNewGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Popular Apps
 */
export type getPopularAppsCompatAppsCollectionPopular50GetResponse200 = {
  data: unknown
  status: 200
}

export type getPopularAppsCompatAppsCollectionPopular50GetResponse500 = {
  data: null
  status: 500
}

export type getPopularAppsCompatAppsCollectionPopular50GetResponseComposite =
  | getPopularAppsCompatAppsCollectionPopular50GetResponse200
  | getPopularAppsCompatAppsCollectionPopular50GetResponse500

export type getPopularAppsCompatAppsCollectionPopular50GetResponse =
  getPopularAppsCompatAppsCollectionPopular50GetResponseComposite & {
    headers: Headers
  }

export const getGetPopularAppsCompatAppsCollectionPopular50GetUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/popular/50`
}

export const getPopularAppsCompatAppsCollectionPopular50Get = async (
  options?: RequestInit,
): Promise<getPopularAppsCompatAppsCollectionPopular50GetResponse> => {
  const res = await fetch(
    getGetPopularAppsCompatAppsCollectionPopular50GetUrl(),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getPopularAppsCompatAppsCollectionPopular50GetResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getPopularAppsCompatAppsCollectionPopular50GetResponse
}

export const getGetPopularAppsCompatAppsCollectionPopular50GetQueryKey = () => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/popular/50`,
  ] as const
}

export const getGetPopularAppsCompatAppsCollectionPopular50GetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
  >,
  TError = null,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<
        ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
      >,
      TError,
      TData
    >
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetPopularAppsCompatAppsCollectionPopular50GetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>>
  > = ({ signal }) =>
    getPopularAppsCompatAppsCollectionPopular50Get({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPopularAppsCompatAppsCollectionPopular50GetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>>
  >
export type GetPopularAppsCompatAppsCollectionPopular50GetQueryError = null

export function useGetPopularAppsCompatAppsCollectionPopular50Get<
  TData = Awaited<
    ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
  >,
  TError = null,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
          >,
          TError,
          Awaited<
            ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPopularAppsCompatAppsCollectionPopular50Get<
  TData = Awaited<
    ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
          >,
          TError,
          Awaited<
            ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPopularAppsCompatAppsCollectionPopular50Get<
  TData = Awaited<
    ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Popular Apps
 */

export function useGetPopularAppsCompatAppsCollectionPopular50Get<
  TData = Awaited<
    ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getPopularAppsCompatAppsCollectionPopular50Get>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetPopularAppsCompatAppsCollectionPopular50GetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Popular Apps
 */
export type getPopularAppsCompatAppsCollectionPopularGetResponse200 = {
  data: unknown
  status: 200
}

export type getPopularAppsCompatAppsCollectionPopularGetResponse500 = {
  data: null
  status: 500
}

export type getPopularAppsCompatAppsCollectionPopularGetResponseComposite =
  | getPopularAppsCompatAppsCollectionPopularGetResponse200
  | getPopularAppsCompatAppsCollectionPopularGetResponse500

export type getPopularAppsCompatAppsCollectionPopularGetResponse =
  getPopularAppsCompatAppsCollectionPopularGetResponseComposite & {
    headers: Headers
  }

export const getGetPopularAppsCompatAppsCollectionPopularGetUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/popular`
}

export const getPopularAppsCompatAppsCollectionPopularGet = async (
  options?: RequestInit,
): Promise<getPopularAppsCompatAppsCollectionPopularGetResponse> => {
  const res = await fetch(
    getGetPopularAppsCompatAppsCollectionPopularGetUrl(),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getPopularAppsCompatAppsCollectionPopularGetResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getPopularAppsCompatAppsCollectionPopularGetResponse
}

export const getGetPopularAppsCompatAppsCollectionPopularGetQueryKey = () => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/collection/popular`,
  ] as const
}

export const getGetPopularAppsCompatAppsCollectionPopularGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
  >,
  TError = null,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>>,
      TError,
      TData
    >
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetPopularAppsCompatAppsCollectionPopularGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>>
  > = ({ signal }) =>
    getPopularAppsCompatAppsCollectionPopularGet({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPopularAppsCompatAppsCollectionPopularGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>>
  >
export type GetPopularAppsCompatAppsCollectionPopularGetQueryError = null

export function useGetPopularAppsCompatAppsCollectionPopularGet<
  TData = Awaited<
    ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
  >,
  TError = null,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPopularAppsCompatAppsCollectionPopularGet<
  TData = Awaited<
    ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPopularAppsCompatAppsCollectionPopularGet<
  TData = Awaited<
    ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Popular Apps
 */

export function useGetPopularAppsCompatAppsCollectionPopularGet<
  TData = Awaited<
    ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
  >,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getPopularAppsCompatAppsCollectionPopularGet>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetPopularAppsCompatAppsCollectionPopularGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Search
 */
export type getSearchCompatAppsSearchQueryGetResponse200 = {
  data: unknown
  status: 200
}

export type getSearchCompatAppsSearchQueryGetResponse422 = {
  data: null
  status: 422
}

export type getSearchCompatAppsSearchQueryGetResponse500 = {
  data: null
  status: 500
}

export type getSearchCompatAppsSearchQueryGetResponseComposite =
  | getSearchCompatAppsSearchQueryGetResponse200
  | getSearchCompatAppsSearchQueryGetResponse422
  | getSearchCompatAppsSearchQueryGetResponse500

export type getSearchCompatAppsSearchQueryGetResponse =
  getSearchCompatAppsSearchQueryGetResponseComposite & {
    headers: Headers
  }

export const getGetSearchCompatAppsSearchQueryGetUrl = (
  query: string,
  params?: GetSearchCompatAppsSearchQueryGetParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/search/${query}?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/search/${query}`
}

export const getSearchCompatAppsSearchQueryGet = async (
  query: string,
  params?: GetSearchCompatAppsSearchQueryGetParams,
  options?: RequestInit,
): Promise<getSearchCompatAppsSearchQueryGetResponse> => {
  const res = await fetch(
    getGetSearchCompatAppsSearchQueryGetUrl(query, params),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSearchCompatAppsSearchQueryGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getSearchCompatAppsSearchQueryGetResponse
}

export const getGetSearchCompatAppsSearchQueryGetQueryKey = (
  query?: string,
  params?: GetSearchCompatAppsSearchQueryGetParams,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/search/${query}`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetSearchCompatAppsSearchQueryGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
  TError = null | null,
>(
  query: string,
  params?: GetSearchCompatAppsSearchQueryGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetSearchCompatAppsSearchQueryGetQueryKey(query, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>
  > = ({ signal }) =>
    getSearchCompatAppsSearchQueryGet(query, params, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!query,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSearchCompatAppsSearchQueryGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>
>
export type GetSearchCompatAppsSearchQueryGetQueryError = null | null

export function useGetSearchCompatAppsSearchQueryGet<
  TData = Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
  TError = null | null,
>(
  query: string,
  params: undefined | GetSearchCompatAppsSearchQueryGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
          TError,
          Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetSearchCompatAppsSearchQueryGet<
  TData = Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
  TError = null | null,
>(
  query: string,
  params?: GetSearchCompatAppsSearchQueryGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
          TError,
          Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetSearchCompatAppsSearchQueryGet<
  TData = Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
  TError = null | null,
>(
  query: string,
  params?: GetSearchCompatAppsSearchQueryGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Search
 */

export function useGetSearchCompatAppsSearchQueryGet<
  TData = Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
  TError = null | null,
>(
  query: string,
  params?: GetSearchCompatAppsSearchQueryGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSearchCompatAppsSearchQueryGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetSearchCompatAppsSearchQueryGetQueryOptions(
    query,
    params,
    options,
  )

  const _query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  _query.queryKey = queryOptions.queryKey

  return _query
}

/**
 * @summary Get Single App
 */
export type getSingleAppCompatAppsAppIdGetResponse200 = {
  data: unknown
  status: 200
}

export type getSingleAppCompatAppsAppIdGetResponse404 = {
  data: null
  status: 404
}

export type getSingleAppCompatAppsAppIdGetResponse422 = {
  data: null
  status: 422
}

export type getSingleAppCompatAppsAppIdGetResponse500 = {
  data: null
  status: 500
}

export type getSingleAppCompatAppsAppIdGetResponseComposite =
  | getSingleAppCompatAppsAppIdGetResponse200
  | getSingleAppCompatAppsAppIdGetResponse404
  | getSingleAppCompatAppsAppIdGetResponse422
  | getSingleAppCompatAppsAppIdGetResponse500

export type getSingleAppCompatAppsAppIdGetResponse =
  getSingleAppCompatAppsAppIdGetResponseComposite & {
    headers: Headers
  }

export const getGetSingleAppCompatAppsAppIdGetUrl = (appId: string) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/${appId}`
}

export const getSingleAppCompatAppsAppIdGet = async (
  appId: string,
  options?: RequestInit,
): Promise<getSingleAppCompatAppsAppIdGetResponse> => {
  const res = await fetch(getGetSingleAppCompatAppsAppIdGetUrl(appId), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSingleAppCompatAppsAppIdGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getSingleAppCompatAppsAppIdGetResponse
}

export const getGetSingleAppCompatAppsAppIdGetQueryKey = (appId?: string) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/compat/apps/${appId}`,
  ] as const
}

export const getGetSingleAppCompatAppsAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
  TError = null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetSingleAppCompatAppsAppIdGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>
  > = ({ signal }) =>
    getSingleAppCompatAppsAppIdGet(appId, { signal, ...fetchOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSingleAppCompatAppsAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>
>
export type GetSingleAppCompatAppsAppIdGetQueryError = null | null | null

export function useGetSingleAppCompatAppsAppIdGet<
  TData = Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
  TError = null | null | null,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetSingleAppCompatAppsAppIdGet<
  TData = Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
  TError = null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetSingleAppCompatAppsAppIdGet<
  TData = Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
  TError = null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Single App
 */

export function useGetSingleAppCompatAppsAppIdGet<
  TData = Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
  TError = null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSingleAppCompatAppsAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetSingleAppCompatAppsAppIdGetQueryOptions(
    appId,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
