/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import type { FlathubUserResult, UserResult } from ".././model"

export const getUsersUsersGetResponseMock = (
  overrideResponse: Partial<FlathubUserResult> = {},
): FlathubUserResult => ({
  pagination: {
    page: faker.number.int({ min: undefined, max: undefined }),
    page_size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    total_pages: faker.number.int({ min: undefined, max: undefined }),
  },
  users: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    accepted_publisher_agreement_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    default_account: faker.helpers.arrayElement([faker.word.sample(), null]),
    deleted: faker.datatype.boolean(),
    display_name: faker.helpers.arrayElement([faker.word.sample(), null]),
    id: faker.number.int({ min: undefined, max: undefined }),
    roles: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.word.sample(),
      permissions: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        name: faker.word.sample(),
      })),
    })),
  })),
  ...overrideResponse,
})

export const getUserUsersUserIdGetResponseMock = (
  overrideResponse: Partial<UserResult> = {},
): UserResult => ({
  accepted_publisher_agreement_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  default_account: faker.helpers.arrayElement([faker.word.sample(), null]),
  deleted: faker.datatype.boolean(),
  display_name: faker.helpers.arrayElement([faker.word.sample(), null]),
  id: faker.number.int({ min: undefined, max: undefined }),
  roles: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
    permissions: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      name: faker.word.sample(),
    })),
  })),
  ...overrideResponse,
})

export const getUsersUsersGetMockHandler = (
  overrideResponse?:
    | FlathubUserResult
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FlathubUserResult> | FlathubUserResult),
) => {
  return http.get("*/users", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersUsersGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getUserUsersUserIdGetMockHandler = (
  overrideResponse?:
    | UserResult
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserResult> | UserResult),
) => {
  return http.get("*/users/:userId", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUserUsersUserIdGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}
export const getUsersMock = () => [
  getUsersUsersGetMockHandler(),
  getUserUsersUserIdGetMockHandler(),
]
