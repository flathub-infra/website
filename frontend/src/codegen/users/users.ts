/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query"
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"
import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"
import type {
  FlathubUsersResult,
  HTTPValidationError,
  UserResult,
  UsersUsersGetParams,
} from ".././model"

/**
 * Return a list of all known users
 * @summary Users
 */
export const usersUsersGet = (
  params?: UsersUsersGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FlathubUsersResult>> => {
  return axios.get(`/users`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getUsersUsersGetQueryKey = (params?: UsersUsersGetParams) => {
  return [`/users`, ...(params ? [params] : [])] as const
}

export const getUsersUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof usersUsersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: UsersUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersUsersGet>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUsersUsersGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersUsersGet>>> = ({
    signal,
  }) => usersUsersGet(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersUsersGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type UsersUsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersUsersGet>>
>
export type UsersUsersGetQueryError = AxiosError<HTTPValidationError>

export function useUsersUsersGet<
  TData = Awaited<ReturnType<typeof usersUsersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: undefined | UsersUsersGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersUsersGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersUsersGet>>,
          TError,
          TData
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersUsersGet<
  TData = Awaited<ReturnType<typeof usersUsersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: UsersUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersUsersGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersUsersGet>>,
          TError,
          TData
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersUsersGet<
  TData = Awaited<ReturnType<typeof usersUsersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: UsersUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersUsersGet>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Users
 */

export function useUsersUsersGet<
  TData = Awaited<ReturnType<typeof usersUsersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: UsersUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersUsersGet>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersUsersGetQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Return the current user
 * @summary User
 */
export const userUsersUserIdGet = (
  userId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UserResult>> => {
  return axios.get(`/users/${userId}`, options)
}

export const getUserUsersUserIdGetQueryKey = (userId: number) => {
  return [`/users/${userId}`] as const
}

export const getUserUsersUserIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof userUsersUserIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userUsersUserIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getUserUsersUserIdGetQueryKey(userId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userUsersUserIdGet>>
  > = ({ signal }) => userUsersUserIdGet(userId, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userUsersUserIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type UserUsersUserIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof userUsersUserIdGet>>
>
export type UserUsersUserIdGetQueryError = AxiosError<HTTPValidationError>

export function useUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof userUsersUserIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  userId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userUsersUserIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userUsersUserIdGet>>,
          TError,
          TData
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof userUsersUserIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userUsersUserIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userUsersUserIdGet>>,
          TError,
          TData
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof userUsersUserIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userUsersUserIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary User
 */

export function useUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof userUsersUserIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userUsersUserIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUserUsersUserIdGetQueryOptions(userId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
