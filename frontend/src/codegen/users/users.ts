/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  AddUserRoleUsersUserIdRolePostParams,
  DeleteUserRoleUsersUserIdRoleDeleteParams,
  FlathubUsersResult,
  RoleName,
  UserResult,
  UsersUsersGetParams,
} from ".././model"

/**
 * Return a list of all known users
 * @summary Users
 */
export type usersUsersGetResponse200 = {
  data: FlathubUsersResult
  status: 200
}

export type usersUsersGetResponse400 = {
  data: null
  status: 400
}

export type usersUsersGetResponse401 = {
  data: null
  status: 401
}

export type usersUsersGetResponse403 = {
  data: null
  status: 403
}

export type usersUsersGetResponse422 = {
  data: null
  status: 422
}

export type usersUsersGetResponse500 = {
  data: null
  status: 500
}

export type usersUsersGetResponseComposite =
  | usersUsersGetResponse200
  | usersUsersGetResponse400
  | usersUsersGetResponse401
  | usersUsersGetResponse403
  | usersUsersGetResponse422
  | usersUsersGetResponse500

export type usersUsersGetResponse = usersUsersGetResponseComposite & {
  headers: Headers
}

export const getUsersUsersGetUrl = (params?: UsersUsersGetParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/users?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/users`
}

export const usersUsersGet = async (
  params?: UsersUsersGetParams,
  options?: RequestInit,
): Promise<usersUsersGetResponse> => {
  const res = await fetch(getUsersUsersGetUrl(params), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: usersUsersGetResponse["data"] = body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUsersGetResponse
}

export const getUsersUsersGetQueryKey = (params?: UsersUsersGetParams) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/users`,
    ...(params ? [params] : []),
  ] as const
}

export const getUsersUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof usersUsersGet>>,
  TError = null | null | null | null | null,
>(
  params?: UsersUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersUsersGet>>, TError, TData>
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUsersUsersGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersUsersGet>>> = ({
    signal,
  }) => usersUsersGet(params, { signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersUsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersUsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersUsersGet>>
>
export type UsersUsersGetQueryError = null | null | null | null | null

export function useUsersUsersGet<
  TData = Awaited<ReturnType<typeof usersUsersGet>>,
  TError = null | null | null | null | null,
>(
  params: undefined | UsersUsersGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersUsersGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersUsersGet>>,
          TError,
          Awaited<ReturnType<typeof usersUsersGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUsersUsersGet<
  TData = Awaited<ReturnType<typeof usersUsersGet>>,
  TError = null | null | null | null | null,
>(
  params?: UsersUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersUsersGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersUsersGet>>,
          TError,
          Awaited<ReturnType<typeof usersUsersGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUsersUsersGet<
  TData = Awaited<ReturnType<typeof usersUsersGet>>,
  TError = null | null | null | null | null,
>(
  params?: UsersUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersUsersGet>>, TError, TData>
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Users
 */

export function useUsersUsersGet<
  TData = Awaited<ReturnType<typeof usersUsersGet>>,
  TError = null | null | null | null | null,
>(
  params?: UsersUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersUsersGet>>, TError, TData>
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getUsersUsersGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Return a list of all known role names
 * @summary Roles
 */
export type rolesUsersRolesGetResponse200 = {
  data: string[]
  status: 200
}

export type rolesUsersRolesGetResponse401 = {
  data: null
  status: 401
}

export type rolesUsersRolesGetResponse403 = {
  data: null
  status: 403
}

export type rolesUsersRolesGetResponse500 = {
  data: null
  status: 500
}

export type rolesUsersRolesGetResponseComposite =
  | rolesUsersRolesGetResponse200
  | rolesUsersRolesGetResponse401
  | rolesUsersRolesGetResponse403
  | rolesUsersRolesGetResponse500

export type rolesUsersRolesGetResponse = rolesUsersRolesGetResponseComposite & {
  headers: Headers
}

export const getRolesUsersRolesGetUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/users/roles`
}

export const rolesUsersRolesGet = async (
  options?: RequestInit,
): Promise<rolesUsersRolesGetResponse> => {
  const res = await fetch(getRolesUsersRolesGetUrl(), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: rolesUsersRolesGetResponse["data"] = body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as rolesUsersRolesGetResponse
}

export const getRolesUsersRolesGetQueryKey = () => {
  return [`${process.env.NEXT_PUBLIC_API_BASE_URI}/users/roles`] as const
}

export const getRolesUsersRolesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof rolesUsersRolesGet>>,
  TError = null | null | null,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof rolesUsersRolesGet>>,
      TError,
      TData
    >
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRolesUsersRolesGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rolesUsersRolesGet>>
  > = ({ signal }) => rolesUsersRolesGet({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rolesUsersRolesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RolesUsersRolesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof rolesUsersRolesGet>>
>
export type RolesUsersRolesGetQueryError = null | null | null

export function useRolesUsersRolesGet<
  TData = Awaited<ReturnType<typeof rolesUsersRolesGet>>,
  TError = null | null | null,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rolesUsersRolesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rolesUsersRolesGet>>,
          TError,
          Awaited<ReturnType<typeof rolesUsersRolesGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useRolesUsersRolesGet<
  TData = Awaited<ReturnType<typeof rolesUsersRolesGet>>,
  TError = null | null | null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rolesUsersRolesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rolesUsersRolesGet>>,
          TError,
          Awaited<ReturnType<typeof rolesUsersRolesGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useRolesUsersRolesGet<
  TData = Awaited<ReturnType<typeof rolesUsersRolesGet>>,
  TError = null | null | null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rolesUsersRolesGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Roles
 */

export function useRolesUsersRolesGet<
  TData = Awaited<ReturnType<typeof rolesUsersRolesGet>>,
  TError = null | null | null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rolesUsersRolesGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getRolesUsersRolesGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Return the current user
 * @summary User
 */
export type userUsersUserIdGetResponse200 = {
  data: UserResult
  status: 200
}

export type userUsersUserIdGetResponse401 = {
  data: null
  status: 401
}

export type userUsersUserIdGetResponse403 = {
  data: null
  status: 403
}

export type userUsersUserIdGetResponse404 = {
  data: null
  status: 404
}

export type userUsersUserIdGetResponse422 = {
  data: null
  status: 422
}

export type userUsersUserIdGetResponse500 = {
  data: null
  status: 500
}

export type userUsersUserIdGetResponseComposite =
  | userUsersUserIdGetResponse200
  | userUsersUserIdGetResponse401
  | userUsersUserIdGetResponse403
  | userUsersUserIdGetResponse404
  | userUsersUserIdGetResponse422
  | userUsersUserIdGetResponse500

export type userUsersUserIdGetResponse = userUsersUserIdGetResponseComposite & {
  headers: Headers
}

export const getUserUsersUserIdGetUrl = (userId: number) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/users/${userId}`
}

export const userUsersUserIdGet = async (
  userId: number,
  options?: RequestInit,
): Promise<userUsersUserIdGetResponse> => {
  const res = await fetch(getUserUsersUserIdGetUrl(userId), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: userUsersUserIdGetResponse["data"] = body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as userUsersUserIdGetResponse
}

export const getUserUsersUserIdGetQueryKey = (userId?: number) => {
  return [`${process.env.NEXT_PUBLIC_API_BASE_URI}/users/${userId}`] as const
}

export const getUserUsersUserIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof userUsersUserIdGet>>,
  TError = null | null | null | null | null,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userUsersUserIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getUserUsersUserIdGetQueryKey(userId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userUsersUserIdGet>>
  > = ({ signal }) => userUsersUserIdGet(userId, { signal, ...fetchOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userUsersUserIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UserUsersUserIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof userUsersUserIdGet>>
>
export type UserUsersUserIdGetQueryError = null | null | null | null | null

export function useUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof userUsersUserIdGet>>,
  TError = null | null | null | null | null,
>(
  userId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userUsersUserIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userUsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof userUsersUserIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof userUsersUserIdGet>>,
  TError = null | null | null | null | null,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userUsersUserIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userUsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof userUsersUserIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof userUsersUserIdGet>>,
  TError = null | null | null | null | null,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userUsersUserIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary User
 */

export function useUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof userUsersUserIdGet>>,
  TError = null | null | null | null | null,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userUsersUserIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getUserUsersUserIdGetQueryOptions(userId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Add a role to a user
 * @summary Add User Role
 */
export type addUserRoleUsersUserIdRolePostResponse200 = {
  data: UserResult
  status: 200
}

export type addUserRoleUsersUserIdRolePostResponse401 = {
  data: null
  status: 401
}

export type addUserRoleUsersUserIdRolePostResponse403 = {
  data: null
  status: 403
}

export type addUserRoleUsersUserIdRolePostResponse404 = {
  data: null
  status: 404
}

export type addUserRoleUsersUserIdRolePostResponse422 = {
  data: null
  status: 422
}

export type addUserRoleUsersUserIdRolePostResponse500 = {
  data: null
  status: 500
}

export type addUserRoleUsersUserIdRolePostResponseComposite =
  | addUserRoleUsersUserIdRolePostResponse200
  | addUserRoleUsersUserIdRolePostResponse401
  | addUserRoleUsersUserIdRolePostResponse403
  | addUserRoleUsersUserIdRolePostResponse404
  | addUserRoleUsersUserIdRolePostResponse422
  | addUserRoleUsersUserIdRolePostResponse500

export type addUserRoleUsersUserIdRolePostResponse =
  addUserRoleUsersUserIdRolePostResponseComposite & {
    headers: Headers
  }

export const getAddUserRoleUsersUserIdRolePostUrl = (
  userId: number,
  params: AddUserRoleUsersUserIdRolePostParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/users/${userId}/role?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/users/${userId}/role`
}

export const addUserRoleUsersUserIdRolePost = async (
  userId: number,
  params: AddUserRoleUsersUserIdRolePostParams,
  options?: RequestInit,
): Promise<addUserRoleUsersUserIdRolePostResponse> => {
  const res = await fetch(
    getAddUserRoleUsersUserIdRolePostUrl(userId, params),
    {
      ...options,
      method: "POST",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: addUserRoleUsersUserIdRolePostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as addUserRoleUsersUserIdRolePostResponse
}

export const getAddUserRoleUsersUserIdRolePostMutationOptions = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUserRoleUsersUserIdRolePost>>,
    TError,
    { userId: number; params: AddUserRoleUsersUserIdRolePostParams },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof addUserRoleUsersUserIdRolePost>>,
  TError,
  { userId: number; params: AddUserRoleUsersUserIdRolePostParams },
  TContext
> => {
  const mutationKey = ["addUserRoleUsersUserIdRolePost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addUserRoleUsersUserIdRolePost>>,
    { userId: number; params: AddUserRoleUsersUserIdRolePostParams }
  > = (props) => {
    const { userId, params } = props ?? {}

    return addUserRoleUsersUserIdRolePost(userId, params, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AddUserRoleUsersUserIdRolePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addUserRoleUsersUserIdRolePost>>
>

export type AddUserRoleUsersUserIdRolePostMutationError =
  | null
  | null
  | null
  | null
  | null

/**
 * @summary Add User Role
 */
export const useAddUserRoleUsersUserIdRolePost = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addUserRoleUsersUserIdRolePost>>,
      TError,
      { userId: number; params: AddUserRoleUsersUserIdRolePostParams },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addUserRoleUsersUserIdRolePost>>,
  TError,
  { userId: number; params: AddUserRoleUsersUserIdRolePostParams },
  TContext
> => {
  const mutationOptions =
    getAddUserRoleUsersUserIdRolePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Remove a role from a user
 * @summary Delete User Role
 */
export type deleteUserRoleUsersUserIdRoleDeleteResponse200 = {
  data: UserResult
  status: 200
}

export type deleteUserRoleUsersUserIdRoleDeleteResponse401 = {
  data: null
  status: 401
}

export type deleteUserRoleUsersUserIdRoleDeleteResponse403 = {
  data: null
  status: 403
}

export type deleteUserRoleUsersUserIdRoleDeleteResponse404 = {
  data: null
  status: 404
}

export type deleteUserRoleUsersUserIdRoleDeleteResponse422 = {
  data: null
  status: 422
}

export type deleteUserRoleUsersUserIdRoleDeleteResponse500 = {
  data: null
  status: 500
}

export type deleteUserRoleUsersUserIdRoleDeleteResponseComposite =
  | deleteUserRoleUsersUserIdRoleDeleteResponse200
  | deleteUserRoleUsersUserIdRoleDeleteResponse401
  | deleteUserRoleUsersUserIdRoleDeleteResponse403
  | deleteUserRoleUsersUserIdRoleDeleteResponse404
  | deleteUserRoleUsersUserIdRoleDeleteResponse422
  | deleteUserRoleUsersUserIdRoleDeleteResponse500

export type deleteUserRoleUsersUserIdRoleDeleteResponse =
  deleteUserRoleUsersUserIdRoleDeleteResponseComposite & {
    headers: Headers
  }

export const getDeleteUserRoleUsersUserIdRoleDeleteUrl = (
  userId: number,
  params: DeleteUserRoleUsersUserIdRoleDeleteParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/users/${userId}/role?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/users/${userId}/role`
}

export const deleteUserRoleUsersUserIdRoleDelete = async (
  userId: number,
  params: DeleteUserRoleUsersUserIdRoleDeleteParams,
  options?: RequestInit,
): Promise<deleteUserRoleUsersUserIdRoleDeleteResponse> => {
  const res = await fetch(
    getDeleteUserRoleUsersUserIdRoleDeleteUrl(userId, params),
    {
      ...options,
      method: "DELETE",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteUserRoleUsersUserIdRoleDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as deleteUserRoleUsersUserIdRoleDeleteResponse
}

export const getDeleteUserRoleUsersUserIdRoleDeleteMutationOptions = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserRoleUsersUserIdRoleDelete>>,
    TError,
    { userId: number; params: DeleteUserRoleUsersUserIdRoleDeleteParams },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUserRoleUsersUserIdRoleDelete>>,
  TError,
  { userId: number; params: DeleteUserRoleUsersUserIdRoleDeleteParams },
  TContext
> => {
  const mutationKey = ["deleteUserRoleUsersUserIdRoleDelete"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUserRoleUsersUserIdRoleDelete>>,
    { userId: number; params: DeleteUserRoleUsersUserIdRoleDeleteParams }
  > = (props) => {
    const { userId, params } = props ?? {}

    return deleteUserRoleUsersUserIdRoleDelete(userId, params, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteUserRoleUsersUserIdRoleDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUserRoleUsersUserIdRoleDelete>>
>

export type DeleteUserRoleUsersUserIdRoleDeleteMutationError =
  | null
  | null
  | null
  | null
  | null

/**
 * @summary Delete User Role
 */
export const useDeleteUserRoleUsersUserIdRoleDelete = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteUserRoleUsersUserIdRoleDelete>>,
      TError,
      { userId: number; params: DeleteUserRoleUsersUserIdRoleDeleteParams },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteUserRoleUsersUserIdRoleDelete>>,
  TError,
  { userId: number; params: DeleteUserRoleUsersUserIdRoleDeleteParams },
  TContext
> => {
  const mutationOptions =
    getDeleteUserRoleUsersUserIdRoleDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Return all users with a specific role
 * @summary Role Users
 */
export type roleUsersUsersRolesRoleNameGetResponse200 = {
  data: UserResult[]
  status: 200
}

export type roleUsersUsersRolesRoleNameGetResponse401 = {
  data: null
  status: 401
}

export type roleUsersUsersRolesRoleNameGetResponse403 = {
  data: null
  status: 403
}

export type roleUsersUsersRolesRoleNameGetResponse404 = {
  data: null
  status: 404
}

export type roleUsersUsersRolesRoleNameGetResponse422 = {
  data: null
  status: 422
}

export type roleUsersUsersRolesRoleNameGetResponse500 = {
  data: null
  status: 500
}

export type roleUsersUsersRolesRoleNameGetResponseComposite =
  | roleUsersUsersRolesRoleNameGetResponse200
  | roleUsersUsersRolesRoleNameGetResponse401
  | roleUsersUsersRolesRoleNameGetResponse403
  | roleUsersUsersRolesRoleNameGetResponse404
  | roleUsersUsersRolesRoleNameGetResponse422
  | roleUsersUsersRolesRoleNameGetResponse500

export type roleUsersUsersRolesRoleNameGetResponse =
  roleUsersUsersRolesRoleNameGetResponseComposite & {
    headers: Headers
  }

export const getRoleUsersUsersRolesRoleNameGetUrl = (roleName: RoleName) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/users/roles/${roleName}`
}

export const roleUsersUsersRolesRoleNameGet = async (
  roleName: RoleName,
  options?: RequestInit,
): Promise<roleUsersUsersRolesRoleNameGetResponse> => {
  const res = await fetch(getRoleUsersUsersRolesRoleNameGetUrl(roleName), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: roleUsersUsersRolesRoleNameGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as roleUsersUsersRolesRoleNameGetResponse
}

export const getRoleUsersUsersRolesRoleNameGetQueryKey = (
  roleName?: RoleName,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/users/roles/${roleName}`,
  ] as const
}

export const getRoleUsersUsersRolesRoleNameGetQueryOptions = <
  TData = Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
  TError = null | null | null | null | null,
>(
  roleName: RoleName,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getRoleUsersUsersRolesRoleNameGetQueryKey(roleName)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>
  > = ({ signal }) =>
    roleUsersUsersRolesRoleNameGet(roleName, { signal, ...fetchOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!roleName,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RoleUsersUsersRolesRoleNameGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>
>
export type RoleUsersUsersRolesRoleNameGetQueryError =
  | null
  | null
  | null
  | null
  | null

export function useRoleUsersUsersRolesRoleNameGet<
  TData = Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
  TError = null | null | null | null | null,
>(
  roleName: RoleName,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
          TError,
          Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useRoleUsersUsersRolesRoleNameGet<
  TData = Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
  TError = null | null | null | null | null,
>(
  roleName: RoleName,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
          TError,
          Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useRoleUsersUsersRolesRoleNameGet<
  TData = Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
  TError = null | null | null | null | null,
>(
  roleName: RoleName,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Role Users
 */

export function useRoleUsersUsersRolesRoleNameGet<
  TData = Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
  TError = null | null | null | null | null,
>(
  roleName: RoleName,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof roleUsersUsersRolesRoleNameGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getRoleUsersUsersRolesRoleNameGetQueryOptions(
    roleName,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
