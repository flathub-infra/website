/* tslint:disable */
/* eslint-disable */
/**
 * Flathub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration"
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common"
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base"
// @ts-ignore
import { HTTPValidationError } from "../model"
// @ts-ignore
import { ModerationApp } from "../model"
// @ts-ignore
import { ModerationAppsResponse } from "../model"
// @ts-ignore
import { Review } from "../model"
// @ts-ignore
import { ReviewRequest } from "../model"
// @ts-ignore
import { ReviewRequestResponse } from "../model"
/**
 * ModerationApi - axios parameter creator
 * @export
 */
export const ModerationApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get a list of moderation requests for an app.
     * @summary Get Moderation App
     * @param {string} appId
     * @param {boolean} [includeOutdated]
     * @param {boolean} [includeHandled]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getModerationAppModerationAppsAppIdGet: async (
      appId: string,
      includeOutdated?: boolean,
      includeHandled?: boolean,
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists(
        "getModerationAppModerationAppsAppIdGet",
        "appId",
        appId,
      )
      const localVarPath = `/moderation/apps/{app_id}`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (includeOutdated !== undefined) {
        localVarQueryParameter["include_outdated"] = includeOutdated
      }

      if (includeHandled !== undefined) {
        localVarQueryParameter["include_handled"] = includeHandled
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a list of apps with unhandled moderation requests.
     * @summary Get Moderation Apps
     * @param {boolean | null} [newSubmissions]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getModerationAppsModerationAppsGet: async (
      newSubmissions?: boolean | null,
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/moderation/apps`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (newSubmissions !== undefined) {
        localVarQueryParameter["new_submissions"] = newSubmissions
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Approve or reject the moderation request with a comment. If all requests for a job are approved, the job is marked as successful in flat-manager.
     * @summary Submit Review
     * @param {number} id
     * @param {Review} review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitReviewModerationRequestsIdReviewPost: async (
      id: number,
      review: Review,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("submitReviewModerationRequestsIdReviewPost", "id", id)
      // verify required parameter 'review' is not null or undefined
      assertParamExists(
        "submitReviewModerationRequestsIdReviewPost",
        "review",
        review,
      )
      const localVarPath = `/moderation/requests/{id}/review`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        review,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Submit Review Request
     * @param {ReviewRequest} reviewRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitReviewRequestModerationSubmitReviewRequestPost: async (
      reviewRequest: ReviewRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'reviewRequest' is not null or undefined
      assertParamExists(
        "submitReviewRequestModerationSubmitReviewRequestPost",
        "reviewRequest",
        reviewRequest,
      )
      const localVarPath = `/moderation/submit_review_request`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        reviewRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ModerationApi - functional programming interface
 * @export
 */
export const ModerationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ModerationApiAxiosParamCreator(configuration)
  return {
    /**
     * Get a list of moderation requests for an app.
     * @summary Get Moderation App
     * @param {string} appId
     * @param {boolean} [includeOutdated]
     * @param {boolean} [includeHandled]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getModerationAppModerationAppsAppIdGet(
      appId: string,
      includeOutdated?: boolean,
      includeHandled?: boolean,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModerationApp>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getModerationAppModerationAppsAppIdGet(
          appId,
          includeOutdated,
          includeHandled,
          limit,
          offset,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Get a list of apps with unhandled moderation requests.
     * @summary Get Moderation Apps
     * @param {boolean | null} [newSubmissions]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getModerationAppsModerationAppsGet(
      newSubmissions?: boolean | null,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ModerationAppsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getModerationAppsModerationAppsGet(
          newSubmissions,
          limit,
          offset,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Approve or reject the moderation request with a comment. If all requests for a job are approved, the job is marked as successful in flat-manager.
     * @summary Submit Review
     * @param {number} id
     * @param {Review} review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submitReviewModerationRequestsIdReviewPost(
      id: number,
      review: Review,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.submitReviewModerationRequestsIdReviewPost(
          id,
          review,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Submit Review Request
     * @param {ReviewRequest} reviewRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submitReviewRequestModerationSubmitReviewRequestPost(
      reviewRequest: ReviewRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ReviewRequestResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.submitReviewRequestModerationSubmitReviewRequestPost(
          reviewRequest,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * ModerationApi - factory interface
 * @export
 */
export const ModerationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ModerationApiFp(configuration)
  return {
    /**
     * Get a list of moderation requests for an app.
     * @summary Get Moderation App
     * @param {string} appId
     * @param {boolean} [includeOutdated]
     * @param {boolean} [includeHandled]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getModerationAppModerationAppsAppIdGet(
      appId: string,
      includeOutdated?: boolean,
      includeHandled?: boolean,
      limit?: number,
      offset?: number,
      options?: any,
    ): AxiosPromise<ModerationApp> {
      return localVarFp
        .getModerationAppModerationAppsAppIdGet(
          appId,
          includeOutdated,
          includeHandled,
          limit,
          offset,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a list of apps with unhandled moderation requests.
     * @summary Get Moderation Apps
     * @param {boolean | null} [newSubmissions]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getModerationAppsModerationAppsGet(
      newSubmissions?: boolean | null,
      limit?: number,
      offset?: number,
      options?: any,
    ): AxiosPromise<ModerationAppsResponse> {
      return localVarFp
        .getModerationAppsModerationAppsGet(
          newSubmissions,
          limit,
          offset,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Approve or reject the moderation request with a comment. If all requests for a job are approved, the job is marked as successful in flat-manager.
     * @summary Submit Review
     * @param {number} id
     * @param {Review} review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitReviewModerationRequestsIdReviewPost(
      id: number,
      review: Review,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .submitReviewModerationRequestsIdReviewPost(id, review, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Submit Review Request
     * @param {ReviewRequest} reviewRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitReviewRequestModerationSubmitReviewRequestPost(
      reviewRequest: ReviewRequest,
      options?: any,
    ): AxiosPromise<ReviewRequestResponse> {
      return localVarFp
        .submitReviewRequestModerationSubmitReviewRequestPost(
          reviewRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ModerationApi - object-oriented interface
 * @export
 * @class ModerationApi
 * @extends {BaseAPI}
 */
export class ModerationApi extends BaseAPI {
  /**
   * Get a list of moderation requests for an app.
   * @summary Get Moderation App
   * @param {string} appId
   * @param {boolean} [includeOutdated]
   * @param {boolean} [includeHandled]
   * @param {number} [limit]
   * @param {number} [offset]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModerationApi
   */
  public getModerationAppModerationAppsAppIdGet(
    appId: string,
    includeOutdated?: boolean,
    includeHandled?: boolean,
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig,
  ) {
    return ModerationApiFp(this.configuration)
      .getModerationAppModerationAppsAppIdGet(
        appId,
        includeOutdated,
        includeHandled,
        limit,
        offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a list of apps with unhandled moderation requests.
   * @summary Get Moderation Apps
   * @param {boolean | null} [newSubmissions]
   * @param {number} [limit]
   * @param {number} [offset]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModerationApi
   */
  public getModerationAppsModerationAppsGet(
    newSubmissions?: boolean | null,
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig,
  ) {
    return ModerationApiFp(this.configuration)
      .getModerationAppsModerationAppsGet(
        newSubmissions,
        limit,
        offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Approve or reject the moderation request with a comment. If all requests for a job are approved, the job is marked as successful in flat-manager.
   * @summary Submit Review
   * @param {number} id
   * @param {Review} review
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModerationApi
   */
  public submitReviewModerationRequestsIdReviewPost(
    id: number,
    review: Review,
    options?: AxiosRequestConfig,
  ) {
    return ModerationApiFp(this.configuration)
      .submitReviewModerationRequestsIdReviewPost(id, review, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Submit Review Request
   * @param {ReviewRequest} reviewRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModerationApi
   */
  public submitReviewRequestModerationSubmitReviewRequestPost(
    reviewRequest: ReviewRequest,
    options?: AxiosRequestConfig,
  ) {
    return ModerationApiFp(this.configuration)
      .submitReviewRequestModerationSubmitReviewRequestPost(
        reviewRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
