/* tslint:disable */
/* eslint-disable */
/**
 * Flathub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration"
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common"
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base"
// @ts-ignore
import { AppOfTheDay } from "../model"
// @ts-ignore
import { AppsOfTheWeek } from "../model"
// @ts-ignore
import { HTTPValidationError } from "../model"
// @ts-ignore
import { UpsertAppOfTheWeek } from "../model"
/**
 * AppPicksApi - axios parameter creator
 * @export
 */
export const AppPicksApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get App Of The Day
     * @param {string} date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppOfTheDayAppPicksAppOfTheDayDateGet: async (
      date: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'date' is not null or undefined
      assertParamExists(
        "getAppOfTheDayAppPicksAppOfTheDayDateGet",
        "date",
        date,
      )
      const localVarPath = `/app-picks/app-of-the-day/{date}`.replace(
        `{${"date"}}`,
        encodeURIComponent(String(date)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Returns apps of the week
     * @summary Get App Of The Week
     * @param {string} date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppOfTheWeekAppPicksAppsOfTheWeekDateGet: async (
      date: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'date' is not null or undefined
      assertParamExists(
        "getAppOfTheWeekAppPicksAppsOfTheWeekDateGet",
        "date",
        date,
      )
      const localVarPath = `/app-picks/apps-of-the-week/{date}`.replace(
        `{${"date"}}`,
        encodeURIComponent(String(date)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Sets an app of the week
     * @summary Set App Of The Week
     * @param {UpsertAppOfTheWeek} upsertAppOfTheWeek
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAppOfTheWeekAppPicksAppOfTheWeekPost: async (
      upsertAppOfTheWeek: UpsertAppOfTheWeek,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'upsertAppOfTheWeek' is not null or undefined
      assertParamExists(
        "setAppOfTheWeekAppPicksAppOfTheWeekPost",
        "upsertAppOfTheWeek",
        upsertAppOfTheWeek,
      )
      const localVarPath = `/app-picks/app-of-the-week`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        upsertAppOfTheWeek,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AppPicksApi - functional programming interface
 * @export
 */
export const AppPicksApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AppPicksApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get App Of The Day
     * @param {string} date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAppOfTheDayAppPicksAppOfTheDayDateGet(
      date: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppOfTheDay>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAppOfTheDayAppPicksAppOfTheDayDateGet(
          date,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Returns apps of the week
     * @summary Get App Of The Week
     * @param {string} date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAppOfTheWeekAppPicksAppsOfTheWeekDateGet(
      date: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsOfTheWeek>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAppOfTheWeekAppPicksAppsOfTheWeekDateGet(
          date,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Sets an app of the week
     * @summary Set App Of The Week
     * @param {UpsertAppOfTheWeek} upsertAppOfTheWeek
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setAppOfTheWeekAppPicksAppOfTheWeekPost(
      upsertAppOfTheWeek: UpsertAppOfTheWeek,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.setAppOfTheWeekAppPicksAppOfTheWeekPost(
          upsertAppOfTheWeek,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * AppPicksApi - factory interface
 * @export
 */
export const AppPicksApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AppPicksApiFp(configuration)
  return {
    /**
     *
     * @summary Get App Of The Day
     * @param {string} date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppOfTheDayAppPicksAppOfTheDayDateGet(
      date: string,
      options?: any,
    ): AxiosPromise<AppOfTheDay> {
      return localVarFp
        .getAppOfTheDayAppPicksAppOfTheDayDateGet(date, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Returns apps of the week
     * @summary Get App Of The Week
     * @param {string} date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppOfTheWeekAppPicksAppsOfTheWeekDateGet(
      date: string,
      options?: any,
    ): AxiosPromise<AppsOfTheWeek> {
      return localVarFp
        .getAppOfTheWeekAppPicksAppsOfTheWeekDateGet(date, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Sets an app of the week
     * @summary Set App Of The Week
     * @param {UpsertAppOfTheWeek} upsertAppOfTheWeek
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAppOfTheWeekAppPicksAppOfTheWeekPost(
      upsertAppOfTheWeek: UpsertAppOfTheWeek,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .setAppOfTheWeekAppPicksAppOfTheWeekPost(upsertAppOfTheWeek, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AppPicksApi - object-oriented interface
 * @export
 * @class AppPicksApi
 * @extends {BaseAPI}
 */
export class AppPicksApi extends BaseAPI {
  /**
   *
   * @summary Get App Of The Day
   * @param {string} date
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppPicksApi
   */
  public getAppOfTheDayAppPicksAppOfTheDayDateGet(
    date: string,
    options?: AxiosRequestConfig,
  ) {
    return AppPicksApiFp(this.configuration)
      .getAppOfTheDayAppPicksAppOfTheDayDateGet(date, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Returns apps of the week
   * @summary Get App Of The Week
   * @param {string} date
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppPicksApi
   */
  public getAppOfTheWeekAppPicksAppsOfTheWeekDateGet(
    date: string,
    options?: AxiosRequestConfig,
  ) {
    return AppPicksApiFp(this.configuration)
      .getAppOfTheWeekAppPicksAppsOfTheWeekDateGet(date, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Sets an app of the week
   * @summary Set App Of The Week
   * @param {UpsertAppOfTheWeek} upsertAppOfTheWeek
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppPicksApi
   */
  public setAppOfTheWeekAppPicksAppOfTheWeekPost(
    upsertAppOfTheWeek: UpsertAppOfTheWeek,
    options?: AxiosRequestConfig,
  ) {
    return AppPicksApiFp(this.configuration)
      .setAppOfTheWeekAppPicksAppOfTheWeekPost(upsertAppOfTheWeek, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
