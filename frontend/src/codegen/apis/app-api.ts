/* tslint:disable */
/* eslint-disable */
/**
 * Flathub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration"
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common"
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base"
// @ts-ignore
import { HTTPValidationError } from "../model"
// @ts-ignore
import { MainCategory } from "../model"
// @ts-ignore
import { Platform } from "../model"
// @ts-ignore
import { SearchQuery } from "../model"
/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get Addons
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddonsAddonAppIdGet: async (
      appId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("getAddonsAddonAppIdGet", "appId", appId)
      const localVarPath = `/addon/{app_id}`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Appstream
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppstreamAppstreamAppIdGet: async (
      appId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("getAppstreamAppstreamAppIdGet", "appId", appId)
      const localVarPath = `/appstream/{app_id}`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoriesCategoriesGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/categories`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Category
     * @param {MainCategory} category
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoryCategoryCategoryGet: async (
      category: MainCategory,
      page?: number | null,
      perPage?: number | null,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'category' is not null or undefined
      assertParamExists("getCategoryCategoryCategoryGet", "category", category)
      const localVarPath = `/category/{category}`.replace(
        `{${"category"}}`,
        encodeURIComponent(String(category)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter["page"] = page
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Developer
     * @param {string} developer
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeveloperDeveloperDeveloperGet: async (
      developer: string,
      page?: number | null,
      perPage?: number | null,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'developer' is not null or undefined
      assertParamExists(
        "getDeveloperDeveloperDeveloperGet",
        "developer",
        developer,
      )
      const localVarPath = `/developer/{developer}`.replace(
        `{${"developer"}}`,
        encodeURIComponent(String(developer)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter["page"] = page
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Developers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDevelopersDeveloperGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/developer`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Eol Message Appid
     * @param {string} appId
     * @param {string} [branch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEolMessageAppidEolMessageAppIdGet: async (
      appId: string,
      branch?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("getEolMessageAppidEolMessageAppIdGet", "appId", appId)
      const localVarPath = `/eol/message/{app_id}`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (branch !== undefined) {
        localVarQueryParameter["branch"] = branch
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Eol Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEolMessageEolMessageGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/eol/message`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Eol Rebase Appid
     * @param {string} appId
     * @param {string} [branch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEolRebaseAppidEolRebaseAppIdGet: async (
      appId: string,
      branch?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("getEolRebaseAppidEolRebaseAppIdGet", "appId", appId)
      const localVarPath = `/eol/rebase/{app_id}`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (branch !== undefined) {
        localVarQueryParameter["branch"] = branch
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Eol Rebase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEolRebaseEolRebaseGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/eol/rebase`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Exceptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExceptionsExceptionsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/exceptions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Exceptions For App
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExceptionsForAppExceptionsAppIdGet: async (
      appId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("getExceptionsForAppExceptionsAppIdGet", "appId", appId)
      const localVarPath = `/exceptions/{app_id}`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Return a mapping from org-name to platform aliases and dependencies which are recognised by the backend.  These are used by things such as the transactions and donations APIs to address amounts to the platforms.
     * @summary Get Platforms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlatformsPlatformsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/platforms`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Popular Last Month
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPopularLastMonthPopularLastMonthGet: async (
      page?: number | null,
      perPage?: number | null,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/popular/last-month`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter["page"] = page
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Project Group
     * @param {string} projectGroup
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectGroupProjectgroupProjectGroupGet: async (
      projectGroup: string,
      page?: number | null,
      perPage?: number | null,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectGroup' is not null or undefined
      assertParamExists(
        "getProjectGroupProjectgroupProjectGroupGet",
        "projectGroup",
        projectGroup,
      )
      const localVarPath = `/projectgroup/{project_group}`.replace(
        `{${"project_group"}}`,
        encodeURIComponent(String(projectGroup)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter["page"] = page
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Project Groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectGroupsProjectgroupGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/projectgroup`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Recently Added
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyAddedCollectionRecentlyAddedGet: async (
      page?: number | null,
      perPage?: number | null,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/collection/recently-added`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter["page"] = page
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Recently Updated
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyUpdatedCollectionRecentlyUpdatedGet: async (
      page?: number | null,
      perPage?: number | null,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/collection/recently-updated`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter["page"] = page
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Runtime List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRuntimeListRuntimesGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/runtimes`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Stats For App
     * @param {string} appId
     * @param {boolean} [all]
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatsForAppStatsAppIdGet: async (
      appId: string,
      all?: boolean,
      days?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("getStatsForAppStatsAppIdGet", "appId", appId)
      const localVarPath = `/stats/{app_id}`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (all !== undefined) {
        localVarQueryParameter["all"] = all
      }

      if (days !== undefined) {
        localVarQueryParameter["days"] = days
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatsStatsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/stats`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Subcategory
     * @param {MainCategory} category
     * @param {string} subcategory
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubcategoryCategoryCategorySubcategoriesSubcategoryGet: async (
      category: MainCategory,
      subcategory: string,
      page?: number | null,
      perPage?: number | null,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'category' is not null or undefined
      assertParamExists(
        "getSubcategoryCategoryCategorySubcategoriesSubcategoryGet",
        "category",
        category,
      )
      // verify required parameter 'subcategory' is not null or undefined
      assertParamExists(
        "getSubcategoryCategoryCategorySubcategoriesSubcategoryGet",
        "subcategory",
        subcategory,
      )
      const localVarPath = `/category/{category}/subcategories/{subcategory}`
        .replace(`{${"category"}}`, encodeURIComponent(String(category)))
        .replace(`{${"subcategory"}}`, encodeURIComponent(String(subcategory)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter["page"] = page
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Summary
     * @param {string} appId
     * @param {string | null} [branch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummarySummaryAppIdGet: async (
      appId: string,
      branch?: string | null,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("getSummarySummaryAppIdGet", "appId", appId)
      const localVarPath = `/summary/{app_id}`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (branch !== undefined) {
        localVarQueryParameter["branch"] = branch
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Verified
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVerifiedCollectionVerifiedGet: async (
      page?: number | null,
      perPage?: number | null,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/collection/verified`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter["page"] = page
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List Appstream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAppstreamAppstreamGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/appstream`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Post Search
     * @param {SearchQuery} searchQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSearchSearchPost: async (
      searchQuery: SearchQuery,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'searchQuery' is not null or undefined
      assertParamExists("postSearchSearchPost", "searchQuery", searchQuery)
      const localVarPath = `/search`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        searchQuery,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get Addons
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAddonsAddonAppIdGet(
      appId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAddonsAddonAppIdGet(appId, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Appstream
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAppstreamAppstreamAppIdGet(
      appId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAppstreamAppstreamAppIdGet(
          appId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCategoriesCategoriesGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCategoriesCategoriesGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Category
     * @param {MainCategory} category
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCategoryCategoryCategoryGet(
      category: MainCategory,
      page?: number | null,
      perPage?: number | null,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCategoryCategoryCategoryGet(
          category,
          page,
          perPage,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Developer
     * @param {string} developer
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDeveloperDeveloperDeveloperGet(
      developer: string,
      page?: number | null,
      perPage?: number | null,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDeveloperDeveloperDeveloperGet(
          developer,
          page,
          perPage,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Developers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDevelopersDeveloperGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDevelopersDeveloperGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Eol Message Appid
     * @param {string} appId
     * @param {string} [branch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEolMessageAppidEolMessageAppIdGet(
      appId: string,
      branch?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEolMessageAppidEolMessageAppIdGet(
          appId,
          branch,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Eol Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEolMessageEolMessageGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<{ [key: string]: string }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEolMessageEolMessageGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Eol Rebase Appid
     * @param {string} appId
     * @param {string} [branch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEolRebaseAppidEolRebaseAppIdGet(
      appId: string,
      branch?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEolRebaseAppidEolRebaseAppIdGet(
          appId,
          branch,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Eol Rebase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEolRebaseEolRebaseGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<{ [key: string]: any }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEolRebaseEolRebaseGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Exceptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getExceptionsExceptionsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getExceptionsExceptionsGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Exceptions For App
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getExceptionsForAppExceptionsAppIdGet(
      appId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getExceptionsForAppExceptionsAppIdGet(
          appId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     * Return a mapping from org-name to platform aliases and dependencies which are recognised by the backend.  These are used by things such as the transactions and donations APIs to address amounts to the platforms.
     * @summary Get Platforms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPlatformsPlatformsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<{ [key: string]: Platform }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPlatformsPlatformsGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Popular Last Month
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPopularLastMonthPopularLastMonthGet(
      page?: number | null,
      perPage?: number | null,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPopularLastMonthPopularLastMonthGet(
          page,
          perPage,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Project Group
     * @param {string} projectGroup
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectGroupProjectgroupProjectGroupGet(
      projectGroup: string,
      page?: number | null,
      perPage?: number | null,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProjectGroupProjectgroupProjectGroupGet(
          projectGroup,
          page,
          perPage,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Project Groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectGroupsProjectgroupGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProjectGroupsProjectgroupGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Recently Added
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRecentlyAddedCollectionRecentlyAddedGet(
      page?: number | null,
      perPage?: number | null,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRecentlyAddedCollectionRecentlyAddedGet(
          page,
          perPage,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Recently Updated
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRecentlyUpdatedCollectionRecentlyUpdatedGet(
      page?: number | null,
      perPage?: number | null,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRecentlyUpdatedCollectionRecentlyUpdatedGet(
          page,
          perPage,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Runtime List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRuntimeListRuntimesGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<{ [key: string]: number }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRuntimeListRuntimesGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Stats For App
     * @param {string} appId
     * @param {boolean} [all]
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStatsForAppStatsAppIdGet(
      appId: string,
      all?: boolean,
      days?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getStatsForAppStatsAppIdGet(
          appId,
          all,
          days,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStatsStatsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getStatsStatsGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Subcategory
     * @param {MainCategory} category
     * @param {string} subcategory
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSubcategoryCategoryCategorySubcategoriesSubcategoryGet(
      category: MainCategory,
      subcategory: string,
      page?: number | null,
      perPage?: number | null,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSubcategoryCategoryCategorySubcategoriesSubcategoryGet(
          category,
          subcategory,
          page,
          perPage,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Summary
     * @param {string} appId
     * @param {string | null} [branch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSummarySummaryAppIdGet(
      appId: string,
      branch?: string | null,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSummarySummaryAppIdGet(
          appId,
          branch,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Verified
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVerifiedCollectionVerifiedGet(
      page?: number | null,
      perPage?: number | null,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getVerifiedCollectionVerifiedGet(
          page,
          perPage,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary List Appstream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listAppstreamAppstreamGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listAppstreamAppstreamGet(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Post Search
     * @param {SearchQuery} searchQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postSearchSearchPost(
      searchQuery: SearchQuery,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postSearchSearchPost(
          searchQuery,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AppApiFp(configuration)
  return {
    /**
     *
     * @summary Get Addons
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddonsAddonAppIdGet(
      appId: string,
      options?: any,
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .getAddonsAddonAppIdGet(appId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Appstream
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppstreamAppstreamAppIdGet(
      appId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getAppstreamAppstreamAppIdGet(appId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoriesCategoriesGet(options?: any): AxiosPromise<Array<string>> {
      return localVarFp
        .getCategoriesCategoriesGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Category
     * @param {MainCategory} category
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoryCategoryCategoryGet(
      category: MainCategory,
      page?: number | null,
      perPage?: number | null,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getCategoryCategoryCategoryGet(category, page, perPage, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Developer
     * @param {string} developer
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDeveloperDeveloperDeveloperGet(
      developer: string,
      page?: number | null,
      perPage?: number | null,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getDeveloperDeveloperDeveloperGet(developer, page, perPage, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Developers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDevelopersDeveloperGet(options?: any): AxiosPromise<Array<string>> {
      return localVarFp
        .getDevelopersDeveloperGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Eol Message Appid
     * @param {string} appId
     * @param {string} [branch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEolMessageAppidEolMessageAppIdGet(
      appId: string,
      branch?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .getEolMessageAppidEolMessageAppIdGet(appId, branch, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Eol Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEolMessageEolMessageGet(
      options?: any,
    ): AxiosPromise<{ [key: string]: string }> {
      return localVarFp
        .getEolMessageEolMessageGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Eol Rebase Appid
     * @param {string} appId
     * @param {string} [branch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEolRebaseAppidEolRebaseAppIdGet(
      appId: string,
      branch?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .getEolRebaseAppidEolRebaseAppIdGet(appId, branch, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Eol Rebase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEolRebaseEolRebaseGet(
      options?: any,
    ): AxiosPromise<{ [key: string]: any }> {
      return localVarFp
        .getEolRebaseEolRebaseGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Exceptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExceptionsExceptionsGet(options?: any): AxiosPromise<void> {
      return localVarFp
        .getExceptionsExceptionsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Exceptions For App
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExceptionsForAppExceptionsAppIdGet(
      appId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getExceptionsForAppExceptionsAppIdGet(appId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Return a mapping from org-name to platform aliases and dependencies which are recognised by the backend.  These are used by things such as the transactions and donations APIs to address amounts to the platforms.
     * @summary Get Platforms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlatformsPlatformsGet(
      options?: any,
    ): AxiosPromise<{ [key: string]: Platform }> {
      return localVarFp
        .getPlatformsPlatformsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Popular Last Month
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPopularLastMonthPopularLastMonthGet(
      page?: number | null,
      perPage?: number | null,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getPopularLastMonthPopularLastMonthGet(page, perPage, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Project Group
     * @param {string} projectGroup
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectGroupProjectgroupProjectGroupGet(
      projectGroup: string,
      page?: number | null,
      perPage?: number | null,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getProjectGroupProjectgroupProjectGroupGet(
          projectGroup,
          page,
          perPage,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Project Groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectGroupsProjectgroupGet(
      options?: any,
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .getProjectGroupsProjectgroupGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Recently Added
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyAddedCollectionRecentlyAddedGet(
      page?: number | null,
      perPage?: number | null,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getRecentlyAddedCollectionRecentlyAddedGet(page, perPage, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Recently Updated
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyUpdatedCollectionRecentlyUpdatedGet(
      page?: number | null,
      perPage?: number | null,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getRecentlyUpdatedCollectionRecentlyUpdatedGet(page, perPage, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Runtime List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRuntimeListRuntimesGet(
      options?: any,
    ): AxiosPromise<{ [key: string]: number }> {
      return localVarFp
        .getRuntimeListRuntimesGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Stats For App
     * @param {string} appId
     * @param {boolean} [all]
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatsForAppStatsAppIdGet(
      appId: string,
      all?: boolean,
      days?: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getStatsForAppStatsAppIdGet(appId, all, days, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatsStatsGet(options?: any): AxiosPromise<void> {
      return localVarFp
        .getStatsStatsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Subcategory
     * @param {MainCategory} category
     * @param {string} subcategory
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubcategoryCategoryCategorySubcategoriesSubcategoryGet(
      category: MainCategory,
      subcategory: string,
      page?: number | null,
      perPage?: number | null,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getSubcategoryCategoryCategorySubcategoriesSubcategoryGet(
          category,
          subcategory,
          page,
          perPage,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Summary
     * @param {string} appId
     * @param {string | null} [branch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSummarySummaryAppIdGet(
      appId: string,
      branch?: string | null,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getSummarySummaryAppIdGet(appId, branch, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Verified
     * @param {number | null} [page]
     * @param {number | null} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVerifiedCollectionVerifiedGet(
      page?: number | null,
      perPage?: number | null,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getVerifiedCollectionVerifiedGet(page, perPage, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List Appstream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAppstreamAppstreamGet(options?: any): AxiosPromise<Array<string>> {
      return localVarFp
        .listAppstreamAppstreamGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Post Search
     * @param {SearchQuery} searchQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSearchSearchPost(
      searchQuery: SearchQuery,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .postSearchSearchPost(searchQuery, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
  /**
   *
   * @summary Get Addons
   * @param {string} appId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getAddonsAddonAppIdGet(appId: string, options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getAddonsAddonAppIdGet(appId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Appstream
   * @param {string} appId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getAppstreamAppstreamAppIdGet(
    appId: string,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getAppstreamAppstreamAppIdGet(appId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Categories
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getCategoriesCategoriesGet(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getCategoriesCategoriesGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Category
   * @param {MainCategory} category
   * @param {number | null} [page]
   * @param {number | null} [perPage]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getCategoryCategoryCategoryGet(
    category: MainCategory,
    page?: number | null,
    perPage?: number | null,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getCategoryCategoryCategoryGet(category, page, perPage, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Developer
   * @param {string} developer
   * @param {number | null} [page]
   * @param {number | null} [perPage]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getDeveloperDeveloperDeveloperGet(
    developer: string,
    page?: number | null,
    perPage?: number | null,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getDeveloperDeveloperDeveloperGet(developer, page, perPage, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Developers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getDevelopersDeveloperGet(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getDevelopersDeveloperGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Eol Message Appid
   * @param {string} appId
   * @param {string} [branch]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getEolMessageAppidEolMessageAppIdGet(
    appId: string,
    branch?: string,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getEolMessageAppidEolMessageAppIdGet(appId, branch, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Eol Message
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getEolMessageEolMessageGet(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getEolMessageEolMessageGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Eol Rebase Appid
   * @param {string} appId
   * @param {string} [branch]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getEolRebaseAppidEolRebaseAppIdGet(
    appId: string,
    branch?: string,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getEolRebaseAppidEolRebaseAppIdGet(appId, branch, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Eol Rebase
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getEolRebaseEolRebaseGet(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getEolRebaseEolRebaseGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Exceptions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getExceptionsExceptionsGet(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getExceptionsExceptionsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Exceptions For App
   * @param {string} appId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getExceptionsForAppExceptionsAppIdGet(
    appId: string,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getExceptionsForAppExceptionsAppIdGet(appId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Return a mapping from org-name to platform aliases and dependencies which are recognised by the backend.  These are used by things such as the transactions and donations APIs to address amounts to the platforms.
   * @summary Get Platforms
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getPlatformsPlatformsGet(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getPlatformsPlatformsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Popular Last Month
   * @param {number | null} [page]
   * @param {number | null} [perPage]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getPopularLastMonthPopularLastMonthGet(
    page?: number | null,
    perPage?: number | null,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getPopularLastMonthPopularLastMonthGet(page, perPage, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Project Group
   * @param {string} projectGroup
   * @param {number | null} [page]
   * @param {number | null} [perPage]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getProjectGroupProjectgroupProjectGroupGet(
    projectGroup: string,
    page?: number | null,
    perPage?: number | null,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getProjectGroupProjectgroupProjectGroupGet(
        projectGroup,
        page,
        perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Project Groups
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getProjectGroupsProjectgroupGet(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getProjectGroupsProjectgroupGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Recently Added
   * @param {number | null} [page]
   * @param {number | null} [perPage]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getRecentlyAddedCollectionRecentlyAddedGet(
    page?: number | null,
    perPage?: number | null,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getRecentlyAddedCollectionRecentlyAddedGet(page, perPage, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Recently Updated
   * @param {number | null} [page]
   * @param {number | null} [perPage]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getRecentlyUpdatedCollectionRecentlyUpdatedGet(
    page?: number | null,
    perPage?: number | null,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getRecentlyUpdatedCollectionRecentlyUpdatedGet(page, perPage, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Runtime List
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getRuntimeListRuntimesGet(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getRuntimeListRuntimesGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Stats For App
   * @param {string} appId
   * @param {boolean} [all]
   * @param {number} [days]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getStatsForAppStatsAppIdGet(
    appId: string,
    all?: boolean,
    days?: number,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getStatsForAppStatsAppIdGet(appId, all, days, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getStatsStatsGet(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getStatsStatsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Subcategory
   * @param {MainCategory} category
   * @param {string} subcategory
   * @param {number | null} [page]
   * @param {number | null} [perPage]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getSubcategoryCategoryCategorySubcategoriesSubcategoryGet(
    category: MainCategory,
    subcategory: string,
    page?: number | null,
    perPage?: number | null,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getSubcategoryCategoryCategorySubcategoriesSubcategoryGet(
        category,
        subcategory,
        page,
        perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Summary
   * @param {string} appId
   * @param {string | null} [branch]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getSummarySummaryAppIdGet(
    appId: string,
    branch?: string | null,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getSummarySummaryAppIdGet(appId, branch, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Verified
   * @param {number | null} [page]
   * @param {number | null} [perPage]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getVerifiedCollectionVerifiedGet(
    page?: number | null,
    perPage?: number | null,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .getVerifiedCollectionVerifiedGet(page, perPage, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List Appstream
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public listAppstreamAppstreamGet(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .listAppstreamAppstreamGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Post Search
   * @param {SearchQuery} searchQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public postSearchSearchPost(
    searchQuery: SearchQuery,
    options?: AxiosRequestConfig,
  ) {
    return AppApiFp(this.configuration)
      .postSearchSearchPost(searchQuery, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
