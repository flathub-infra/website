/* tslint:disable */
/* eslint-disable */
/**
 * Flathub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration"
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common"
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base"
// @ts-ignore
import { DevelopersResponse } from "../model"
// @ts-ignore
import { HTTPValidationError } from "../model"
// @ts-ignore
import { InviteStatus } from "../model"
/**
 * InviteApi - axios parameter creator
 * @export
 */
export const InviteApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Accept Invite
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteInvitesAppIdAcceptPost: async (
      appId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("acceptInviteInvitesAppIdAcceptPost", "appId", appId)
      const localVarPath = `/invites/{app_id}/accept`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Decline Invite
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineInviteInvitesAppIdDeclinePost: async (
      appId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("declineInviteInvitesAppIdDeclinePost", "appId", appId)
      const localVarPath = `/invites/{app_id}/decline`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Developers
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDevelopersInvitesAppIdDevelopersGet: async (
      appId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists(
        "getDevelopersInvitesAppIdDevelopersGet",
        "appId",
        appId,
      )
      const localVarPath = `/invites/{app_id}/developers`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Invite Status
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInviteStatusInvitesAppIdGet: async (
      appId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("getInviteStatusInvitesAppIdGet", "appId", appId)
      const localVarPath = `/invites/{app_id}`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Invite Developer
     * @param {string} appId
     * @param {string} inviteCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteDeveloperInvitesAppIdInvitePost: async (
      appId: string,
      inviteCode: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("inviteDeveloperInvitesAppIdInvitePost", "appId", appId)
      // verify required parameter 'inviteCode' is not null or undefined
      assertParamExists(
        "inviteDeveloperInvitesAppIdInvitePost",
        "inviteCode",
        inviteCode,
      )
      const localVarPath = `/invites/{app_id}/invite`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (inviteCode !== undefined) {
        localVarQueryParameter["invite_code"] = inviteCode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Leave Team
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveTeamInvitesAppIdLeavePost: async (
      appId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("leaveTeamInvitesAppIdLeavePost", "appId", appId)
      const localVarPath = `/invites/{app_id}/leave`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Developer
     * @param {string} appId
     * @param {number} developerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDeveloperInvitesAppIdRemoveDeveloperPost: async (
      appId: string,
      developerId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists(
        "removeDeveloperInvitesAppIdRemoveDeveloperPost",
        "appId",
        appId,
      )
      // verify required parameter 'developerId' is not null or undefined
      assertParamExists(
        "removeDeveloperInvitesAppIdRemoveDeveloperPost",
        "developerId",
        developerId,
      )
      const localVarPath = `/invites/{app_id}/remove-developer`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (developerId !== undefined) {
        localVarQueryParameter["developer_id"] = developerId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Revoke Invite
     * @param {string} appId
     * @param {number} inviteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeInviteInvitesAppIdRevokePost: async (
      appId: string,
      inviteId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("revokeInviteInvitesAppIdRevokePost", "appId", appId)
      // verify required parameter 'inviteId' is not null or undefined
      assertParamExists(
        "revokeInviteInvitesAppIdRevokePost",
        "inviteId",
        inviteId,
      )
      const localVarPath = `/invites/{app_id}/revoke`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (inviteId !== undefined) {
        localVarQueryParameter["invite_id"] = inviteId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * InviteApi - functional programming interface
 * @export
 */
export const InviteApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = InviteApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Accept Invite
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async acceptInviteInvitesAppIdAcceptPost(
      appId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.acceptInviteInvitesAppIdAcceptPost(
          appId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Decline Invite
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async declineInviteInvitesAppIdDeclinePost(
      appId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.declineInviteInvitesAppIdDeclinePost(
          appId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Developers
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDevelopersInvitesAppIdDevelopersGet(
      appId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DevelopersResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDevelopersInvitesAppIdDevelopersGet(
          appId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Get Invite Status
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInviteStatusInvitesAppIdGet(
      appId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteStatus>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getInviteStatusInvitesAppIdGet(
          appId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Invite Developer
     * @param {string} appId
     * @param {string} inviteCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async inviteDeveloperInvitesAppIdInvitePost(
      appId: string,
      inviteCode: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.inviteDeveloperInvitesAppIdInvitePost(
          appId,
          inviteCode,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Leave Team
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async leaveTeamInvitesAppIdLeavePost(
      appId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.leaveTeamInvitesAppIdLeavePost(
          appId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Remove Developer
     * @param {string} appId
     * @param {number} developerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeDeveloperInvitesAppIdRemoveDeveloperPost(
      appId: string,
      developerId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.removeDeveloperInvitesAppIdRemoveDeveloperPost(
          appId,
          developerId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @summary Revoke Invite
     * @param {string} appId
     * @param {number} inviteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async revokeInviteInvitesAppIdRevokePost(
      appId: string,
      inviteId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.revokeInviteInvitesAppIdRevokePost(
          appId,
          inviteId,
          options,
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * InviteApi - factory interface
 * @export
 */
export const InviteApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = InviteApiFp(configuration)
  return {
    /**
     *
     * @summary Accept Invite
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteInvitesAppIdAcceptPost(
      appId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .acceptInviteInvitesAppIdAcceptPost(appId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Decline Invite
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineInviteInvitesAppIdDeclinePost(
      appId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .declineInviteInvitesAppIdDeclinePost(appId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Developers
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDevelopersInvitesAppIdDevelopersGet(
      appId: string,
      options?: any,
    ): AxiosPromise<DevelopersResponse> {
      return localVarFp
        .getDevelopersInvitesAppIdDevelopersGet(appId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Invite Status
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInviteStatusInvitesAppIdGet(
      appId: string,
      options?: any,
    ): AxiosPromise<InviteStatus> {
      return localVarFp
        .getInviteStatusInvitesAppIdGet(appId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Invite Developer
     * @param {string} appId
     * @param {string} inviteCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteDeveloperInvitesAppIdInvitePost(
      appId: string,
      inviteCode: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .inviteDeveloperInvitesAppIdInvitePost(appId, inviteCode, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Leave Team
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveTeamInvitesAppIdLeavePost(
      appId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .leaveTeamInvitesAppIdLeavePost(appId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Remove Developer
     * @param {string} appId
     * @param {number} developerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDeveloperInvitesAppIdRemoveDeveloperPost(
      appId: string,
      developerId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .removeDeveloperInvitesAppIdRemoveDeveloperPost(
          appId,
          developerId,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Revoke Invite
     * @param {string} appId
     * @param {number} inviteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeInviteInvitesAppIdRevokePost(
      appId: string,
      inviteId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .revokeInviteInvitesAppIdRevokePost(appId, inviteId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * InviteApi - object-oriented interface
 * @export
 * @class InviteApi
 * @extends {BaseAPI}
 */
export class InviteApi extends BaseAPI {
  /**
   *
   * @summary Accept Invite
   * @param {string} appId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InviteApi
   */
  public acceptInviteInvitesAppIdAcceptPost(
    appId: string,
    options?: AxiosRequestConfig,
  ) {
    return InviteApiFp(this.configuration)
      .acceptInviteInvitesAppIdAcceptPost(appId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Decline Invite
   * @param {string} appId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InviteApi
   */
  public declineInviteInvitesAppIdDeclinePost(
    appId: string,
    options?: AxiosRequestConfig,
  ) {
    return InviteApiFp(this.configuration)
      .declineInviteInvitesAppIdDeclinePost(appId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Developers
   * @param {string} appId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InviteApi
   */
  public getDevelopersInvitesAppIdDevelopersGet(
    appId: string,
    options?: AxiosRequestConfig,
  ) {
    return InviteApiFp(this.configuration)
      .getDevelopersInvitesAppIdDevelopersGet(appId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Invite Status
   * @param {string} appId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InviteApi
   */
  public getInviteStatusInvitesAppIdGet(
    appId: string,
    options?: AxiosRequestConfig,
  ) {
    return InviteApiFp(this.configuration)
      .getInviteStatusInvitesAppIdGet(appId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Invite Developer
   * @param {string} appId
   * @param {string} inviteCode
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InviteApi
   */
  public inviteDeveloperInvitesAppIdInvitePost(
    appId: string,
    inviteCode: string,
    options?: AxiosRequestConfig,
  ) {
    return InviteApiFp(this.configuration)
      .inviteDeveloperInvitesAppIdInvitePost(appId, inviteCode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Leave Team
   * @param {string} appId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InviteApi
   */
  public leaveTeamInvitesAppIdLeavePost(
    appId: string,
    options?: AxiosRequestConfig,
  ) {
    return InviteApiFp(this.configuration)
      .leaveTeamInvitesAppIdLeavePost(appId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove Developer
   * @param {string} appId
   * @param {number} developerId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InviteApi
   */
  public removeDeveloperInvitesAppIdRemoveDeveloperPost(
    appId: string,
    developerId: number,
    options?: AxiosRequestConfig,
  ) {
    return InviteApiFp(this.configuration)
      .removeDeveloperInvitesAppIdRemoveDeveloperPost(
        appId,
        developerId,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Revoke Invite
   * @param {string} appId
   * @param {number} inviteId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InviteApi
   */
  public revokeInviteInvitesAppIdRevokePost(
    appId: string,
    inviteId: number,
    options?: AxiosRequestConfig,
  ) {
    return InviteApiFp(this.configuration)
      .revokeInviteInvitesAppIdRevokePost(appId, inviteId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
