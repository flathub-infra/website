/* tslint:disable */
/* eslint-disable */
/**
 * Flathub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration"
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common"
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base"
// @ts-ignore
import { HTTPValidationError } from "../model"
/**
 * CompatApi - axios parameter creator
 * @export
 */
export const CompatApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppsCompatAppsGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/compat/apps`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Apps In Category
     * @param {string} category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppsInCategoryCompatAppsCategoryCategoryGet: async (
      category: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'category' is not null or undefined
      assertParamExists(
        "getAppsInCategoryCompatAppsCategoryCategoryGet",
        "category",
        category,
      )
      const localVarPath = `/compat/apps/category/{category}`.replace(
        `{${"category"}}`,
        encodeURIComponent(String(category)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Popular Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPopularAppsCompatAppsCollectionPopular50Get: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/compat/apps/collection/popular/50`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Popular Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPopularAppsCompatAppsCollectionPopularGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/compat/apps/collection/popular`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Recently Added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyAddedCompatAppsCollectionNew50Get: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/compat/apps/collection/new/50`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Recently Added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyAddedCompatAppsCollectionNewGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/compat/apps/collection/new`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Recently Updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated50Get: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/compat/apps/collection/recently-updated/50`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Recently Updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/compat/apps/collection/recently-updated`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Search
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearchCompatAppsSearchQueryGet: async (
      query: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'query' is not null or undefined
      assertParamExists("getSearchCompatAppsSearchQueryGet", "query", query)
      const localVarPath = `/compat/apps/search/{query}`.replace(
        `{${"query"}}`,
        encodeURIComponent(String(query)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get Single App
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSingleAppCompatAppsAppIdGet: async (
      appId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appId' is not null or undefined
      assertParamExists("getSingleAppCompatAppsAppIdGet", "appId", appId)
      const localVarPath = `/compat/apps/{app_id}`.replace(
        `{${"app_id"}}`,
        encodeURIComponent(String(appId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CompatApi - functional programming interface
 * @export
 */
export const CompatApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CompatApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAppsCompatAppsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAppsCompatAppsGet(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap["CompatApi.getAppsCompatAppsGet"]?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get Apps In Category
     * @param {string} category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAppsInCategoryCompatAppsCategoryCategoryGet(
      category: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAppsInCategoryCompatAppsCategoryCategoryGet(
          category,
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          "CompatApi.getAppsInCategoryCompatAppsCategoryCategoryGet"
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get Popular Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPopularAppsCompatAppsCollectionPopular50Get(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPopularAppsCompatAppsCollectionPopular50Get(
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          "CompatApi.getPopularAppsCompatAppsCollectionPopular50Get"
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get Popular Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPopularAppsCompatAppsCollectionPopularGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPopularAppsCompatAppsCollectionPopularGet(
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          "CompatApi.getPopularAppsCompatAppsCollectionPopularGet"
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get Recently Added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRecentlyAddedCompatAppsCollectionNew50Get(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRecentlyAddedCompatAppsCollectionNew50Get(
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          "CompatApi.getRecentlyAddedCompatAppsCollectionNew50Get"
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get Recently Added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRecentlyAddedCompatAppsCollectionNewGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRecentlyAddedCompatAppsCollectionNewGet(
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          "CompatApi.getRecentlyAddedCompatAppsCollectionNewGet"
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get Recently Updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated50Get(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated50Get(
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          "CompatApi.getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated50Get"
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get Recently Updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet(
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          "CompatApi.getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet"
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get Search
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSearchCompatAppsSearchQueryGet(
      query: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSearchCompatAppsSearchQueryGet(
          query,
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap["CompatApi.getSearchCompatAppsSearchQueryGet"]?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get Single App
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSingleAppCompatAppsAppIdGet(
      appId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSingleAppCompatAppsAppIdGet(
          appId,
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap["CompatApi.getSingleAppCompatAppsAppIdGet"]?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * CompatApi - factory interface
 * @export
 */
export const CompatApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CompatApiFp(configuration)
  return {
    /**
     *
     * @summary Get Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppsCompatAppsGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .getAppsCompatAppsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Apps In Category
     * @param {string} category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppsInCategoryCompatAppsCategoryCategoryGet(
      category: string,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .getAppsInCategoryCompatAppsCategoryCategoryGet(category, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Popular Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPopularAppsCompatAppsCollectionPopular50Get(
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .getPopularAppsCompatAppsCollectionPopular50Get(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Popular Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPopularAppsCompatAppsCollectionPopularGet(
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .getPopularAppsCompatAppsCollectionPopularGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Recently Added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyAddedCompatAppsCollectionNew50Get(
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .getRecentlyAddedCompatAppsCollectionNew50Get(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Recently Added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyAddedCompatAppsCollectionNewGet(
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .getRecentlyAddedCompatAppsCollectionNewGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Recently Updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated50Get(
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated50Get(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Recently Updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet(
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Search
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearchCompatAppsSearchQueryGet(
      query: string,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .getSearchCompatAppsSearchQueryGet(query, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get Single App
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSingleAppCompatAppsAppIdGet(
      appId: string,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .getSingleAppCompatAppsAppIdGet(appId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CompatApi - object-oriented interface
 * @export
 * @class CompatApi
 * @extends {BaseAPI}
 */
export class CompatApi extends BaseAPI {
  /**
   *
   * @summary Get Apps
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompatApi
   */
  public getAppsCompatAppsGet(options?: RawAxiosRequestConfig) {
    return CompatApiFp(this.configuration)
      .getAppsCompatAppsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Apps In Category
   * @param {string} category
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompatApi
   */
  public getAppsInCategoryCompatAppsCategoryCategoryGet(
    category: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CompatApiFp(this.configuration)
      .getAppsInCategoryCompatAppsCategoryCategoryGet(category, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Popular Apps
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompatApi
   */
  public getPopularAppsCompatAppsCollectionPopular50Get(
    options?: RawAxiosRequestConfig,
  ) {
    return CompatApiFp(this.configuration)
      .getPopularAppsCompatAppsCollectionPopular50Get(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Popular Apps
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompatApi
   */
  public getPopularAppsCompatAppsCollectionPopularGet(
    options?: RawAxiosRequestConfig,
  ) {
    return CompatApiFp(this.configuration)
      .getPopularAppsCompatAppsCollectionPopularGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Recently Added
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompatApi
   */
  public getRecentlyAddedCompatAppsCollectionNew50Get(
    options?: RawAxiosRequestConfig,
  ) {
    return CompatApiFp(this.configuration)
      .getRecentlyAddedCompatAppsCollectionNew50Get(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Recently Added
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompatApi
   */
  public getRecentlyAddedCompatAppsCollectionNewGet(
    options?: RawAxiosRequestConfig,
  ) {
    return CompatApiFp(this.configuration)
      .getRecentlyAddedCompatAppsCollectionNewGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Recently Updated
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompatApi
   */
  public getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated50Get(
    options?: RawAxiosRequestConfig,
  ) {
    return CompatApiFp(this.configuration)
      .getRecentlyUpdatedCompatAppsCollectionRecentlyUpdated50Get(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Recently Updated
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompatApi
   */
  public getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet(
    options?: RawAxiosRequestConfig,
  ) {
    return CompatApiFp(this.configuration)
      .getRecentlyUpdatedCompatAppsCollectionRecentlyUpdatedGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Search
   * @param {string} query
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompatApi
   */
  public getSearchCompatAppsSearchQueryGet(
    query: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CompatApiFp(this.configuration)
      .getSearchCompatAppsSearchQueryGet(query, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get Single App
   * @param {string} appId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompatApi
   */
  public getSingleAppCompatAppsAppIdGet(
    appId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CompatApiFp(this.configuration)
      .getSingleAppCompatAppsAppIdGet(appId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
