/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import type {
  FailedByGuideline,
  QualityModerationDashboardResponse,
  QualityModerationResponse,
  QualityModerationStatus,
} from ".././model"

export const getGetQualityModerationStatusQualityModerationStatusGetResponseMock =
  (
    overrideResponse: Partial<QualityModerationDashboardResponse> = {},
  ): QualityModerationDashboardResponse => ({
    apps: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      appstream: faker.helpers.arrayElement([
        faker.helpers.arrayElement([{}, null]),
        undefined,
      ]),
      id: faker.word.sample(),
      installs_last_7_days: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      quality_moderation_status: {
        last_updated: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        not_passed: faker.number.int({ min: undefined, max: undefined }),
        passed: faker.number.int({ min: undefined, max: undefined }),
        passes: faker.datatype.boolean(),
        review_requested_at: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          undefined,
        ]),
        unrated: faker.number.int({ min: undefined, max: undefined }),
      },
    })),
    pagination: {
      page: faker.number.int({ min: undefined, max: undefined }),
      page_size: faker.number.int({ min: undefined, max: undefined }),
      total: faker.number.int({ min: undefined, max: undefined }),
      total_pages: faker.number.int({ min: undefined, max: undefined }),
    },
    ...overrideResponse,
  })

export const getGetQualityModerationStatsQualityModerationFailedByGuidelineGetResponseMock =
  (): FailedByGuideline[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      guideline_id: faker.word.sample(),
      not_passed: faker.number.int({ min: undefined, max: undefined }),
    }))

export const getGetQualityModerationForAppQualityModerationAppIdGetResponseMock =
  (
    overrideResponse: Partial<QualityModerationResponse> = {},
  ): QualityModerationResponse => ({
    guidelines: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      app_id: faker.word.sample(),
      comment: faker.helpers.arrayElement([faker.word.sample(), null]),
      guideline: {
        category: faker.word.sample(),
        id: faker.word.sample(),
        needed_to_pass_since: `${faker.date.past().toISOString().split(".")[0]}Z`,
        read_only: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        url: faker.word.sample(),
      },
      guideline_id: faker.word.sample(),
      needed_to_pass_since: `${faker.date.past().toISOString().split(".")[0]}Z`,
      passed: faker.helpers.arrayElement([faker.datatype.boolean(), null]),
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_by: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
    })),
    is_fullscreen_app: faker.datatype.boolean(),
    review_requested_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    ...overrideResponse,
  })

export const getGetQualityModerationStatusForAppQualityModerationAppIdStatusGetResponseMock =
  (
    overrideResponse: Partial<QualityModerationStatus> = {},
  ): QualityModerationStatus => ({
    last_updated: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    not_passed: faker.number.int({ min: undefined, max: undefined }),
    passed: faker.number.int({ min: undefined, max: undefined }),
    passes: faker.datatype.boolean(),
    review_requested_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    unrated: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  })

export const getGetQualityModerationStatusQualityModerationStatusGetMockHandler =
  (
    overrideResponse?:
      | QualityModerationDashboardResponse
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => QualityModerationDashboardResponse),
  ) => {
    return http.get("*/quality-moderation/status", async (info) => {
      await delay(1000)
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? overrideResponse(info)
              : overrideResponse
            : getGetQualityModerationStatusQualityModerationStatusGetResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      )
    })
  }

export const getGetQualityModerationStatsQualityModerationFailedByGuidelineGetMockHandler =
  (
    overrideResponse?:
      | FailedByGuideline[]
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => FailedByGuideline[]),
  ) => {
    return http.get(
      "*/quality-moderation/failed-by-guideline",
      async (info) => {
        await delay(1000)
        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? overrideResponse(info)
                : overrideResponse
              : getGetQualityModerationStatsQualityModerationFailedByGuidelineGetResponseMock(),
          ),
          {
            status: 200,
            headers: {
              "Content-Type": "application/json",
            },
          },
        )
      },
    )
  }

export const getGetQualityModerationForAppQualityModerationAppIdGetMockHandler =
  (
    overrideResponse?:
      | QualityModerationResponse
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => QualityModerationResponse),
  ) => {
    return http.get("*/quality-moderation/:appId", async (info) => {
      await delay(1000)
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? overrideResponse(info)
              : overrideResponse
            : getGetQualityModerationForAppQualityModerationAppIdGetResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      )
    })
  }

export const getSetQualityModerationForAppQualityModerationAppIdPostMockHandler =
  () => {
    return http.post("*/quality-moderation/:appId", async () => {
      await delay(1000)
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      })
    })
  }

export const getGetQualityModerationStatusForAppQualityModerationAppIdStatusGetMockHandler =
  (
    overrideResponse?:
      | QualityModerationStatus
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => QualityModerationStatus),
  ) => {
    return http.get("*/quality-moderation/:appId/status", async (info) => {
      await delay(1000)
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? overrideResponse(info)
              : overrideResponse
            : getGetQualityModerationStatusForAppQualityModerationAppIdStatusGetResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      )
    })
  }

export const getRequestReviewForAppQualityModerationAppIdRequestReviewPostMockHandler =
  () => {
    return http.post("*/quality-moderation/:appId/request-review", async () => {
      await delay(1000)
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      })
    })
  }

export const getDeleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteMockHandler =
  () => {
    return http.delete(
      "*/quality-moderation/:appId/request-review",
      async () => {
        await delay(1000)
        return new HttpResponse(null, {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        })
      },
    )
  }

export const getSetFullscreenAppQualityModerationAppIdFullscreenPostMockHandler =
  () => {
    return http.post("*/quality-moderation/:appId/fullscreen", async () => {
      await delay(1000)
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      })
    })
  }
export const getQualityModerationMock = () => [
  getGetQualityModerationStatusQualityModerationStatusGetMockHandler(),
  getGetQualityModerationStatsQualityModerationFailedByGuidelineGetMockHandler(),
  getGetQualityModerationForAppQualityModerationAppIdGetMockHandler(),
  getSetQualityModerationForAppQualityModerationAppIdPostMockHandler(),
  getGetQualityModerationStatusForAppQualityModerationAppIdStatusGetMockHandler(),
  getRequestReviewForAppQualityModerationAppIdRequestReviewPostMockHandler(),
  getDeleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteMockHandler(),
  getSetFullscreenAppQualityModerationAppIdFullscreenPostMockHandler(),
]
