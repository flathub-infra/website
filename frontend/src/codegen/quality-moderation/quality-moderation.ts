/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  AppPickRecommendationsResponse,
  FailedByGuideline,
  GetAppPickRecommendationsQualityModerationAppPickRecommendationsGetParams,
  GetPassingQualityAppsQualityModerationPassingAppsGetParams,
  GetQualityModerationStatusQualityModerationStatusGetParams,
  QualityModerationDashboardResponse,
  QualityModerationResponse,
  QualityModerationStatus,
  SetFullscreenAppQualityModerationAppIdFullscreenPostParams,
  SimpleQualityModerationResponse,
  UpsertQualityModeration,
} from ".././model"

/**
 * @summary Get Quality Moderation Status
 */
export type getQualityModerationStatusQualityModerationStatusGetResponse200 = {
  data: QualityModerationDashboardResponse
  status: 200
}

export type getQualityModerationStatusQualityModerationStatusGetResponse400 = {
  data: null
  status: 400
}

export type getQualityModerationStatusQualityModerationStatusGetResponse401 = {
  data: null
  status: 401
}

export type getQualityModerationStatusQualityModerationStatusGetResponse403 = {
  data: null
  status: 403
}

export type getQualityModerationStatusQualityModerationStatusGetResponse422 = {
  data: null
  status: 422
}

export type getQualityModerationStatusQualityModerationStatusGetResponse500 = {
  data: null
  status: 500
}

export type getQualityModerationStatusQualityModerationStatusGetResponseComposite =

    | getQualityModerationStatusQualityModerationStatusGetResponse200
    | getQualityModerationStatusQualityModerationStatusGetResponse400
    | getQualityModerationStatusQualityModerationStatusGetResponse401
    | getQualityModerationStatusQualityModerationStatusGetResponse403
    | getQualityModerationStatusQualityModerationStatusGetResponse422
    | getQualityModerationStatusQualityModerationStatusGetResponse500

export type getQualityModerationStatusQualityModerationStatusGetResponse =
  getQualityModerationStatusQualityModerationStatusGetResponseComposite & {
    headers: Headers
  }

export const getGetQualityModerationStatusQualityModerationStatusGetUrl = (
  params?: GetQualityModerationStatusQualityModerationStatusGetParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/status?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/status`
}

export const getQualityModerationStatusQualityModerationStatusGet = async (
  params?: GetQualityModerationStatusQualityModerationStatusGetParams,
  options?: RequestInit,
): Promise<getQualityModerationStatusQualityModerationStatusGetResponse> => {
  const res = await fetch(
    getGetQualityModerationStatusQualityModerationStatusGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getQualityModerationStatusQualityModerationStatusGetResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getQualityModerationStatusQualityModerationStatusGetResponse
}

export const getGetQualityModerationStatusQualityModerationStatusGetQueryKey = (
  params?: GetQualityModerationStatusQualityModerationStatusGetParams,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/status`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetQualityModerationStatusQualityModerationStatusGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof getQualityModerationStatusQualityModerationStatusGet>
    >,
    TError = null | null | null | null | null,
  >(
    params?: GetQualityModerationStatusQualityModerationStatusGetParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getQualityModerationStatusQualityModerationStatusGet
            >
          >,
          TError,
          TData
        >
      >
      fetch?: RequestInit
    },
  ) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetQualityModerationStatusQualityModerationStatusGetQueryKey(params)

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof getQualityModerationStatusQualityModerationStatusGet>
      >
    > = ({ signal }) =>
      getQualityModerationStatusQualityModerationStatusGet(params, {
        signal,
        ...fetchOptions,
      })

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
      Awaited<
        ReturnType<typeof getQualityModerationStatusQualityModerationStatusGet>
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
  }

export type GetQualityModerationStatusQualityModerationStatusGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getQualityModerationStatusQualityModerationStatusGet>
    >
  >
export type GetQualityModerationStatusQualityModerationStatusGetQueryError =
  | null
  | null
  | null
  | null
  | null

export function useGetQualityModerationStatusQualityModerationStatusGet<
  TData = Awaited<
    ReturnType<typeof getQualityModerationStatusQualityModerationStatusGet>
  >,
  TError = null | null | null | null | null,
>(
  params:
    | undefined
    | GetQualityModerationStatusQualityModerationStatusGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatusQualityModerationStatusGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getQualityModerationStatusQualityModerationStatusGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getQualityModerationStatusQualityModerationStatusGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetQualityModerationStatusQualityModerationStatusGet<
  TData = Awaited<
    ReturnType<typeof getQualityModerationStatusQualityModerationStatusGet>
  >,
  TError = null | null | null | null | null,
>(
  params?: GetQualityModerationStatusQualityModerationStatusGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatusQualityModerationStatusGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getQualityModerationStatusQualityModerationStatusGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getQualityModerationStatusQualityModerationStatusGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetQualityModerationStatusQualityModerationStatusGet<
  TData = Awaited<
    ReturnType<typeof getQualityModerationStatusQualityModerationStatusGet>
  >,
  TError = null | null | null | null | null,
>(
  params?: GetQualityModerationStatusQualityModerationStatusGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatusQualityModerationStatusGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Quality Moderation Status
 */

export function useGetQualityModerationStatusQualityModerationStatusGet<
  TData = Awaited<
    ReturnType<typeof getQualityModerationStatusQualityModerationStatusGet>
  >,
  TError = null | null | null | null | null,
>(
  params?: GetQualityModerationStatusQualityModerationStatusGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatusQualityModerationStatusGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetQualityModerationStatusQualityModerationStatusGetQueryOptions(
      params,
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Passing Quality Apps
 */
export type getPassingQualityAppsQualityModerationPassingAppsGetResponse200 = {
  data: SimpleQualityModerationResponse
  status: 200
}

export type getPassingQualityAppsQualityModerationPassingAppsGetResponse400 = {
  data: null
  status: 400
}

export type getPassingQualityAppsQualityModerationPassingAppsGetResponse422 = {
  data: null
  status: 422
}

export type getPassingQualityAppsQualityModerationPassingAppsGetResponse500 = {
  data: null
  status: 500
}

export type getPassingQualityAppsQualityModerationPassingAppsGetResponseComposite =

    | getPassingQualityAppsQualityModerationPassingAppsGetResponse200
    | getPassingQualityAppsQualityModerationPassingAppsGetResponse400
    | getPassingQualityAppsQualityModerationPassingAppsGetResponse422
    | getPassingQualityAppsQualityModerationPassingAppsGetResponse500

export type getPassingQualityAppsQualityModerationPassingAppsGetResponse =
  getPassingQualityAppsQualityModerationPassingAppsGetResponseComposite & {
    headers: Headers
  }

export const getGetPassingQualityAppsQualityModerationPassingAppsGetUrl = (
  params?: GetPassingQualityAppsQualityModerationPassingAppsGetParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/passing-apps?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/passing-apps`
}

export const getPassingQualityAppsQualityModerationPassingAppsGet = async (
  params?: GetPassingQualityAppsQualityModerationPassingAppsGetParams,
  options?: RequestInit,
): Promise<getPassingQualityAppsQualityModerationPassingAppsGetResponse> => {
  const res = await fetch(
    getGetPassingQualityAppsQualityModerationPassingAppsGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getPassingQualityAppsQualityModerationPassingAppsGetResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getPassingQualityAppsQualityModerationPassingAppsGetResponse
}

export const getGetPassingQualityAppsQualityModerationPassingAppsGetQueryKey = (
  params?: GetPassingQualityAppsQualityModerationPassingAppsGetParams,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/passing-apps`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetPassingQualityAppsQualityModerationPassingAppsGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof getPassingQualityAppsQualityModerationPassingAppsGet>
    >,
    TError = null | null | null,
  >(
    params?: GetPassingQualityAppsQualityModerationPassingAppsGetParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getPassingQualityAppsQualityModerationPassingAppsGet
            >
          >,
          TError,
          TData
        >
      >
      fetch?: RequestInit
    },
  ) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetPassingQualityAppsQualityModerationPassingAppsGetQueryKey(params)

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof getPassingQualityAppsQualityModerationPassingAppsGet>
      >
    > = ({ signal }) =>
      getPassingQualityAppsQualityModerationPassingAppsGet(params, {
        signal,
        ...fetchOptions,
      })

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
      Awaited<
        ReturnType<typeof getPassingQualityAppsQualityModerationPassingAppsGet>
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
  }

export type GetPassingQualityAppsQualityModerationPassingAppsGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getPassingQualityAppsQualityModerationPassingAppsGet>
    >
  >
export type GetPassingQualityAppsQualityModerationPassingAppsGetQueryError =
  | null
  | null
  | null

export function useGetPassingQualityAppsQualityModerationPassingAppsGet<
  TData = Awaited<
    ReturnType<typeof getPassingQualityAppsQualityModerationPassingAppsGet>
  >,
  TError = null | null | null,
>(
  params:
    | undefined
    | GetPassingQualityAppsQualityModerationPassingAppsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getPassingQualityAppsQualityModerationPassingAppsGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getPassingQualityAppsQualityModerationPassingAppsGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getPassingQualityAppsQualityModerationPassingAppsGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPassingQualityAppsQualityModerationPassingAppsGet<
  TData = Awaited<
    ReturnType<typeof getPassingQualityAppsQualityModerationPassingAppsGet>
  >,
  TError = null | null | null,
>(
  params?: GetPassingQualityAppsQualityModerationPassingAppsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getPassingQualityAppsQualityModerationPassingAppsGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getPassingQualityAppsQualityModerationPassingAppsGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getPassingQualityAppsQualityModerationPassingAppsGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPassingQualityAppsQualityModerationPassingAppsGet<
  TData = Awaited<
    ReturnType<typeof getPassingQualityAppsQualityModerationPassingAppsGet>
  >,
  TError = null | null | null,
>(
  params?: GetPassingQualityAppsQualityModerationPassingAppsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getPassingQualityAppsQualityModerationPassingAppsGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Passing Quality Apps
 */

export function useGetPassingQualityAppsQualityModerationPassingAppsGet<
  TData = Awaited<
    ReturnType<typeof getPassingQualityAppsQualityModerationPassingAppsGet>
  >,
  TError = null | null | null,
>(
  params?: GetPassingQualityAppsQualityModerationPassingAppsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getPassingQualityAppsQualityModerationPassingAppsGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetPassingQualityAppsQualityModerationPassingAppsGetQueryOptions(
      params,
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get App Pick Recommendations
 */
export type getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse200 =
  {
    data: AppPickRecommendationsResponse
    status: 200
  }

export type getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse401 =
  {
    data: null
    status: 401
  }

export type getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse403 =
  {
    data: null
    status: 403
  }

export type getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse422 =
  {
    data: null
    status: 422
  }

export type getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse500 =
  {
    data: null
    status: 500
  }

export type getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponseComposite =

    | getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse200
    | getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse401
    | getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse403
    | getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse422
    | getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse500

export type getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse =
  getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponseComposite & {
    headers: Headers
  }

export const getGetAppPickRecommendationsQualityModerationAppPickRecommendationsGetUrl =
  (
    params?: GetAppPickRecommendationsQualityModerationAppPickRecommendationsGetParams,
  ) => {
    const normalizedParams = new URLSearchParams()

    Object.entries(params || {}).forEach(([key, value]) => {
      if (value !== undefined) {
        normalizedParams.append(key, value === null ? "null" : value.toString())
      }
    })

    const stringifiedParams = normalizedParams.toString()

    return stringifiedParams.length > 0
      ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/app-pick-recommendations?${stringifiedParams}`
      : `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/app-pick-recommendations`
  }

export const getAppPickRecommendationsQualityModerationAppPickRecommendationsGet =
  async (
    params?: GetAppPickRecommendationsQualityModerationAppPickRecommendationsGetParams,
    options?: RequestInit,
  ): Promise<getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse> => {
    const res = await fetch(
      getGetAppPickRecommendationsQualityModerationAppPickRecommendationsGetUrl(
        params,
      ),
      {
        ...options,
        method: "GET",
      },
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse["data"] =
      body ? JSON.parse(body) : {}

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as getAppPickRecommendationsQualityModerationAppPickRecommendationsGetResponse
  }

export const getGetAppPickRecommendationsQualityModerationAppPickRecommendationsGetQueryKey =
  (
    params?: GetAppPickRecommendationsQualityModerationAppPickRecommendationsGetParams,
  ) => {
    return [
      `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/app-pick-recommendations`,
      ...(params ? [params] : []),
    ] as const
  }

export const getGetAppPickRecommendationsQualityModerationAppPickRecommendationsGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
      >
    >,
    TError = null | null | null | null,
  >(
    params?: GetAppPickRecommendationsQualityModerationAppPickRecommendationsGetParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
            >
          >,
          TError,
          TData
        >
      >
      fetch?: RequestInit
    },
  ) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetAppPickRecommendationsQualityModerationAppPickRecommendationsGetQueryKey(
        params,
      )

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
        >
      >
    > = ({ signal }) =>
      getAppPickRecommendationsQualityModerationAppPickRecommendationsGet(
        params,
        { signal, ...fetchOptions },
      )

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
        >
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
  }

export type GetAppPickRecommendationsQualityModerationAppPickRecommendationsGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
      >
    >
  >
export type GetAppPickRecommendationsQualityModerationAppPickRecommendationsGetQueryError =
  null | null | null | null

export function useGetAppPickRecommendationsQualityModerationAppPickRecommendationsGet<
  TData = Awaited<
    ReturnType<
      typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
    >
  >,
  TError = null | null | null | null,
>(
  params:
    | undefined
    | GetAppPickRecommendationsQualityModerationAppPickRecommendationsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppPickRecommendationsQualityModerationAppPickRecommendationsGet<
  TData = Awaited<
    ReturnType<
      typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
    >
  >,
  TError = null | null | null | null,
>(
  params?: GetAppPickRecommendationsQualityModerationAppPickRecommendationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppPickRecommendationsQualityModerationAppPickRecommendationsGet<
  TData = Awaited<
    ReturnType<
      typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
    >
  >,
  TError = null | null | null | null,
>(
  params?: GetAppPickRecommendationsQualityModerationAppPickRecommendationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get App Pick Recommendations
 */

export function useGetAppPickRecommendationsQualityModerationAppPickRecommendationsGet<
  TData = Awaited<
    ReturnType<
      typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
    >
  >,
  TError = null | null | null | null,
>(
  params?: GetAppPickRecommendationsQualityModerationAppPickRecommendationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getAppPickRecommendationsQualityModerationAppPickRecommendationsGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetAppPickRecommendationsQualityModerationAppPickRecommendationsGetQueryOptions(
      params,
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Quality Moderation Stats
 */
export type getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse200 =
  {
    data: FailedByGuideline[]
    status: 200
  }

export type getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse401 =
  {
    data: null
    status: 401
  }

export type getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse403 =
  {
    data: null
    status: 403
  }

export type getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse500 =
  {
    data: null
    status: 500
  }

export type getQualityModerationStatsQualityModerationFailedByGuidelineGetResponseComposite =

    | getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse200
    | getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse401
    | getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse403
    | getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse500

export type getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse =
  getQualityModerationStatsQualityModerationFailedByGuidelineGetResponseComposite & {
    headers: Headers
  }

export const getGetQualityModerationStatsQualityModerationFailedByGuidelineGetUrl =
  () => {
    return `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/failed-by-guideline`
  }

export const getQualityModerationStatsQualityModerationFailedByGuidelineGet =
  async (
    options?: RequestInit,
  ): Promise<getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse> => {
    const res = await fetch(
      getGetQualityModerationStatsQualityModerationFailedByGuidelineGetUrl(),
      {
        ...options,
        method: "GET",
      },
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse["data"] =
      body ? JSON.parse(body) : {}

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as getQualityModerationStatsQualityModerationFailedByGuidelineGetResponse
  }

export const getGetQualityModerationStatsQualityModerationFailedByGuidelineGetQueryKey =
  () => {
    return [
      `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/failed-by-guideline`,
    ] as const
  }

export const getGetQualityModerationStatsQualityModerationFailedByGuidelineGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
      >
    >,
    TError = null | null | null,
  >(options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  }) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetQualityModerationStatsQualityModerationFailedByGuidelineGetQueryKey()

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
        >
      >
    > = ({ signal }) =>
      getQualityModerationStatsQualityModerationFailedByGuidelineGet({
        signal,
        ...fetchOptions,
      })

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
        >
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
  }

export type GetQualityModerationStatsQualityModerationFailedByGuidelineGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
      >
    >
  >
export type GetQualityModerationStatsQualityModerationFailedByGuidelineGetQueryError =
  null | null | null

export function useGetQualityModerationStatsQualityModerationFailedByGuidelineGet<
  TData = Awaited<
    ReturnType<
      typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
    >
  >,
  TError = null | null | null,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetQualityModerationStatsQualityModerationFailedByGuidelineGet<
  TData = Awaited<
    ReturnType<
      typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
    >
  >,
  TError = null | null | null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetQualityModerationStatsQualityModerationFailedByGuidelineGet<
  TData = Awaited<
    ReturnType<
      typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
    >
  >,
  TError = null | null | null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Quality Moderation Stats
 */

export function useGetQualityModerationStatsQualityModerationFailedByGuidelineGet<
  TData = Awaited<
    ReturnType<
      typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
    >
  >,
  TError = null | null | null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatsQualityModerationFailedByGuidelineGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetQualityModerationStatsQualityModerationFailedByGuidelineGetQueryOptions(
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Quality Moderation For App
 */
export type getQualityModerationForAppQualityModerationAppIdGetResponse200 = {
  data: QualityModerationResponse
  status: 200
}

export type getQualityModerationForAppQualityModerationAppIdGetResponse404 = {
  data: null
  status: 404
}

export type getQualityModerationForAppQualityModerationAppIdGetResponse422 = {
  data: null
  status: 422
}

export type getQualityModerationForAppQualityModerationAppIdGetResponse500 = {
  data: null
  status: 500
}

export type getQualityModerationForAppQualityModerationAppIdGetResponseComposite =

    | getQualityModerationForAppQualityModerationAppIdGetResponse200
    | getQualityModerationForAppQualityModerationAppIdGetResponse404
    | getQualityModerationForAppQualityModerationAppIdGetResponse422
    | getQualityModerationForAppQualityModerationAppIdGetResponse500

export type getQualityModerationForAppQualityModerationAppIdGetResponse =
  getQualityModerationForAppQualityModerationAppIdGetResponseComposite & {
    headers: Headers
  }

export const getGetQualityModerationForAppQualityModerationAppIdGetUrl = (
  appId: string,
) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/${appId}`
}

export const getQualityModerationForAppQualityModerationAppIdGet = async (
  appId: string,
  options?: RequestInit,
): Promise<getQualityModerationForAppQualityModerationAppIdGetResponse> => {
  const res = await fetch(
    getGetQualityModerationForAppQualityModerationAppIdGetUrl(appId),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getQualityModerationForAppQualityModerationAppIdGetResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getQualityModerationForAppQualityModerationAppIdGetResponse
}

export const getGetQualityModerationForAppQualityModerationAppIdGetQueryKey = (
  appId?: string,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/${appId}`,
  ] as const
}

export const getGetQualityModerationForAppQualityModerationAppIdGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
    >,
    TError = null | null | null,
  >(
    appId: string,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getQualityModerationForAppQualityModerationAppIdGet
            >
          >,
          TError,
          TData
        >
      >
      fetch?: RequestInit
    },
  ) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetQualityModerationForAppQualityModerationAppIdGetQueryKey(appId)

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
      >
    > = ({ signal }) =>
      getQualityModerationForAppQualityModerationAppIdGet(appId, {
        signal,
        ...fetchOptions,
      })

    return {
      queryKey,
      queryFn,
      enabled: !!appId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
  }

export type GetQualityModerationForAppQualityModerationAppIdGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
    >
  >
export type GetQualityModerationForAppQualityModerationAppIdGetQueryError =
  | null
  | null
  | null

export function useGetQualityModerationForAppQualityModerationAppIdGet<
  TData = Awaited<
    ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
  >,
  TError = null | null | null,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getQualityModerationForAppQualityModerationAppIdGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getQualityModerationForAppQualityModerationAppIdGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetQualityModerationForAppQualityModerationAppIdGet<
  TData = Awaited<
    ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
  >,
  TError = null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getQualityModerationForAppQualityModerationAppIdGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getQualityModerationForAppQualityModerationAppIdGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetQualityModerationForAppQualityModerationAppIdGet<
  TData = Awaited<
    ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
  >,
  TError = null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Quality Moderation For App
 */

export function useGetQualityModerationForAppQualityModerationAppIdGet<
  TData = Awaited<
    ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
  >,
  TError = null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getQualityModerationForAppQualityModerationAppIdGet>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetQualityModerationForAppQualityModerationAppIdGetQueryOptions(
      appId,
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Set Quality Moderation For App
 */
export type setQualityModerationForAppQualityModerationAppIdPostResponse200 = {
  data: unknown
  status: 200
}

export type setQualityModerationForAppQualityModerationAppIdPostResponse401 = {
  data: null
  status: 401
}

export type setQualityModerationForAppQualityModerationAppIdPostResponse403 = {
  data: null
  status: 403
}

export type setQualityModerationForAppQualityModerationAppIdPostResponse404 = {
  data: null
  status: 404
}

export type setQualityModerationForAppQualityModerationAppIdPostResponse422 = {
  data: null
  status: 422
}

export type setQualityModerationForAppQualityModerationAppIdPostResponse500 = {
  data: null
  status: 500
}

export type setQualityModerationForAppQualityModerationAppIdPostResponseComposite =

    | setQualityModerationForAppQualityModerationAppIdPostResponse200
    | setQualityModerationForAppQualityModerationAppIdPostResponse401
    | setQualityModerationForAppQualityModerationAppIdPostResponse403
    | setQualityModerationForAppQualityModerationAppIdPostResponse404
    | setQualityModerationForAppQualityModerationAppIdPostResponse422
    | setQualityModerationForAppQualityModerationAppIdPostResponse500

export type setQualityModerationForAppQualityModerationAppIdPostResponse =
  setQualityModerationForAppQualityModerationAppIdPostResponseComposite & {
    headers: Headers
  }

export const getSetQualityModerationForAppQualityModerationAppIdPostUrl = (
  appId: string,
) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/${appId}`
}

export const setQualityModerationForAppQualityModerationAppIdPost = async (
  appId: string,
  upsertQualityModeration: UpsertQualityModeration,
  options?: RequestInit,
): Promise<setQualityModerationForAppQualityModerationAppIdPostResponse> => {
  const res = await fetch(
    getSetQualityModerationForAppQualityModerationAppIdPostUrl(appId),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(upsertQualityModeration),
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: setQualityModerationForAppQualityModerationAppIdPostResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as setQualityModerationForAppQualityModerationAppIdPostResponse
}

export const getSetQualityModerationForAppQualityModerationAppIdPostMutationOptions =
  <TError = null | null | null | null | null, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof setQualityModerationForAppQualityModerationAppIdPost>
      >,
      TError,
      { appId: string; data: UpsertQualityModeration },
      TContext
    >
    fetch?: RequestInit
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof setQualityModerationForAppQualityModerationAppIdPost>
    >,
    TError,
    { appId: string; data: UpsertQualityModeration },
    TContext
  > => {
    const mutationKey = ["setQualityModerationForAppQualityModerationAppIdPost"]
    const { mutation: mutationOptions, fetch: fetchOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, fetch: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof setQualityModerationForAppQualityModerationAppIdPost>
      >,
      { appId: string; data: UpsertQualityModeration }
    > = (props) => {
      const { appId, data } = props ?? {}

      return setQualityModerationForAppQualityModerationAppIdPost(
        appId,
        data,
        fetchOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type SetQualityModerationForAppQualityModerationAppIdPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof setQualityModerationForAppQualityModerationAppIdPost>
    >
  >
export type SetQualityModerationForAppQualityModerationAppIdPostMutationBody =
  UpsertQualityModeration
export type SetQualityModerationForAppQualityModerationAppIdPostMutationError =
  | null
  | null
  | null
  | null
  | null

/**
 * @summary Set Quality Moderation For App
 */
export const useSetQualityModerationForAppQualityModerationAppIdPost = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof setQualityModerationForAppQualityModerationAppIdPost>
      >,
      TError,
      { appId: string; data: UpsertQualityModeration },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof setQualityModerationForAppQualityModerationAppIdPost>
  >,
  TError,
  { appId: string; data: UpsertQualityModeration },
  TContext
> => {
  const mutationOptions =
    getSetQualityModerationForAppQualityModerationAppIdPostMutationOptions(
      options,
    )

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get Quality Moderation Status For App
 */
export type getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse200 =
  {
    data: QualityModerationStatus
    status: 200
  }

export type getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse401 =
  {
    data: null
    status: 401
  }

export type getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse403 =
  {
    data: null
    status: 403
  }

export type getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse404 =
  {
    data: null
    status: 404
  }

export type getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse422 =
  {
    data: null
    status: 422
  }

export type getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse500 =
  {
    data: null
    status: 500
  }

export type getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponseComposite =

    | getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse200
    | getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse401
    | getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse403
    | getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse404
    | getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse422
    | getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse500

export type getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse =
  getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponseComposite & {
    headers: Headers
  }

export const getGetQualityModerationStatusForAppQualityModerationAppIdStatusGetUrl =
  (appId: string) => {
    return `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/${appId}/status`
  }

export const getQualityModerationStatusForAppQualityModerationAppIdStatusGet =
  async (
    appId: string,
    options?: RequestInit,
  ): Promise<getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse> => {
    const res = await fetch(
      getGetQualityModerationStatusForAppQualityModerationAppIdStatusGetUrl(
        appId,
      ),
      {
        ...options,
        method: "GET",
      },
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse["data"] =
      body ? JSON.parse(body) : {}

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as getQualityModerationStatusForAppQualityModerationAppIdStatusGetResponse
  }

export const getGetQualityModerationStatusForAppQualityModerationAppIdStatusGetQueryKey =
  (appId?: string) => {
    return [
      `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/${appId}/status`,
    ] as const
  }

export const getGetQualityModerationStatusForAppQualityModerationAppIdStatusGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
      >
    >,
    TError = null | null | null | null | null,
  >(
    appId: string,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
            >
          >,
          TError,
          TData
        >
      >
      fetch?: RequestInit
    },
  ) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetQualityModerationStatusForAppQualityModerationAppIdStatusGetQueryKey(
        appId,
      )

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
        >
      >
    > = ({ signal }) =>
      getQualityModerationStatusForAppQualityModerationAppIdStatusGet(appId, {
        signal,
        ...fetchOptions,
      })

    return {
      queryKey,
      queryFn,
      enabled: !!appId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
        >
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
  }

export type GetQualityModerationStatusForAppQualityModerationAppIdStatusGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
      >
    >
  >
export type GetQualityModerationStatusForAppQualityModerationAppIdStatusGetQueryError =
  null | null | null | null | null

export function useGetQualityModerationStatusForAppQualityModerationAppIdStatusGet<
  TData = Awaited<
    ReturnType<
      typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
    >
  >,
  TError = null | null | null | null | null,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetQualityModerationStatusForAppQualityModerationAppIdStatusGet<
  TData = Awaited<
    ReturnType<
      typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
    >
  >,
  TError = null | null | null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetQualityModerationStatusForAppQualityModerationAppIdStatusGet<
  TData = Awaited<
    ReturnType<
      typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
    >
  >,
  TError = null | null | null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Quality Moderation Status For App
 */

export function useGetQualityModerationStatusForAppQualityModerationAppIdStatusGet<
  TData = Awaited<
    ReturnType<
      typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
    >
  >,
  TError = null | null | null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getQualityModerationStatusForAppQualityModerationAppIdStatusGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetQualityModerationStatusForAppQualityModerationAppIdStatusGetQueryOptions(
      appId,
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Request Review For App
 */
export type requestReviewForAppQualityModerationAppIdRequestReviewPostResponse200 =
  {
    data: unknown
    status: 200
  }

export type requestReviewForAppQualityModerationAppIdRequestReviewPostResponse401 =
  {
    data: null
    status: 401
  }

export type requestReviewForAppQualityModerationAppIdRequestReviewPostResponse403 =
  {
    data: null
    status: 403
  }

export type requestReviewForAppQualityModerationAppIdRequestReviewPostResponse404 =
  {
    data: null
    status: 404
  }

export type requestReviewForAppQualityModerationAppIdRequestReviewPostResponse422 =
  {
    data: null
    status: 422
  }

export type requestReviewForAppQualityModerationAppIdRequestReviewPostResponse500 =
  {
    data: null
    status: 500
  }

export type requestReviewForAppQualityModerationAppIdRequestReviewPostResponseComposite =

    | requestReviewForAppQualityModerationAppIdRequestReviewPostResponse200
    | requestReviewForAppQualityModerationAppIdRequestReviewPostResponse401
    | requestReviewForAppQualityModerationAppIdRequestReviewPostResponse403
    | requestReviewForAppQualityModerationAppIdRequestReviewPostResponse404
    | requestReviewForAppQualityModerationAppIdRequestReviewPostResponse422
    | requestReviewForAppQualityModerationAppIdRequestReviewPostResponse500

export type requestReviewForAppQualityModerationAppIdRequestReviewPostResponse =
  requestReviewForAppQualityModerationAppIdRequestReviewPostResponseComposite & {
    headers: Headers
  }

export const getRequestReviewForAppQualityModerationAppIdRequestReviewPostUrl =
  (appId: string) => {
    return `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/${appId}/request-review`
  }

export const requestReviewForAppQualityModerationAppIdRequestReviewPost =
  async (
    appId: string,
    options?: RequestInit,
  ): Promise<requestReviewForAppQualityModerationAppIdRequestReviewPostResponse> => {
    const res = await fetch(
      getRequestReviewForAppQualityModerationAppIdRequestReviewPostUrl(appId),
      {
        ...options,
        method: "POST",
      },
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: requestReviewForAppQualityModerationAppIdRequestReviewPostResponse["data"] =
      body ? JSON.parse(body) : {}

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as requestReviewForAppQualityModerationAppIdRequestReviewPostResponse
  }

export const getRequestReviewForAppQualityModerationAppIdRequestReviewPostMutationOptions =
  <TError = null | null | null | null | null, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof requestReviewForAppQualityModerationAppIdRequestReviewPost
        >
      >,
      TError,
      { appId: string },
      TContext
    >
    fetch?: RequestInit
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof requestReviewForAppQualityModerationAppIdRequestReviewPost
      >
    >,
    TError,
    { appId: string },
    TContext
  > => {
    const mutationKey = [
      "requestReviewForAppQualityModerationAppIdRequestReviewPost",
    ]
    const { mutation: mutationOptions, fetch: fetchOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, fetch: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof requestReviewForAppQualityModerationAppIdRequestReviewPost
        >
      >,
      { appId: string }
    > = (props) => {
      const { appId } = props ?? {}

      return requestReviewForAppQualityModerationAppIdRequestReviewPost(
        appId,
        fetchOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type RequestReviewForAppQualityModerationAppIdRequestReviewPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof requestReviewForAppQualityModerationAppIdRequestReviewPost
      >
    >
  >

export type RequestReviewForAppQualityModerationAppIdRequestReviewPostMutationError =
  null | null | null | null | null

/**
 * @summary Request Review For App
 */
export const useRequestReviewForAppQualityModerationAppIdRequestReviewPost = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof requestReviewForAppQualityModerationAppIdRequestReviewPost
        >
      >,
      TError,
      { appId: string },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<
      typeof requestReviewForAppQualityModerationAppIdRequestReviewPost
    >
  >,
  TError,
  { appId: string },
  TContext
> => {
  const mutationOptions =
    getRequestReviewForAppQualityModerationAppIdRequestReviewPostMutationOptions(
      options,
    )

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete Review Request For App
 */
export type deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse200 =
  {
    data: unknown
    status: 200
  }

export type deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse204 =
  {
    data: null
    status: 204
  }

export type deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse401 =
  {
    data: null
    status: 401
  }

export type deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse403 =
  {
    data: null
    status: 403
  }

export type deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse404 =
  {
    data: null
    status: 404
  }

export type deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse422 =
  {
    data: null
    status: 422
  }

export type deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse500 =
  {
    data: null
    status: 500
  }

export type deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponseComposite =

    | deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse200
    | deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse204
    | deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse401
    | deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse403
    | deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse404
    | deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse422
    | deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse500

export type deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse =
  deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponseComposite & {
    headers: Headers
  }

export const getDeleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteUrl =
  (appId: string) => {
    return `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/${appId}/request-review`
  }

export const deleteReviewRequestForAppQualityModerationAppIdRequestReviewDelete =
  async (
    appId: string,
    options?: RequestInit,
  ): Promise<deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse> => {
    const res = await fetch(
      getDeleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteUrl(
        appId,
      ),
      {
        ...options,
        method: "DELETE",
      },
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse["data"] =
      body ? JSON.parse(body) : {}

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as deleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteResponse
  }

export const getDeleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteMutationOptions =
  <TError = null | null | null | null | null, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteReviewRequestForAppQualityModerationAppIdRequestReviewDelete
        >
      >,
      TError,
      { appId: string },
      TContext
    >
    fetch?: RequestInit
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof deleteReviewRequestForAppQualityModerationAppIdRequestReviewDelete
      >
    >,
    TError,
    { appId: string },
    TContext
  > => {
    const mutationKey = [
      "deleteReviewRequestForAppQualityModerationAppIdRequestReviewDelete",
    ]
    const { mutation: mutationOptions, fetch: fetchOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, fetch: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof deleteReviewRequestForAppQualityModerationAppIdRequestReviewDelete
        >
      >,
      { appId: string }
    > = (props) => {
      const { appId } = props ?? {}

      return deleteReviewRequestForAppQualityModerationAppIdRequestReviewDelete(
        appId,
        fetchOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type DeleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof deleteReviewRequestForAppQualityModerationAppIdRequestReviewDelete
      >
    >
  >

export type DeleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteMutationError =
  null | null | null | null | null

/**
 * @summary Delete Review Request For App
 */
export const useDeleteReviewRequestForAppQualityModerationAppIdRequestReviewDelete =
  <TError = null | null | null | null | null, TContext = unknown>(
    options?: {
      mutation?: UseMutationOptions<
        Awaited<
          ReturnType<
            typeof deleteReviewRequestForAppQualityModerationAppIdRequestReviewDelete
          >
        >,
        TError,
        { appId: string },
        TContext
      >
      fetch?: RequestInit
    },
    queryClient?: QueryClient,
  ): UseMutationResult<
    Awaited<
      ReturnType<
        typeof deleteReviewRequestForAppQualityModerationAppIdRequestReviewDelete
      >
    >,
    TError,
    { appId: string },
    TContext
  > => {
    const mutationOptions =
      getDeleteReviewRequestForAppQualityModerationAppIdRequestReviewDeleteMutationOptions(
        options,
      )

    return useMutation(mutationOptions, queryClient)
  }
/**
 * @summary Set Fullscreen App
 */
export type setFullscreenAppQualityModerationAppIdFullscreenPostResponse200 = {
  data: unknown
  status: 200
}

export type setFullscreenAppQualityModerationAppIdFullscreenPostResponse401 = {
  data: null
  status: 401
}

export type setFullscreenAppQualityModerationAppIdFullscreenPostResponse403 = {
  data: null
  status: 403
}

export type setFullscreenAppQualityModerationAppIdFullscreenPostResponse404 = {
  data: null
  status: 404
}

export type setFullscreenAppQualityModerationAppIdFullscreenPostResponse422 = {
  data: null
  status: 422
}

export type setFullscreenAppQualityModerationAppIdFullscreenPostResponse500 = {
  data: null
  status: 500
}

export type setFullscreenAppQualityModerationAppIdFullscreenPostResponseComposite =

    | setFullscreenAppQualityModerationAppIdFullscreenPostResponse200
    | setFullscreenAppQualityModerationAppIdFullscreenPostResponse401
    | setFullscreenAppQualityModerationAppIdFullscreenPostResponse403
    | setFullscreenAppQualityModerationAppIdFullscreenPostResponse404
    | setFullscreenAppQualityModerationAppIdFullscreenPostResponse422
    | setFullscreenAppQualityModerationAppIdFullscreenPostResponse500

export type setFullscreenAppQualityModerationAppIdFullscreenPostResponse =
  setFullscreenAppQualityModerationAppIdFullscreenPostResponseComposite & {
    headers: Headers
  }

export const getSetFullscreenAppQualityModerationAppIdFullscreenPostUrl = (
  appId: string,
  params: SetFullscreenAppQualityModerationAppIdFullscreenPostParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/${appId}/fullscreen?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/quality-moderation/${appId}/fullscreen`
}

export const setFullscreenAppQualityModerationAppIdFullscreenPost = async (
  appId: string,
  params: SetFullscreenAppQualityModerationAppIdFullscreenPostParams,
  options?: RequestInit,
): Promise<setFullscreenAppQualityModerationAppIdFullscreenPostResponse> => {
  const res = await fetch(
    getSetFullscreenAppQualityModerationAppIdFullscreenPostUrl(appId, params),
    {
      ...options,
      method: "POST",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: setFullscreenAppQualityModerationAppIdFullscreenPostResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as setFullscreenAppQualityModerationAppIdFullscreenPostResponse
}

export const getSetFullscreenAppQualityModerationAppIdFullscreenPostMutationOptions =
  <TError = null | null | null | null | null, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof setFullscreenAppQualityModerationAppIdFullscreenPost>
      >,
      TError,
      {
        appId: string
        params: SetFullscreenAppQualityModerationAppIdFullscreenPostParams
      },
      TContext
    >
    fetch?: RequestInit
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof setFullscreenAppQualityModerationAppIdFullscreenPost>
    >,
    TError,
    {
      appId: string
      params: SetFullscreenAppQualityModerationAppIdFullscreenPostParams
    },
    TContext
  > => {
    const mutationKey = ["setFullscreenAppQualityModerationAppIdFullscreenPost"]
    const { mutation: mutationOptions, fetch: fetchOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, fetch: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof setFullscreenAppQualityModerationAppIdFullscreenPost>
      >,
      {
        appId: string
        params: SetFullscreenAppQualityModerationAppIdFullscreenPostParams
      }
    > = (props) => {
      const { appId, params } = props ?? {}

      return setFullscreenAppQualityModerationAppIdFullscreenPost(
        appId,
        params,
        fetchOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type SetFullscreenAppQualityModerationAppIdFullscreenPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof setFullscreenAppQualityModerationAppIdFullscreenPost>
    >
  >

export type SetFullscreenAppQualityModerationAppIdFullscreenPostMutationError =
  | null
  | null
  | null
  | null
  | null

/**
 * @summary Set Fullscreen App
 */
export const useSetFullscreenAppQualityModerationAppIdFullscreenPost = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof setFullscreenAppQualityModerationAppIdFullscreenPost>
      >,
      TError,
      {
        appId: string
        params: SetFullscreenAppQualityModerationAppIdFullscreenPostParams
      },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof setFullscreenAppQualityModerationAppIdFullscreenPost>
  >,
  TError,
  {
    appId: string
    params: SetFullscreenAppQualityModerationAppIdFullscreenPostParams
  },
  TContext
> => {
  const mutationOptions =
    getSetFullscreenAppQualityModerationAppIdFullscreenPostMutationOptions(
      options,
    )

  return useMutation(mutationOptions, queryClient)
}
