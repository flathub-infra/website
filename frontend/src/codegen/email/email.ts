/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"
import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"
import type { BuildNotificationRequest, HTTPValidationError } from ".././model"

/**
 * @summary Build Notification
 */
export const buildNotificationEmailsBuildNotificationPost = (
  buildNotificationRequest: BuildNotificationRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    `/emails/build-notification`,
    buildNotificationRequest,
    options,
  )
}

export const getBuildNotificationEmailsBuildNotificationPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>,
    TError,
    { data: BuildNotificationRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>,
  TError,
  { data: BuildNotificationRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>,
    { data: BuildNotificationRequest }
  > = (props) => {
    const { data } = props ?? {}

    return buildNotificationEmailsBuildNotificationPost(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type BuildNotificationEmailsBuildNotificationPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>
  >
export type BuildNotificationEmailsBuildNotificationPostMutationBody =
  BuildNotificationRequest
export type BuildNotificationEmailsBuildNotificationPostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Build Notification
 */
export const useBuildNotificationEmailsBuildNotificationPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>,
    TError,
    { data: BuildNotificationRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>,
  TError,
  { data: BuildNotificationRequest },
  TContext
> => {
  const mutationOptions =
    getBuildNotificationEmailsBuildNotificationPostMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Preview Templates
 */
export const previewTemplatesEmailsPreviewGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.get(`/emails/preview`, options)
}

export const getPreviewTemplatesEmailsPreviewGetQueryKey = () => {
  return [`/emails/preview`] as const
}

export const getPreviewTemplatesEmailsPreviewGetQueryOptions = <
  TData = Awaited<ReturnType<typeof previewTemplatesEmailsPreviewGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof previewTemplatesEmailsPreviewGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getPreviewTemplatesEmailsPreviewGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof previewTemplatesEmailsPreviewGet>>
  > = ({ signal }) =>
    previewTemplatesEmailsPreviewGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof previewTemplatesEmailsPreviewGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type PreviewTemplatesEmailsPreviewGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof previewTemplatesEmailsPreviewGet>>
>
export type PreviewTemplatesEmailsPreviewGetQueryError = AxiosError<unknown>

/**
 * @summary Preview Templates
 */
export const usePreviewTemplatesEmailsPreviewGet = <
  TData = Awaited<ReturnType<typeof previewTemplatesEmailsPreviewGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof previewTemplatesEmailsPreviewGet>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPreviewTemplatesEmailsPreviewGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Preview Template
 */
export const previewTemplateEmailsPreviewNameGet = (
  name: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.get(`/emails/preview/${name}`, options)
}

export const getPreviewTemplateEmailsPreviewNameGetQueryKey = (
  name: string,
) => {
  return [`/emails/preview/${name}`] as const
}

export const getPreviewTemplateEmailsPreviewNameGetQueryOptions = <
  TData = Awaited<ReturnType<typeof previewTemplateEmailsPreviewNameGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof previewTemplateEmailsPreviewNameGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getPreviewTemplateEmailsPreviewNameGetQueryKey(name)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof previewTemplateEmailsPreviewNameGet>>
  > = ({ signal }) =>
    previewTemplateEmailsPreviewNameGet(name, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof previewTemplateEmailsPreviewNameGet>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type PreviewTemplateEmailsPreviewNameGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof previewTemplateEmailsPreviewNameGet>>
>
export type PreviewTemplateEmailsPreviewNameGetQueryError =
  AxiosError<HTTPValidationError>

/**
 * @summary Preview Template
 */
export const usePreviewTemplateEmailsPreviewNameGet = <
  TData = Awaited<ReturnType<typeof previewTemplateEmailsPreviewNameGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof previewTemplateEmailsPreviewNameGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPreviewTemplateEmailsPreviewNameGetQueryOptions(
    name,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
