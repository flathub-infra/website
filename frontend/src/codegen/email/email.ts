/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query"
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query"

import type { BuildNotificationRequest } from ".././model"

/**
 * @summary Build Notification
 */
export type buildNotificationEmailsBuildNotificationPostResponse200 = {
  data: unknown
  status: 200
}

export type buildNotificationEmailsBuildNotificationPostResponse422 = {
  data: null
  status: 422
}

export type buildNotificationEmailsBuildNotificationPostResponse500 = {
  data: null
  status: 500
}

export type buildNotificationEmailsBuildNotificationPostResponseComposite =
  | buildNotificationEmailsBuildNotificationPostResponse200
  | buildNotificationEmailsBuildNotificationPostResponse422
  | buildNotificationEmailsBuildNotificationPostResponse500

export type buildNotificationEmailsBuildNotificationPostResponse =
  buildNotificationEmailsBuildNotificationPostResponseComposite & {
    headers: Headers
  }

export const getBuildNotificationEmailsBuildNotificationPostUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/emails/build-notification`
}

export const buildNotificationEmailsBuildNotificationPost = async (
  buildNotificationRequest: BuildNotificationRequest,
  options?: RequestInit,
): Promise<buildNotificationEmailsBuildNotificationPostResponse> => {
  const res = await fetch(
    getBuildNotificationEmailsBuildNotificationPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(buildNotificationRequest),
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: buildNotificationEmailsBuildNotificationPostResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as buildNotificationEmailsBuildNotificationPostResponse
}

export const getBuildNotificationEmailsBuildNotificationPostMutationOptions = <
  TError = null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>,
    TError,
    { data: BuildNotificationRequest },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>,
  TError,
  { data: BuildNotificationRequest },
  TContext
> => {
  const mutationKey = ["buildNotificationEmailsBuildNotificationPost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>,
    { data: BuildNotificationRequest }
  > = (props) => {
    const { data } = props ?? {}

    return buildNotificationEmailsBuildNotificationPost(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type BuildNotificationEmailsBuildNotificationPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>
  >
export type BuildNotificationEmailsBuildNotificationPostMutationBody =
  BuildNotificationRequest
export type BuildNotificationEmailsBuildNotificationPostMutationError =
  | null
  | null

/**
 * @summary Build Notification
 */
export const useBuildNotificationEmailsBuildNotificationPost = <
  TError = null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>,
      TError,
      { data: BuildNotificationRequest },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>,
  TError,
  { data: BuildNotificationRequest },
  TContext
> => {
  const mutationOptions =
    getBuildNotificationEmailsBuildNotificationPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
