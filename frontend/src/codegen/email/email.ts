/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query"
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query"
import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"
import type { BuildNotificationRequest, HTTPValidationError } from ".././model"

/**
 * @summary Build Notification
 */
export const buildNotificationEmailsBuildNotificationPost = (
  buildNotificationRequest: BuildNotificationRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    `/emails/build-notification`,
    buildNotificationRequest,
    options,
  )
}

export const getBuildNotificationEmailsBuildNotificationPostMutationOptions = <
  TData = Awaited<
    ReturnType<typeof buildNotificationEmailsBuildNotificationPost>
  >,
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: BuildNotificationRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationKey = ["buildNotificationEmailsBuildNotificationPost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>,
    { data: BuildNotificationRequest }
  > = (props) => {
    const { data } = props ?? {}

    return buildNotificationEmailsBuildNotificationPost(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: BuildNotificationRequest },
    TContext
  >
}

export type BuildNotificationEmailsBuildNotificationPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof buildNotificationEmailsBuildNotificationPost>>
  >
export type BuildNotificationEmailsBuildNotificationPostMutationBody =
  BuildNotificationRequest
export type BuildNotificationEmailsBuildNotificationPostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Build Notification
 */
export const useBuildNotificationEmailsBuildNotificationPost = <
  TData = Awaited<
    ReturnType<typeof buildNotificationEmailsBuildNotificationPost>
  >,
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: BuildNotificationRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  TData,
  TError,
  { data: BuildNotificationRequest },
  TContext
> => {
  const mutationOptions =
    getBuildNotificationEmailsBuildNotificationPostMutationOptions(options)

  return useMutation(mutationOptions)
}
