/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"
import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"
import type {
  DevelopersResponse,
  HTTPValidationError,
  InviteDeveloperInvitesAppIdInvitePostParams,
  InviteStatus,
  RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams,
  RevokeInviteInvitesAppIdRevokePostParams,
} from ".././model"

/**
 * @summary Get Invite Status
 */
export const getInviteStatusInvitesAppIdGet = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<InviteStatus>> => {
  return axios.get(`/invites/${appId}`, options)
}

export const getGetInviteStatusInvitesAppIdGetQueryKey = (appId: string) => {
  return [`/invites/${appId}`] as const
}

export const getGetInviteStatusInvitesAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetInviteStatusInvitesAppIdGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>
  > = ({ signal }) =>
    getInviteStatusInvitesAppIdGet(appId, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInviteStatusInvitesAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>
>
export type GetInviteStatusInvitesAppIdGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetInviteStatusInvitesAppIdGet<
  TData = Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetInviteStatusInvitesAppIdGet<
  TData = Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetInviteStatusInvitesAppIdGet<
  TData = Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Invite Status
 */

export function useGetInviteStatusInvitesAppIdGet<
  TData = Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetInviteStatusInvitesAppIdGetQueryOptions(
    appId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Invite Developer
 */
export const inviteDeveloperInvitesAppIdInvitePost = (
  appId: string,
  params: InviteDeveloperInvitesAppIdInvitePostParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`/invites/${appId}/invite`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getInviteDeveloperInvitesAppIdInvitePostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>,
    TError,
    { appId: string; params: InviteDeveloperInvitesAppIdInvitePostParams },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>,
  TError,
  { appId: string; params: InviteDeveloperInvitesAppIdInvitePostParams },
  TContext
> => {
  const mutationKey = ["inviteDeveloperInvitesAppIdInvitePost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>,
    { appId: string; params: InviteDeveloperInvitesAppIdInvitePostParams }
  > = (props) => {
    const { appId, params } = props ?? {}

    return inviteDeveloperInvitesAppIdInvitePost(appId, params, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type InviteDeveloperInvitesAppIdInvitePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>
>

export type InviteDeveloperInvitesAppIdInvitePostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Invite Developer
 */
export const useInviteDeveloperInvitesAppIdInvitePost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>,
    TError,
    { appId: string; params: InviteDeveloperInvitesAppIdInvitePostParams },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>,
  TError,
  { appId: string; params: InviteDeveloperInvitesAppIdInvitePostParams },
  TContext
> => {
  const mutationOptions =
    getInviteDeveloperInvitesAppIdInvitePostMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Accept Invite
 */
export const acceptInviteInvitesAppIdAcceptPost = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`/invites/${appId}/accept`, undefined, options)
}

export const getAcceptInviteInvitesAppIdAcceptPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>,
    TError,
    { appId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationKey = ["acceptInviteInvitesAppIdAcceptPost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>,
    { appId: string }
  > = (props) => {
    const { appId } = props ?? {}

    return acceptInviteInvitesAppIdAcceptPost(appId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AcceptInviteInvitesAppIdAcceptPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>
>

export type AcceptInviteInvitesAppIdAcceptPostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Accept Invite
 */
export const useAcceptInviteInvitesAppIdAcceptPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>,
    TError,
    { appId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationOptions =
    getAcceptInviteInvitesAppIdAcceptPostMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Decline Invite
 */
export const declineInviteInvitesAppIdDeclinePost = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`/invites/${appId}/decline`, undefined, options)
}

export const getDeclineInviteInvitesAppIdDeclinePostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>,
    TError,
    { appId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationKey = ["declineInviteInvitesAppIdDeclinePost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>,
    { appId: string }
  > = (props) => {
    const { appId } = props ?? {}

    return declineInviteInvitesAppIdDeclinePost(appId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeclineInviteInvitesAppIdDeclinePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>
>

export type DeclineInviteInvitesAppIdDeclinePostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Decline Invite
 */
export const useDeclineInviteInvitesAppIdDeclinePost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>,
    TError,
    { appId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationOptions =
    getDeclineInviteInvitesAppIdDeclinePostMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Leave Team
 */
export const leaveTeamInvitesAppIdLeavePost = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`/invites/${appId}/leave`, undefined, options)
}

export const getLeaveTeamInvitesAppIdLeavePostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>,
    TError,
    { appId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationKey = ["leaveTeamInvitesAppIdLeavePost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>,
    { appId: string }
  > = (props) => {
    const { appId } = props ?? {}

    return leaveTeamInvitesAppIdLeavePost(appId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LeaveTeamInvitesAppIdLeavePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>
>

export type LeaveTeamInvitesAppIdLeavePostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Leave Team
 */
export const useLeaveTeamInvitesAppIdLeavePost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>,
    TError,
    { appId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationOptions =
    getLeaveTeamInvitesAppIdLeavePostMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Get App Developers
 */
export const getAppDevelopersInvitesAppIdDevelopersGet = (
  appId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DevelopersResponse>> => {
  return axios.get(`/invites/${appId}/developers`, options)
}

export const getGetAppDevelopersInvitesAppIdDevelopersGetQueryKey = (
  appId: string,
) => {
  return [`/invites/${appId}/developers`] as const
}

export const getGetAppDevelopersInvitesAppIdDevelopersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetAppDevelopersInvitesAppIdDevelopersGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>
  > = ({ signal }) =>
    getAppDevelopersInvitesAppIdDevelopersGet(appId, {
      signal,
      ...axiosOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAppDevelopersInvitesAppIdDevelopersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>
>
export type GetAppDevelopersInvitesAppIdDevelopersGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetAppDevelopersInvitesAppIdDevelopersGet<
  TData = Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
          TError,
          Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppDevelopersInvitesAppIdDevelopersGet<
  TData = Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
          TError,
          Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppDevelopersInvitesAppIdDevelopersGet<
  TData = Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get App Developers
 */

export function useGetAppDevelopersInvitesAppIdDevelopersGet<
  TData = Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetAppDevelopersInvitesAppIdDevelopersGetQueryOptions(
    appId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Remove Developer
 */
export const removeDeveloperInvitesAppIdRemoveDeveloperPost = (
  appId: string,
  params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`/invites/${appId}/remove-developer`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getRemoveDeveloperInvitesAppIdRemoveDeveloperPostMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>
      >,
      TError,
      {
        appId: string
        params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams
      },
      TContext
    >
    axios?: AxiosRequestConfig
  }): UseMutationOptions<
    Awaited<ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>>,
    TError,
    {
      appId: string
      params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams
    },
    TContext
  > => {
    const mutationKey = ["removeDeveloperInvitesAppIdRemoveDeveloperPost"]
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>
      >,
      {
        appId: string
        params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams
      }
    > = (props) => {
      const { appId, params } = props ?? {}

      return removeDeveloperInvitesAppIdRemoveDeveloperPost(
        appId,
        params,
        axiosOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type RemoveDeveloperInvitesAppIdRemoveDeveloperPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>>
  >

export type RemoveDeveloperInvitesAppIdRemoveDeveloperPostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Remove Developer
 */
export const useRemoveDeveloperInvitesAppIdRemoveDeveloperPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>>,
    TError,
    {
      appId: string
      params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams
    },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>>,
  TError,
  {
    appId: string
    params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams
  },
  TContext
> => {
  const mutationOptions =
    getRemoveDeveloperInvitesAppIdRemoveDeveloperPostMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Revoke Invite
 */
export const revokeInviteInvitesAppIdRevokePost = (
  appId: string,
  params: RevokeInviteInvitesAppIdRevokePostParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`/invites/${appId}/revoke`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getRevokeInviteInvitesAppIdRevokePostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>,
    TError,
    { appId: string; params: RevokeInviteInvitesAppIdRevokePostParams },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>,
  TError,
  { appId: string; params: RevokeInviteInvitesAppIdRevokePostParams },
  TContext
> => {
  const mutationKey = ["revokeInviteInvitesAppIdRevokePost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>,
    { appId: string; params: RevokeInviteInvitesAppIdRevokePostParams }
  > = (props) => {
    const { appId, params } = props ?? {}

    return revokeInviteInvitesAppIdRevokePost(appId, params, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RevokeInviteInvitesAppIdRevokePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>
>

export type RevokeInviteInvitesAppIdRevokePostMutationError =
  AxiosError<HTTPValidationError>

/**
 * @summary Revoke Invite
 */
export const useRevokeInviteInvitesAppIdRevokePost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>,
    TError,
    { appId: string; params: RevokeInviteInvitesAppIdRevokePostParams },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>,
  TError,
  { appId: string; params: RevokeInviteInvitesAppIdRevokePostParams },
  TContext
> => {
  const mutationOptions =
    getRevokeInviteInvitesAppIdRevokePostMutationOptions(options)

  return useMutation(mutationOptions)
}
