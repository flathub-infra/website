/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  AppRoutesInvitesDevelopersResponse,
  InviteDeveloperInvitesAppIdInvitePostParams,
  InviteStatus,
  RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams,
  RevokeInviteInvitesAppIdRevokePostParams,
} from ".././model"

/**
 * @summary Get Invite Status
 */
export type getInviteStatusInvitesAppIdGetResponse200 = {
  data: InviteStatus
  status: 200
}

export type getInviteStatusInvitesAppIdGetResponse401 = {
  data: null
  status: 401
}

export type getInviteStatusInvitesAppIdGetResponse404 = {
  data: null
  status: 404
}

export type getInviteStatusInvitesAppIdGetResponse422 = {
  data: null
  status: 422
}

export type getInviteStatusInvitesAppIdGetResponse500 = {
  data: null
  status: 500
}

export type getInviteStatusInvitesAppIdGetResponseComposite =
  | getInviteStatusInvitesAppIdGetResponse200
  | getInviteStatusInvitesAppIdGetResponse401
  | getInviteStatusInvitesAppIdGetResponse404
  | getInviteStatusInvitesAppIdGetResponse422
  | getInviteStatusInvitesAppIdGetResponse500

export type getInviteStatusInvitesAppIdGetResponse =
  getInviteStatusInvitesAppIdGetResponseComposite & {
    headers: Headers
  }

export const getGetInviteStatusInvitesAppIdGetUrl = (appId: string) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}`
}

export const getInviteStatusInvitesAppIdGet = async (
  appId: string,
  options?: RequestInit,
): Promise<getInviteStatusInvitesAppIdGetResponse> => {
  const res = await fetch(getGetInviteStatusInvitesAppIdGetUrl(appId), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getInviteStatusInvitesAppIdGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getInviteStatusInvitesAppIdGetResponse
}

export const getGetInviteStatusInvitesAppIdGetQueryKey = (appId?: string) => {
  return [`${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}`] as const
}

export const getGetInviteStatusInvitesAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
  TError = null | null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetInviteStatusInvitesAppIdGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>
  > = ({ signal }) =>
    getInviteStatusInvitesAppIdGet(appId, { signal, ...fetchOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInviteStatusInvitesAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>
>
export type GetInviteStatusInvitesAppIdGetQueryError = null | null | null | null

export function useGetInviteStatusInvitesAppIdGet<
  TData = Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
  TError = null | null | null | null,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetInviteStatusInvitesAppIdGet<
  TData = Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
  TError = null | null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetInviteStatusInvitesAppIdGet<
  TData = Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
  TError = null | null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Invite Status
 */

export function useGetInviteStatusInvitesAppIdGet<
  TData = Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
  TError = null | null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInviteStatusInvitesAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetInviteStatusInvitesAppIdGetQueryOptions(
    appId,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Invite Developer
 */
export type inviteDeveloperInvitesAppIdInvitePostResponse204 = {
  data: null
  status: 204
}

export type inviteDeveloperInvitesAppIdInvitePostResponse401 = {
  data: null
  status: 401
}

export type inviteDeveloperInvitesAppIdInvitePostResponse403 = {
  data: null
  status: 403
}

export type inviteDeveloperInvitesAppIdInvitePostResponse404 = {
  data: null
  status: 404
}

export type inviteDeveloperInvitesAppIdInvitePostResponse409 = {
  data: null
  status: 409
}

export type inviteDeveloperInvitesAppIdInvitePostResponse422 = {
  data: null
  status: 422
}

export type inviteDeveloperInvitesAppIdInvitePostResponse500 = {
  data: null
  status: 500
}

export type inviteDeveloperInvitesAppIdInvitePostResponseComposite =
  | inviteDeveloperInvitesAppIdInvitePostResponse204
  | inviteDeveloperInvitesAppIdInvitePostResponse401
  | inviteDeveloperInvitesAppIdInvitePostResponse403
  | inviteDeveloperInvitesAppIdInvitePostResponse404
  | inviteDeveloperInvitesAppIdInvitePostResponse409
  | inviteDeveloperInvitesAppIdInvitePostResponse422
  | inviteDeveloperInvitesAppIdInvitePostResponse500

export type inviteDeveloperInvitesAppIdInvitePostResponse =
  inviteDeveloperInvitesAppIdInvitePostResponseComposite & {
    headers: Headers
  }

export const getInviteDeveloperInvitesAppIdInvitePostUrl = (
  appId: string,
  params: InviteDeveloperInvitesAppIdInvitePostParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}/invite?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}/invite`
}

export const inviteDeveloperInvitesAppIdInvitePost = async (
  appId: string,
  params: InviteDeveloperInvitesAppIdInvitePostParams,
  options?: RequestInit,
): Promise<inviteDeveloperInvitesAppIdInvitePostResponse> => {
  const res = await fetch(
    getInviteDeveloperInvitesAppIdInvitePostUrl(appId, params),
    {
      ...options,
      method: "POST",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: inviteDeveloperInvitesAppIdInvitePostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as inviteDeveloperInvitesAppIdInvitePostResponse
}

export const getInviteDeveloperInvitesAppIdInvitePostMutationOptions = <
  TError = null | null | null | null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>,
    TError,
    { appId: string; params: InviteDeveloperInvitesAppIdInvitePostParams },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>,
  TError,
  { appId: string; params: InviteDeveloperInvitesAppIdInvitePostParams },
  TContext
> => {
  const mutationKey = ["inviteDeveloperInvitesAppIdInvitePost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>,
    { appId: string; params: InviteDeveloperInvitesAppIdInvitePostParams }
  > = (props) => {
    const { appId, params } = props ?? {}

    return inviteDeveloperInvitesAppIdInvitePost(appId, params, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type InviteDeveloperInvitesAppIdInvitePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>
>

export type InviteDeveloperInvitesAppIdInvitePostMutationError =
  | null
  | null
  | null
  | null
  | null
  | null

/**
 * @summary Invite Developer
 */
export const useInviteDeveloperInvitesAppIdInvitePost = <
  TError = null | null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>,
      TError,
      { appId: string; params: InviteDeveloperInvitesAppIdInvitePostParams },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof inviteDeveloperInvitesAppIdInvitePost>>,
  TError,
  { appId: string; params: InviteDeveloperInvitesAppIdInvitePostParams },
  TContext
> => {
  const mutationOptions =
    getInviteDeveloperInvitesAppIdInvitePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Accept Invite
 */
export type acceptInviteInvitesAppIdAcceptPostResponse204 = {
  data: null
  status: 204
}

export type acceptInviteInvitesAppIdAcceptPostResponse401 = {
  data: null
  status: 401
}

export type acceptInviteInvitesAppIdAcceptPostResponse403 = {
  data: null
  status: 403
}

export type acceptInviteInvitesAppIdAcceptPostResponse404 = {
  data: null
  status: 404
}

export type acceptInviteInvitesAppIdAcceptPostResponse422 = {
  data: null
  status: 422
}

export type acceptInviteInvitesAppIdAcceptPostResponse500 = {
  data: null
  status: 500
}

export type acceptInviteInvitesAppIdAcceptPostResponseComposite =
  | acceptInviteInvitesAppIdAcceptPostResponse204
  | acceptInviteInvitesAppIdAcceptPostResponse401
  | acceptInviteInvitesAppIdAcceptPostResponse403
  | acceptInviteInvitesAppIdAcceptPostResponse404
  | acceptInviteInvitesAppIdAcceptPostResponse422
  | acceptInviteInvitesAppIdAcceptPostResponse500

export type acceptInviteInvitesAppIdAcceptPostResponse =
  acceptInviteInvitesAppIdAcceptPostResponseComposite & {
    headers: Headers
  }

export const getAcceptInviteInvitesAppIdAcceptPostUrl = (appId: string) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}/accept`
}

export const acceptInviteInvitesAppIdAcceptPost = async (
  appId: string,
  options?: RequestInit,
): Promise<acceptInviteInvitesAppIdAcceptPostResponse> => {
  const res = await fetch(getAcceptInviteInvitesAppIdAcceptPostUrl(appId), {
    ...options,
    method: "POST",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: acceptInviteInvitesAppIdAcceptPostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as acceptInviteInvitesAppIdAcceptPostResponse
}

export const getAcceptInviteInvitesAppIdAcceptPostMutationOptions = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>,
    TError,
    { appId: string },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationKey = ["acceptInviteInvitesAppIdAcceptPost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>,
    { appId: string }
  > = (props) => {
    const { appId } = props ?? {}

    return acceptInviteInvitesAppIdAcceptPost(appId, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AcceptInviteInvitesAppIdAcceptPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>
>

export type AcceptInviteInvitesAppIdAcceptPostMutationError =
  | null
  | null
  | null
  | null
  | null

/**
 * @summary Accept Invite
 */
export const useAcceptInviteInvitesAppIdAcceptPost = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>,
      TError,
      { appId: string },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof acceptInviteInvitesAppIdAcceptPost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationOptions =
    getAcceptInviteInvitesAppIdAcceptPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Decline Invite
 */
export type declineInviteInvitesAppIdDeclinePostResponse204 = {
  data: null
  status: 204
}

export type declineInviteInvitesAppIdDeclinePostResponse401 = {
  data: null
  status: 401
}

export type declineInviteInvitesAppIdDeclinePostResponse403 = {
  data: null
  status: 403
}

export type declineInviteInvitesAppIdDeclinePostResponse404 = {
  data: null
  status: 404
}

export type declineInviteInvitesAppIdDeclinePostResponse422 = {
  data: null
  status: 422
}

export type declineInviteInvitesAppIdDeclinePostResponse500 = {
  data: null
  status: 500
}

export type declineInviteInvitesAppIdDeclinePostResponseComposite =
  | declineInviteInvitesAppIdDeclinePostResponse204
  | declineInviteInvitesAppIdDeclinePostResponse401
  | declineInviteInvitesAppIdDeclinePostResponse403
  | declineInviteInvitesAppIdDeclinePostResponse404
  | declineInviteInvitesAppIdDeclinePostResponse422
  | declineInviteInvitesAppIdDeclinePostResponse500

export type declineInviteInvitesAppIdDeclinePostResponse =
  declineInviteInvitesAppIdDeclinePostResponseComposite & {
    headers: Headers
  }

export const getDeclineInviteInvitesAppIdDeclinePostUrl = (appId: string) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}/decline`
}

export const declineInviteInvitesAppIdDeclinePost = async (
  appId: string,
  options?: RequestInit,
): Promise<declineInviteInvitesAppIdDeclinePostResponse> => {
  const res = await fetch(getDeclineInviteInvitesAppIdDeclinePostUrl(appId), {
    ...options,
    method: "POST",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: declineInviteInvitesAppIdDeclinePostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as declineInviteInvitesAppIdDeclinePostResponse
}

export const getDeclineInviteInvitesAppIdDeclinePostMutationOptions = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>,
    TError,
    { appId: string },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationKey = ["declineInviteInvitesAppIdDeclinePost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>,
    { appId: string }
  > = (props) => {
    const { appId } = props ?? {}

    return declineInviteInvitesAppIdDeclinePost(appId, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeclineInviteInvitesAppIdDeclinePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>
>

export type DeclineInviteInvitesAppIdDeclinePostMutationError =
  | null
  | null
  | null
  | null
  | null

/**
 * @summary Decline Invite
 */
export const useDeclineInviteInvitesAppIdDeclinePost = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>,
      TError,
      { appId: string },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof declineInviteInvitesAppIdDeclinePost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationOptions =
    getDeclineInviteInvitesAppIdDeclinePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Leave Team
 */
export type leaveTeamInvitesAppIdLeavePostResponse204 = {
  data: null
  status: 204
}

export type leaveTeamInvitesAppIdLeavePostResponse401 = {
  data: null
  status: 401
}

export type leaveTeamInvitesAppIdLeavePostResponse403 = {
  data: null
  status: 403
}

export type leaveTeamInvitesAppIdLeavePostResponse404 = {
  data: null
  status: 404
}

export type leaveTeamInvitesAppIdLeavePostResponse422 = {
  data: null
  status: 422
}

export type leaveTeamInvitesAppIdLeavePostResponse500 = {
  data: null
  status: 500
}

export type leaveTeamInvitesAppIdLeavePostResponseComposite =
  | leaveTeamInvitesAppIdLeavePostResponse204
  | leaveTeamInvitesAppIdLeavePostResponse401
  | leaveTeamInvitesAppIdLeavePostResponse403
  | leaveTeamInvitesAppIdLeavePostResponse404
  | leaveTeamInvitesAppIdLeavePostResponse422
  | leaveTeamInvitesAppIdLeavePostResponse500

export type leaveTeamInvitesAppIdLeavePostResponse =
  leaveTeamInvitesAppIdLeavePostResponseComposite & {
    headers: Headers
  }

export const getLeaveTeamInvitesAppIdLeavePostUrl = (appId: string) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}/leave`
}

export const leaveTeamInvitesAppIdLeavePost = async (
  appId: string,
  options?: RequestInit,
): Promise<leaveTeamInvitesAppIdLeavePostResponse> => {
  const res = await fetch(getLeaveTeamInvitesAppIdLeavePostUrl(appId), {
    ...options,
    method: "POST",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: leaveTeamInvitesAppIdLeavePostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as leaveTeamInvitesAppIdLeavePostResponse
}

export const getLeaveTeamInvitesAppIdLeavePostMutationOptions = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>,
    TError,
    { appId: string },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationKey = ["leaveTeamInvitesAppIdLeavePost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>,
    { appId: string }
  > = (props) => {
    const { appId } = props ?? {}

    return leaveTeamInvitesAppIdLeavePost(appId, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LeaveTeamInvitesAppIdLeavePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>
>

export type LeaveTeamInvitesAppIdLeavePostMutationError =
  | null
  | null
  | null
  | null
  | null

/**
 * @summary Leave Team
 */
export const useLeaveTeamInvitesAppIdLeavePost = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>,
      TError,
      { appId: string },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof leaveTeamInvitesAppIdLeavePost>>,
  TError,
  { appId: string },
  TContext
> => {
  const mutationOptions =
    getLeaveTeamInvitesAppIdLeavePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get App Developers
 */
export type getAppDevelopersInvitesAppIdDevelopersGetResponse200 = {
  data: AppRoutesInvitesDevelopersResponse
  status: 200
}

export type getAppDevelopersInvitesAppIdDevelopersGetResponse401 = {
  data: null
  status: 401
}

export type getAppDevelopersInvitesAppIdDevelopersGetResponse403 = {
  data: null
  status: 403
}

export type getAppDevelopersInvitesAppIdDevelopersGetResponse404 = {
  data: null
  status: 404
}

export type getAppDevelopersInvitesAppIdDevelopersGetResponse422 = {
  data: null
  status: 422
}

export type getAppDevelopersInvitesAppIdDevelopersGetResponse500 = {
  data: null
  status: 500
}

export type getAppDevelopersInvitesAppIdDevelopersGetResponseComposite =
  | getAppDevelopersInvitesAppIdDevelopersGetResponse200
  | getAppDevelopersInvitesAppIdDevelopersGetResponse401
  | getAppDevelopersInvitesAppIdDevelopersGetResponse403
  | getAppDevelopersInvitesAppIdDevelopersGetResponse404
  | getAppDevelopersInvitesAppIdDevelopersGetResponse422
  | getAppDevelopersInvitesAppIdDevelopersGetResponse500

export type getAppDevelopersInvitesAppIdDevelopersGetResponse =
  getAppDevelopersInvitesAppIdDevelopersGetResponseComposite & {
    headers: Headers
  }

export const getGetAppDevelopersInvitesAppIdDevelopersGetUrl = (
  appId: string,
) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}/developers`
}

export const getAppDevelopersInvitesAppIdDevelopersGet = async (
  appId: string,
  options?: RequestInit,
): Promise<getAppDevelopersInvitesAppIdDevelopersGetResponse> => {
  const res = await fetch(
    getGetAppDevelopersInvitesAppIdDevelopersGetUrl(appId),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getAppDevelopersInvitesAppIdDevelopersGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getAppDevelopersInvitesAppIdDevelopersGetResponse
}

export const getGetAppDevelopersInvitesAppIdDevelopersGetQueryKey = (
  appId?: string,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}/developers`,
  ] as const
}

export const getGetAppDevelopersInvitesAppIdDevelopersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
  TError = null | null | null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetAppDevelopersInvitesAppIdDevelopersGetQueryKey(appId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>
  > = ({ signal }) =>
    getAppDevelopersInvitesAppIdDevelopersGet(appId, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAppDevelopersInvitesAppIdDevelopersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>
>
export type GetAppDevelopersInvitesAppIdDevelopersGetQueryError =
  | null
  | null
  | null
  | null
  | null

export function useGetAppDevelopersInvitesAppIdDevelopersGet<
  TData = Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
  TError = null | null | null | null | null,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
          TError,
          Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppDevelopersInvitesAppIdDevelopersGet<
  TData = Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
  TError = null | null | null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
          TError,
          Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAppDevelopersInvitesAppIdDevelopersGet<
  TData = Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
  TError = null | null | null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get App Developers
 */

export function useGetAppDevelopersInvitesAppIdDevelopersGet<
  TData = Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
  TError = null | null | null | null | null,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppDevelopersInvitesAppIdDevelopersGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetAppDevelopersInvitesAppIdDevelopersGetQueryOptions(
    appId,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Remove Developer
 */
export type removeDeveloperInvitesAppIdRemoveDeveloperPostResponse204 = {
  data: null
  status: 204
}

export type removeDeveloperInvitesAppIdRemoveDeveloperPostResponse401 = {
  data: null
  status: 401
}

export type removeDeveloperInvitesAppIdRemoveDeveloperPostResponse403 = {
  data: null
  status: 403
}

export type removeDeveloperInvitesAppIdRemoveDeveloperPostResponse404 = {
  data: null
  status: 404
}

export type removeDeveloperInvitesAppIdRemoveDeveloperPostResponse422 = {
  data: null
  status: 422
}

export type removeDeveloperInvitesAppIdRemoveDeveloperPostResponse500 = {
  data: null
  status: 500
}

export type removeDeveloperInvitesAppIdRemoveDeveloperPostResponseComposite =
  | removeDeveloperInvitesAppIdRemoveDeveloperPostResponse204
  | removeDeveloperInvitesAppIdRemoveDeveloperPostResponse401
  | removeDeveloperInvitesAppIdRemoveDeveloperPostResponse403
  | removeDeveloperInvitesAppIdRemoveDeveloperPostResponse404
  | removeDeveloperInvitesAppIdRemoveDeveloperPostResponse422
  | removeDeveloperInvitesAppIdRemoveDeveloperPostResponse500

export type removeDeveloperInvitesAppIdRemoveDeveloperPostResponse =
  removeDeveloperInvitesAppIdRemoveDeveloperPostResponseComposite & {
    headers: Headers
  }

export const getRemoveDeveloperInvitesAppIdRemoveDeveloperPostUrl = (
  appId: string,
  params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}/remove-developer?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}/remove-developer`
}

export const removeDeveloperInvitesAppIdRemoveDeveloperPost = async (
  appId: string,
  params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams,
  options?: RequestInit,
): Promise<removeDeveloperInvitesAppIdRemoveDeveloperPostResponse> => {
  const res = await fetch(
    getRemoveDeveloperInvitesAppIdRemoveDeveloperPostUrl(appId, params),
    {
      ...options,
      method: "POST",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: removeDeveloperInvitesAppIdRemoveDeveloperPostResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as removeDeveloperInvitesAppIdRemoveDeveloperPostResponse
}

export const getRemoveDeveloperInvitesAppIdRemoveDeveloperPostMutationOptions =
  <TError = null | null | null | null | null, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>
      >,
      TError,
      {
        appId: string
        params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams
      },
      TContext
    >
    fetch?: RequestInit
  }): UseMutationOptions<
    Awaited<ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>>,
    TError,
    {
      appId: string
      params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams
    },
    TContext
  > => {
    const mutationKey = ["removeDeveloperInvitesAppIdRemoveDeveloperPost"]
    const { mutation: mutationOptions, fetch: fetchOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, fetch: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>
      >,
      {
        appId: string
        params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams
      }
    > = (props) => {
      const { appId, params } = props ?? {}

      return removeDeveloperInvitesAppIdRemoveDeveloperPost(
        appId,
        params,
        fetchOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type RemoveDeveloperInvitesAppIdRemoveDeveloperPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>>
  >

export type RemoveDeveloperInvitesAppIdRemoveDeveloperPostMutationError =
  | null
  | null
  | null
  | null
  | null

/**
 * @summary Remove Developer
 */
export const useRemoveDeveloperInvitesAppIdRemoveDeveloperPost = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>
      >,
      TError,
      {
        appId: string
        params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams
      },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeDeveloperInvitesAppIdRemoveDeveloperPost>>,
  TError,
  {
    appId: string
    params: RemoveDeveloperInvitesAppIdRemoveDeveloperPostParams
  },
  TContext
> => {
  const mutationOptions =
    getRemoveDeveloperInvitesAppIdRemoveDeveloperPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Revoke Invite
 */
export type revokeInviteInvitesAppIdRevokePostResponse204 = {
  data: null
  status: 204
}

export type revokeInviteInvitesAppIdRevokePostResponse401 = {
  data: null
  status: 401
}

export type revokeInviteInvitesAppIdRevokePostResponse403 = {
  data: null
  status: 403
}

export type revokeInviteInvitesAppIdRevokePostResponse404 = {
  data: null
  status: 404
}

export type revokeInviteInvitesAppIdRevokePostResponse422 = {
  data: null
  status: 422
}

export type revokeInviteInvitesAppIdRevokePostResponse500 = {
  data: null
  status: 500
}

export type revokeInviteInvitesAppIdRevokePostResponseComposite =
  | revokeInviteInvitesAppIdRevokePostResponse204
  | revokeInviteInvitesAppIdRevokePostResponse401
  | revokeInviteInvitesAppIdRevokePostResponse403
  | revokeInviteInvitesAppIdRevokePostResponse404
  | revokeInviteInvitesAppIdRevokePostResponse422
  | revokeInviteInvitesAppIdRevokePostResponse500

export type revokeInviteInvitesAppIdRevokePostResponse =
  revokeInviteInvitesAppIdRevokePostResponseComposite & {
    headers: Headers
  }

export const getRevokeInviteInvitesAppIdRevokePostUrl = (
  appId: string,
  params: RevokeInviteInvitesAppIdRevokePostParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}/revoke?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/invites/${appId}/revoke`
}

export const revokeInviteInvitesAppIdRevokePost = async (
  appId: string,
  params: RevokeInviteInvitesAppIdRevokePostParams,
  options?: RequestInit,
): Promise<revokeInviteInvitesAppIdRevokePostResponse> => {
  const res = await fetch(
    getRevokeInviteInvitesAppIdRevokePostUrl(appId, params),
    {
      ...options,
      method: "POST",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: revokeInviteInvitesAppIdRevokePostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as revokeInviteInvitesAppIdRevokePostResponse
}

export const getRevokeInviteInvitesAppIdRevokePostMutationOptions = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>,
    TError,
    { appId: string; params: RevokeInviteInvitesAppIdRevokePostParams },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>,
  TError,
  { appId: string; params: RevokeInviteInvitesAppIdRevokePostParams },
  TContext
> => {
  const mutationKey = ["revokeInviteInvitesAppIdRevokePost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>,
    { appId: string; params: RevokeInviteInvitesAppIdRevokePostParams }
  > = (props) => {
    const { appId, params } = props ?? {}

    return revokeInviteInvitesAppIdRevokePost(appId, params, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RevokeInviteInvitesAppIdRevokePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>
>

export type RevokeInviteInvitesAppIdRevokePostMutationError =
  | null
  | null
  | null
  | null
  | null

/**
 * @summary Revoke Invite
 */
export const useRevokeInviteInvitesAppIdRevokePost = <
  TError = null | null | null | null | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>,
      TError,
      { appId: string; params: RevokeInviteInvitesAppIdRevokePostParams },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof revokeInviteInvitesAppIdRevokePost>>,
  TError,
  { appId: string; params: RevokeInviteInvitesAppIdRevokePostParams },
  TContext
> => {
  const mutationOptions =
    getRevokeInviteInvitesAppIdRevokePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
