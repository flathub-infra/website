/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import type { DevelopersResponse, InviteStatus } from ".././model"

export const getGetInviteStatusInvitesAppIdGetResponseMock = (
  overrideResponse: Partial<InviteStatus> = {},
): InviteStatus => ({
  is_direct_upload_app: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  is_pending: faker.datatype.boolean(),
  ...overrideResponse,
})

export const getGetDevelopersInvitesAppIdDevelopersGetResponseMock = (
  overrideResponse: Partial<DevelopersResponse> = {},
): DevelopersResponse => ({
  developers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    is_primary: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.datatype.boolean(), null]),
      undefined,
    ]),
    is_self: faker.datatype.boolean(),
    name: faker.helpers.arrayElement([faker.word.sample(), null]),
  })),
  invites: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    is_primary: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.datatype.boolean(), null]),
      undefined,
    ]),
    is_self: faker.datatype.boolean(),
    name: faker.helpers.arrayElement([faker.word.sample(), null]),
  })),
  ...overrideResponse,
})

export const getGetInviteStatusInvitesAppIdGetMockHandler = (
  overrideResponse?:
    | InviteStatus
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => InviteStatus),
) => {
  return http.get("*/invites/:appId", async (info) => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getGetInviteStatusInvitesAppIdGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getInviteDeveloperInvitesAppIdInvitePostMockHandler = () => {
  return http.post("*/invites/:appId/invite", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getAcceptInviteInvitesAppIdAcceptPostMockHandler = () => {
  return http.post("*/invites/:appId/accept", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getDeclineInviteInvitesAppIdDeclinePostMockHandler = () => {
  return http.post("*/invites/:appId/decline", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getLeaveTeamInvitesAppIdLeavePostMockHandler = () => {
  return http.post("*/invites/:appId/leave", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getGetDevelopersInvitesAppIdDevelopersGetMockHandler = (
  overrideResponse?:
    | DevelopersResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => DevelopersResponse),
) => {
  return http.get("*/invites/:appId/developers", async (info) => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getGetDevelopersInvitesAppIdDevelopersGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getRemoveDeveloperInvitesAppIdRemoveDeveloperPostMockHandler =
  () => {
    return http.post("*/invites/:appId/remove-developer", async () => {
      await delay(1000)
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      })
    })
  }

export const getRevokeInviteInvitesAppIdRevokePostMockHandler = () => {
  return http.post("*/invites/:appId/revoke", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}
export const getInviteMock = () => [
  getGetInviteStatusInvitesAppIdGetMockHandler(),
  getInviteDeveloperInvitesAppIdInvitePostMockHandler(),
  getAcceptInviteInvitesAppIdAcceptPostMockHandler(),
  getDeclineInviteInvitesAppIdDeclinePostMockHandler(),
  getLeaveTeamInvitesAppIdLeavePostMockHandler(),
  getGetDevelopersInvitesAppIdDevelopersGetMockHandler(),
  getRemoveDeveloperInvitesAppIdRemoveDeveloperPostMockHandler(),
  getRevokeInviteInvitesAppIdRevokePostMockHandler(),
]
