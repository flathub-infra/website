/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"

import { HttpResponse, delay, http } from "msw"
import type { RequestHandlerOptions } from "msw"

import { Permission } from ".././model"
import type {
  DeleteUserResult,
  GetDeleteUserResult,
  GetUserinfoAuthUserinfoGet200,
  LoginMethod,
  RefreshDevFlatpaksReturn,
} from ".././model"

export const getGetLoginMethodsAuthLoginGetResponseMock = (): LoginMethod[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    method: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  }))

export const getGetUserinfoAuthUserinfoGetResponseMock =
  (): GetUserinfoAuthUserinfoGet200 | void =>
    faker.helpers.arrayElement([
      {
        displayname: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        dev_flatpaks: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          undefined,
        ]),
        permissions: faker.helpers.arrayElement([
          faker.helpers.arrayElements(Object.values(Permission)),
          undefined,
        ]),
        owned_flatpaks: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          undefined,
        ]),
        invited_flatpaks: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          undefined,
        ]),
        invite_code: faker.string.alpha({ length: { min: 10, max: 20 } }),
        accepted_publisher_agreement_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        default_account: {
          login: faker.string.alpha({ length: { min: 10, max: 20 } }),
          avatar: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
        },
        auths: {
          github: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              {
                login: faker.string.alpha({ length: { min: 10, max: 20 } }),
                avatar: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    null,
                  ]),
                  undefined,
                ]),
              },
              null,
            ]),
            undefined,
          ]),
          gitlab: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              {
                login: faker.string.alpha({ length: { min: 10, max: 20 } }),
                avatar: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    null,
                  ]),
                  undefined,
                ]),
              },
              null,
            ]),
            undefined,
          ]),
          gnome: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              {
                login: faker.string.alpha({ length: { min: 10, max: 20 } }),
                avatar: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    null,
                  ]),
                  undefined,
                ]),
              },
              null,
            ]),
            undefined,
          ]),
          kde: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              {
                login: faker.string.alpha({ length: { min: 10, max: 20 } }),
                avatar: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    null,
                  ]),
                  undefined,
                ]),
              },
              null,
            ]),
            undefined,
          ]),
        },
      },
      null,
    ])

export const getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostResponseMock = (
  overrideResponse: Partial<RefreshDevFlatpaksReturn> = {},
): RefreshDevFlatpaksReturn => ({
  dev_flatpaks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  ...overrideResponse,
})

export const getGetDeleteuserAuthDeleteuserGetResponseMock = (
  overrideResponse: Partial<GetDeleteUserResult> = {},
): GetDeleteUserResult => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  token: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
})

export const getDoDeleteuserAuthDeleteuserPostResponseMock = (
  overrideResponse: Partial<DeleteUserResult> = {},
): DeleteUserResult => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
})

export const getGetLoginMethodsAuthLoginGetMockHandler = (
  overrideResponse?:
    | LoginMethod[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LoginMethod[]> | LoginMethod[]),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/auth/login",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetLoginMethodsAuthLoginGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getStartGithubFlowAuthLoginGithubGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/auth/login/github",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getContinueGithubFlowAuthLoginGithubPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/auth/login/github",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getStartGitlabFlowAuthLoginGitlabGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/auth/login/gitlab",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getContinueGitlabFlowAuthLoginGitlabPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/auth/login/gitlab",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getStartGnomeFlowAuthLoginGnomeGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/auth/login/gnome",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getContinueGnomeFlowAuthLoginGnomePostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/auth/login/gnome",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getStartKdeFlowAuthLoginKdeGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/auth/login/kde",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getContinueKdeFlowAuthLoginKdePostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/auth/login/kde",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getContinueGoogleFlowAuthLoginGooglePostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/auth/login/google",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getGetUserinfoAuthUserinfoGetMockHandler = (
  overrideResponse?:
    | GetUserinfoAuthUserinfoGet200
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetUserinfoAuthUserinfoGet200 | void>
        | GetUserinfoAuthUserinfoGet200
        | void),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/auth/userinfo",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetUserinfoAuthUserinfoGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostMockHandler = (
  overrideResponse?:
    | RefreshDevFlatpaksReturn
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RefreshDevFlatpaksReturn> | RefreshDevFlatpaksReturn),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/auth/refresh-dev-flatpaks",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getDoLogoutAuthLogoutPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/auth/logout",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    },
    options,
  )
}

export const getGetDeleteuserAuthDeleteuserGetMockHandler = (
  overrideResponse?:
    | GetDeleteUserResult
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetDeleteUserResult> | GetDeleteUserResult),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/auth/deleteuser",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetDeleteuserAuthDeleteuserGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getDoDeleteuserAuthDeleteuserPostMockHandler = (
  overrideResponse?:
    | DeleteUserResult
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<DeleteUserResult> | DeleteUserResult),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/auth/deleteuser",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDoDeleteuserAuthDeleteuserPostResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getDoAgreeToPublisherAgreementAuthAcceptPublisherAgreementPostMockHandler =
  (
    overrideResponse?:
      | unknown
      | ((
          info: Parameters<Parameters<typeof http.post>[1]>[0],
        ) => Promise<unknown> | unknown),
    options?: RequestHandlerOptions,
  ) => {
    return http.post(
      "*/auth/accept-publisher-agreement",
      async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
          await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 200 })
      },
      options,
    )
  }

export const getDoChangeDefaultAccountAuthChangeDefaultAccountPostMockHandler =
  (
    overrideResponse?:
      | void
      | ((
          info: Parameters<Parameters<typeof http.post>[1]>[0],
        ) => Promise<void> | void),
    options?: RequestHandlerOptions,
  ) => {
    return http.post(
      "*/auth/change-default-account",
      async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
          await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 204 })
      },
      options,
    )
  }
export const getAuthMock = () => [
  getGetLoginMethodsAuthLoginGetMockHandler(),
  getStartGithubFlowAuthLoginGithubGetMockHandler(),
  getContinueGithubFlowAuthLoginGithubPostMockHandler(),
  getStartGitlabFlowAuthLoginGitlabGetMockHandler(),
  getContinueGitlabFlowAuthLoginGitlabPostMockHandler(),
  getStartGnomeFlowAuthLoginGnomeGetMockHandler(),
  getContinueGnomeFlowAuthLoginGnomePostMockHandler(),
  getStartKdeFlowAuthLoginKdeGetMockHandler(),
  getContinueKdeFlowAuthLoginKdePostMockHandler(),
  getContinueGoogleFlowAuthLoginGooglePostMockHandler(),
  getGetUserinfoAuthUserinfoGetMockHandler(),
  getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostMockHandler(),
  getDoLogoutAuthLogoutPostMockHandler(),
  getGetDeleteuserAuthDeleteuserGetMockHandler(),
  getDoDeleteuserAuthDeleteuserPostMockHandler(),
  getDoAgreeToPublisherAgreementAuthAcceptPublisherAgreementPostMockHandler(),
  getDoChangeDefaultAccountAuthChangeDefaultAccountPostMockHandler(),
]
