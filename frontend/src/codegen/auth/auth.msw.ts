/**
 * Generated by orval v6.26.0 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import type {
  DeleteUserResult,
  GetDeleteUserResult,
  LoginMethod,
  RefreshDevFlatpaksReturn,
  UserInfo,
} from ".././model"

export const getGetLoginMethodsAuthLoginGetResponseMock = (
  overrideResponse: any = {},
): LoginMethod[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    method: faker.word.sample(),
    name: faker.word.sample(),
    ...overrideResponse,
  }))

export const getGetUserinfoAuthUserinfoGetResponseMock = (
  overrideResponse: any = {},
): UserInfo => ({
  accepted_publisher_agreement_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    {},
  ]),
  auths: {
    github: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          avatar: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), {}]),
            undefined,
          ]),
          login: faker.word.sample(),
          ...overrideResponse,
        },
        {},
      ]),
      undefined,
    ]),
    gitlab: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          avatar: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), {}]),
            undefined,
          ]),
          login: faker.word.sample(),
          ...overrideResponse,
        },
        {},
      ]),
      undefined,
    ]),
    gnome: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          avatar: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), {}]),
            undefined,
          ]),
          login: faker.word.sample(),
          ...overrideResponse,
        },
        {},
      ]),
      undefined,
    ]),
    kde: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          avatar: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), {}]),
            undefined,
          ]),
          login: faker.word.sample(),
          ...overrideResponse,
        },
        {},
      ]),
      undefined,
    ]),
    ...overrideResponse,
  },
  default_account: {
    avatar: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), {}]),
      undefined,
    ]),
    login: faker.word.sample(),
    ...overrideResponse,
  },
  dev_flatpaks: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  displayname: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), {}]),
    undefined,
  ]),
  invite_code: faker.word.sample(),
  invited_flatpaks: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  is_moderator: faker.datatype.boolean(),
  is_quality_moderator: faker.datatype.boolean(),
  owned_flatpaks: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  ...overrideResponse,
})

export const getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostResponseMock = (
  overrideResponse: any = {},
): RefreshDevFlatpaksReturn => ({
  dev_flatpaks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.word.sample()),
  ...overrideResponse,
})

export const getGetDeleteuserAuthDeleteuserGetResponseMock = (
  overrideResponse: any = {},
): GetDeleteUserResult => ({
  status: faker.word.sample(),
  token: faker.word.sample(),
  ...overrideResponse,
})

export const getDoDeleteuserAuthDeleteuserPostResponseMock = (
  overrideResponse: any = {},
): DeleteUserResult => ({
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), {}]),
    undefined,
  ]),
  status: faker.word.sample(),
  ...overrideResponse,
})

export const getGetLoginMethodsAuthLoginGetMockHandler = (
  overrideResponse?: LoginMethod[],
) => {
  return http.get("*/auth/login", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetLoginMethodsAuthLoginGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getStartGithubFlowAuthLoginGithubGetMockHandler = () => {
  return http.get("*/auth/login/github", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getContinueGithubFlowAuthLoginGithubPostMockHandler = () => {
  return http.post("*/auth/login/github", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getStartGitlabFlowAuthLoginGitlabGetMockHandler = () => {
  return http.get("*/auth/login/gitlab", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getContinueGitlabFlowAuthLoginGitlabPostMockHandler = () => {
  return http.post("*/auth/login/gitlab", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getStartGnomeFlowAuthLoginGnomeGetMockHandler = () => {
  return http.get("*/auth/login/gnome", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getContinueGnomeFlowAuthLoginGnomePostMockHandler = () => {
  return http.post("*/auth/login/gnome", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getStartKdeFlowAuthLoginKdeGetMockHandler = () => {
  return http.get("*/auth/login/kde", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getContinueKdeFlowAuthLoginKdePostMockHandler = () => {
  return http.post("*/auth/login/kde", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getContinueGoogleFlowAuthLoginGooglePostMockHandler = () => {
  return http.post("*/auth/login/google", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getGetUserinfoAuthUserinfoGetMockHandler = (
  overrideResponse?: UserInfo,
) => {
  return http.get("*/auth/userinfo", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetUserinfoAuthUserinfoGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostMockHandler = (
  overrideResponse?: RefreshDevFlatpaksReturn,
) => {
  return http.post("*/auth/refresh-dev-flatpaks", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getDoLogoutAuthLogoutPostMockHandler = () => {
  return http.post("*/auth/logout", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getGetDeleteuserAuthDeleteuserGetMockHandler = (
  overrideResponse?: GetDeleteUserResult,
) => {
  return http.get("*/auth/deleteuser", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetDeleteuserAuthDeleteuserGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getDoDeleteuserAuthDeleteuserPostMockHandler = (
  overrideResponse?: DeleteUserResult,
) => {
  return http.post("*/auth/deleteuser", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getDoDeleteuserAuthDeleteuserPostResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getDoAgreeToPublisherAgreementAuthAcceptPublisherAgreementPostMockHandler =
  () => {
    return http.post("*/auth/accept-publisher-agreement", async () => {
      await delay(1000)
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      })
    })
  }

export const getDoChangeDefaultAccountAuthChangeDefaultAccountPostMockHandler =
  () => {
    return http.post("*/auth/change-default-account", async () => {
      await delay(1000)
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      })
    })
  }
export const getAuthMock = () => [
  getGetLoginMethodsAuthLoginGetMockHandler(),
  getStartGithubFlowAuthLoginGithubGetMockHandler(),
  getContinueGithubFlowAuthLoginGithubPostMockHandler(),
  getStartGitlabFlowAuthLoginGitlabGetMockHandler(),
  getContinueGitlabFlowAuthLoginGitlabPostMockHandler(),
  getStartGnomeFlowAuthLoginGnomeGetMockHandler(),
  getContinueGnomeFlowAuthLoginGnomePostMockHandler(),
  getStartKdeFlowAuthLoginKdeGetMockHandler(),
  getContinueKdeFlowAuthLoginKdePostMockHandler(),
  getContinueGoogleFlowAuthLoginGooglePostMockHandler(),
  getGetUserinfoAuthUserinfoGetMockHandler(),
  getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostMockHandler(),
  getDoLogoutAuthLogoutPostMockHandler(),
  getGetDeleteuserAuthDeleteuserGetMockHandler(),
  getDoDeleteuserAuthDeleteuserPostMockHandler(),
  getDoAgreeToPublisherAgreementAuthAcceptPublisherAgreementPostMockHandler(),
  getDoChangeDefaultAccountAuthChangeDefaultAccountPostMockHandler(),
]
