/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import { Permission } from ".././model"
import type {
  DeleteUserResult,
  GetDeleteUserResult,
  LoginMethod,
  RefreshDevFlatpaksReturn,
  UserInfo,
} from ".././model"

export const getGetLoginMethodsAuthLoginGetResponseMock = (): LoginMethod[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    method: faker.string.alpha(20),
    name: faker.string.alpha(20),
  }))

export const getGetUserinfoAuthUserinfoGetResponseMock = (
  overrideResponse: Partial<UserInfo> = {},
): UserInfo => ({
  accepted_publisher_agreement_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  auths: {
    github: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          avatar: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined,
          ]),
          login: faker.string.alpha(20),
        },
        null,
      ]),
      undefined,
    ]),
    gitlab: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          avatar: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined,
          ]),
          login: faker.string.alpha(20),
        },
        null,
      ]),
      undefined,
    ]),
    gnome: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          avatar: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined,
          ]),
          login: faker.string.alpha(20),
        },
        null,
      ]),
      undefined,
    ]),
    kde: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          avatar: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined,
          ]),
          login: faker.string.alpha(20),
        },
        null,
      ]),
      undefined,
    ]),
  },
  default_account: {
    avatar: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined,
    ]),
    login: faker.string.alpha(20),
  },
  dev_flatpaks: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha(20)),
    undefined,
  ]),
  displayname: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  invite_code: faker.string.alpha(20),
  invited_flatpaks: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha(20)),
    undefined,
  ]),
  owned_flatpaks: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha(20)),
    undefined,
  ]),
  permissions: faker.helpers.arrayElement([
    faker.helpers.arrayElements(Object.values(Permission)),
    undefined,
  ]),
  ...overrideResponse,
})

export const getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostResponseMock = (
  overrideResponse: Partial<RefreshDevFlatpaksReturn> = {},
): RefreshDevFlatpaksReturn => ({
  dev_flatpaks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha(20)),
  ...overrideResponse,
})

export const getGetDeleteuserAuthDeleteuserGetResponseMock = (
  overrideResponse: Partial<GetDeleteUserResult> = {},
): GetDeleteUserResult => ({
  status: faker.string.alpha(20),
  token: faker.string.alpha(20),
  ...overrideResponse,
})

export const getDoDeleteuserAuthDeleteuserPostResponseMock = (
  overrideResponse: Partial<DeleteUserResult> = {},
): DeleteUserResult => ({
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  status: faker.string.alpha(20),
  ...overrideResponse,
})

export const getGetLoginMethodsAuthLoginGetMockHandler = (
  overrideResponse?:
    | LoginMethod[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LoginMethod[]> | LoginMethod[]),
) => {
  return http.get("*/auth/login", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetLoginMethodsAuthLoginGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getStartGithubFlowAuthLoginGithubGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/auth/login/github", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getContinueGithubFlowAuthLoginGithubPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/auth/login/github", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getStartGitlabFlowAuthLoginGitlabGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/auth/login/gitlab", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getContinueGitlabFlowAuthLoginGitlabPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/auth/login/gitlab", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getStartGnomeFlowAuthLoginGnomeGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/auth/login/gnome", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getContinueGnomeFlowAuthLoginGnomePostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/auth/login/gnome", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getStartKdeFlowAuthLoginKdeGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/auth/login/kde", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getContinueKdeFlowAuthLoginKdePostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/auth/login/kde", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getContinueGoogleFlowAuthLoginGooglePostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/auth/login/google", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetUserinfoAuthUserinfoGetMockHandler = (
  overrideResponse?:
    | UserInfo
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserInfo> | UserInfo),
) => {
  return http.get("*/auth/userinfo", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUserinfoAuthUserinfoGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostMockHandler = (
  overrideResponse?:
    | RefreshDevFlatpaksReturn
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RefreshDevFlatpaksReturn> | RefreshDevFlatpaksReturn),
) => {
  return http.post("*/auth/refresh-dev-flatpaks", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getDoLogoutAuthLogoutPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/auth/logout", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetDeleteuserAuthDeleteuserGetMockHandler = (
  overrideResponse?:
    | GetDeleteUserResult
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetDeleteUserResult> | GetDeleteUserResult),
) => {
  return http.get("*/auth/deleteuser", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetDeleteuserAuthDeleteuserGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getDoDeleteuserAuthDeleteuserPostMockHandler = (
  overrideResponse?:
    | DeleteUserResult
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<DeleteUserResult> | DeleteUserResult),
) => {
  return http.post("*/auth/deleteuser", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDoDeleteuserAuthDeleteuserPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getDoAgreeToPublisherAgreementAuthAcceptPublisherAgreementPostMockHandler =
  (
    overrideResponse?:
      | unknown
      | ((
          info: Parameters<Parameters<typeof http.post>[1]>[0],
        ) => Promise<unknown> | unknown),
  ) => {
    return http.post("*/auth/accept-publisher-agreement", async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    })
  }

export const getDoChangeDefaultAccountAuthChangeDefaultAccountPostMockHandler =
  (
    overrideResponse?:
      | void
      | ((
          info: Parameters<Parameters<typeof http.post>[1]>[0],
        ) => Promise<void> | void),
  ) => {
    return http.post("*/auth/change-default-account", async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 204 })
    })
  }
export const getAuthMock = () => [
  getGetLoginMethodsAuthLoginGetMockHandler(),
  getStartGithubFlowAuthLoginGithubGetMockHandler(),
  getContinueGithubFlowAuthLoginGithubPostMockHandler(),
  getStartGitlabFlowAuthLoginGitlabGetMockHandler(),
  getContinueGitlabFlowAuthLoginGitlabPostMockHandler(),
  getStartGnomeFlowAuthLoginGnomeGetMockHandler(),
  getContinueGnomeFlowAuthLoginGnomePostMockHandler(),
  getStartKdeFlowAuthLoginKdeGetMockHandler(),
  getContinueKdeFlowAuthLoginKdePostMockHandler(),
  getContinueGoogleFlowAuthLoginGooglePostMockHandler(),
  getGetUserinfoAuthUserinfoGetMockHandler(),
  getDoRefreshDevFlatpaksAuthRefreshDevFlatpaksPostMockHandler(),
  getDoLogoutAuthLogoutPostMockHandler(),
  getGetDeleteuserAuthDeleteuserGetMockHandler(),
  getDoDeleteuserAuthDeleteuserPostMockHandler(),
  getDoAgreeToPublisherAgreementAuthAcceptPublisherAgreementPostMockHandler(),
  getDoChangeDefaultAccountAuthChangeDefaultAccountPostMockHandler(),
]
