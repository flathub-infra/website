/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query"
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query"

/**
 * @summary Update
 */
export type updateUpdatePostResponse200 = {
  data: unknown
  status: 200
}

export type updateUpdatePostResponse500 = {
  data: null
  status: 500
}

export type updateUpdatePostResponseComposite =
  | updateUpdatePostResponse200
  | updateUpdatePostResponse500

export type updateUpdatePostResponse = updateUpdatePostResponseComposite & {
  headers: Headers
}

export const getUpdateUpdatePostUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/update`
}

export const updateUpdatePost = async (
  options?: RequestInit,
): Promise<updateUpdatePostResponse> => {
  const res = await fetch(getUpdateUpdatePostUrl(), {
    ...options,
    method: "POST",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: updateUpdatePostResponse["data"] = body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as updateUpdatePostResponse
}

export const getUpdateUpdatePostMutationOptions = <
  TError = null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUpdatePost>>,
    TError,
    void,
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUpdatePost>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["updateUpdatePost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUpdatePost>>,
    void
  > = () => {
    return updateUpdatePost(fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateUpdatePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUpdatePost>>
>

export type UpdateUpdatePostMutationError = null

/**
 * @summary Update
 */
export const useUpdateUpdatePost = <TError = null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUpdatePost>>,
      TError,
      void,
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUpdatePost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getUpdateUpdatePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Update Stats
 */
export type updateStatsUpdateStatsPostResponse200 = {
  data: unknown
  status: 200
}

export type updateStatsUpdateStatsPostResponse500 = {
  data: null
  status: 500
}

export type updateStatsUpdateStatsPostResponseComposite =
  | updateStatsUpdateStatsPostResponse200
  | updateStatsUpdateStatsPostResponse500

export type updateStatsUpdateStatsPostResponse =
  updateStatsUpdateStatsPostResponseComposite & {
    headers: Headers
  }

export const getUpdateStatsUpdateStatsPostUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/update/stats`
}

export const updateStatsUpdateStatsPost = async (
  options?: RequestInit,
): Promise<updateStatsUpdateStatsPostResponse> => {
  const res = await fetch(getUpdateStatsUpdateStatsPostUrl(), {
    ...options,
    method: "POST",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: updateStatsUpdateStatsPostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as updateStatsUpdateStatsPostResponse
}

export const getUpdateStatsUpdateStatsPostMutationOptions = <
  TError = null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>,
    TError,
    void,
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["updateStatsUpdateStatsPost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>,
    void
  > = () => {
    return updateStatsUpdateStatsPost(fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateStatsUpdateStatsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>
>

export type UpdateStatsUpdateStatsPostMutationError = null

/**
 * @summary Update Stats
 */
export const useUpdateStatsUpdateStatsPost = <
  TError = null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>,
      TError,
      void,
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getUpdateStatsUpdateStatsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Process any pending transfers which may be in the system
 * @summary Process Transfers
 */
export type processTransfersUpdateProcessPendingTransfersPostResponse200 = {
  data: unknown
  status: 200
}

export type processTransfersUpdateProcessPendingTransfersPostResponse500 = {
  data: null
  status: 500
}

export type processTransfersUpdateProcessPendingTransfersPostResponseComposite =

    | processTransfersUpdateProcessPendingTransfersPostResponse200
    | processTransfersUpdateProcessPendingTransfersPostResponse500

export type processTransfersUpdateProcessPendingTransfersPostResponse =
  processTransfersUpdateProcessPendingTransfersPostResponseComposite & {
    headers: Headers
  }

export const getProcessTransfersUpdateProcessPendingTransfersPostUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/update/process-pending-transfers`
}

export const processTransfersUpdateProcessPendingTransfersPost = async (
  options?: RequestInit,
): Promise<processTransfersUpdateProcessPendingTransfersPostResponse> => {
  const res = await fetch(
    getProcessTransfersUpdateProcessPendingTransfersPostUrl(),
    {
      ...options,
      method: "POST",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: processTransfersUpdateProcessPendingTransfersPostResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as processTransfersUpdateProcessPendingTransfersPostResponse
}

export const getProcessTransfersUpdateProcessPendingTransfersPostMutationOptions =
  <TError = null, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>
      >,
      TError,
      void,
      TContext
    >
    fetch?: RequestInit
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>
    >,
    TError,
    void,
    TContext
  > => {
    const mutationKey = ["processTransfersUpdateProcessPendingTransfersPost"]
    const { mutation: mutationOptions, fetch: fetchOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, fetch: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>
      >,
      void
    > = () => {
      return processTransfersUpdateProcessPendingTransfersPost(fetchOptions)
    }

    return { mutationFn, ...mutationOptions }
  }

export type ProcessTransfersUpdateProcessPendingTransfersPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>
    >
  >

export type ProcessTransfersUpdateProcessPendingTransfersPostMutationError =
  null

/**
 * @summary Process Transfers
 */
export const useProcessTransfersUpdateProcessPendingTransfersPost = <
  TError = null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>
      >,
      TError,
      void,
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getProcessTransfersUpdateProcessPendingTransfersPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
