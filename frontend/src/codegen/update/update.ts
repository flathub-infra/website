/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query"
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query"

import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

/**
 * @summary Update
 */
export const updateUpdatePost = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/update`,
    undefined,
    options,
  )
}

export const getUpdateUpdatePostMutationOptions = <
  TError = AxiosError<null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUpdatePost>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUpdatePost>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["updateUpdatePost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUpdatePost>>,
    void
  > = () => {
    return updateUpdatePost(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateUpdatePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUpdatePost>>
>

export type UpdateUpdatePostMutationError = AxiosError<null>

/**
 * @summary Update
 */
export const useUpdateUpdatePost = <
  TError = AxiosError<null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUpdatePost>>,
      TError,
      void,
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUpdatePost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getUpdateUpdatePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Update Stats
 */
export const updateStatsUpdateStatsPost = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/update/stats`,
    undefined,
    options,
  )
}

export const getUpdateStatsUpdateStatsPostMutationOptions = <
  TError = AxiosError<null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["updateStatsUpdateStatsPost"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>,
    void
  > = () => {
    return updateStatsUpdateStatsPost(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateStatsUpdateStatsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>
>

export type UpdateStatsUpdateStatsPostMutationError = AxiosError<null>

/**
 * @summary Update Stats
 */
export const useUpdateStatsUpdateStatsPost = <
  TError = AxiosError<null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>,
      TError,
      void,
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateStatsUpdateStatsPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getUpdateStatsUpdateStatsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Process any pending transfers which may be in the system
 * @summary Process Transfers
 */
export const processTransfersUpdateProcessPendingTransfersPost = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/update/process-pending-transfers`,
    undefined,
    options,
  )
}

export const getProcessTransfersUpdateProcessPendingTransfersPostMutationOptions =
  <TError = AxiosError<null>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>
      >,
      TError,
      void,
      TContext
    >
    axios?: AxiosRequestConfig
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>
    >,
    TError,
    void,
    TContext
  > => {
    const mutationKey = ["processTransfersUpdateProcessPendingTransfersPost"]
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>
      >,
      void
    > = () => {
      return processTransfersUpdateProcessPendingTransfersPost(axiosOptions)
    }

    return { mutationFn, ...mutationOptions }
  }

export type ProcessTransfersUpdateProcessPendingTransfersPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>
    >
  >

export type ProcessTransfersUpdateProcessPendingTransfersPostMutationError =
  AxiosError<null>

/**
 * @summary Process Transfers
 */
export const useProcessTransfersUpdateProcessPendingTransfersPost = <
  TError = AxiosError<null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>
      >,
      TError,
      void,
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof processTransfersUpdateProcessPendingTransfersPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getProcessTransfersUpdateProcessPendingTransfersPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
