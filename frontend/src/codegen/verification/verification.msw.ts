/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import {
  AvailableLoginMethodStatus,
  AvailableMethodType,
  ErrorDetail,
  LoginProvider,
  VerificationMethod,
} from ".././model"
import type {
  AvailableMethods,
  LinkResponse,
  VerificationStatus,
  VerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPost200,
  WebsiteVerificationResult,
  WebsiteVerificationToken,
} from ".././model"

export const getGetVerificationStatusVerificationAppIdStatusGetResponseMock = (
  overrideResponse: any = {},
): VerificationStatus => ({
  detail: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), {}]),
    undefined,
  ]),
  login_is_organization: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.datatype.boolean(), {}]),
    undefined,
  ]),
  login_name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), {}]),
    undefined,
  ]),
  login_provider: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(LoginProvider)),
      {},
    ]),
    undefined,
  ]),
  method: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(VerificationMethod)),
      {},
    ]),
    undefined,
  ]),
  timestamp: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), {}]),
    undefined,
  ]),
  verified: faker.datatype.boolean(),
  website: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), {}]),
    undefined,
  ]),
  ...overrideResponse,
})

export const getGetAvailableMethodsVerificationAppIdAvailableMethodsGetResponseMock =
  (overrideResponse: any = {}): AvailableMethods => ({
    detail: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), {}]),
      undefined,
    ]),
    methods: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          login_is_organization: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.datatype.boolean(), {}]),
            undefined,
          ]),
          login_name: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), {}]),
            undefined,
          ]),
          login_provider: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(Object.values(LoginProvider)),
              {},
            ]),
            undefined,
          ]),
          login_status: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(
                Object.values(AvailableLoginMethodStatus),
              ),
              {},
            ]),
            undefined,
          ]),
          method: faker.helpers.arrayElement(
            Object.values(AvailableMethodType),
          ),
          website: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), {}]),
            undefined,
          ]),
          website_token: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), {}]),
            undefined,
          ]),
          ...overrideResponse,
        })),
        {},
      ]),
      undefined,
    ]),
    ...overrideResponse,
  })

export const getVerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPostResponseMock =
  (
    overrideResponse: any = {},
  ): VerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPost200 =>
    faker.helpers.arrayElement([
      {
        detail: faker.helpers.arrayElement(Object.values(ErrorDetail)),
        ...overrideResponse,
      },
      {},
    ])

export const getRequestOrganizationAccessGithubVerificationRequestOrganizationAccessGithubGetResponseMock =
  (overrideResponse: any = {}): LinkResponse => ({
    link: faker.word.sample(),
    ...overrideResponse,
  })

export const getSetupWebsiteVerificationVerificationAppIdSetupWebsiteVerificationPostResponseMock =
  (overrideResponse: any = {}): WebsiteVerificationToken => ({
    domain: faker.word.sample(),
    token: faker.word.sample(),
    ...overrideResponse,
  })

export const getConfirmWebsiteVerificationVerificationAppIdConfirmWebsiteVerificationPostResponseMock =
  (overrideResponse: any = {}): WebsiteVerificationResult => ({
    detail: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ErrorDetail)),
        {},
      ]),
      undefined,
    ]),
    status_code: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        {},
      ]),
      undefined,
    ]),
    verified: faker.datatype.boolean(),
    ...overrideResponse,
  })

export const getGetVerificationStatusVerificationAppIdStatusGetMockHandler = (
  overrideResponse?: VerificationStatus,
) => {
  return http.get("*/verification/:appId/status", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetVerificationStatusVerificationAppIdStatusGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetAvailableMethodsVerificationAppIdAvailableMethodsGetMockHandler =
  (overrideResponse?: AvailableMethods) => {
    return http.get("*/verification/:appId/available-methods", async () => {
      await delay(1000)
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getGetAvailableMethodsVerificationAppIdAvailableMethodsGetResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      )
    })
  }

export const getVerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPostMockHandler =
  (
    overrideResponse?: VerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPost200,
  ) => {
    return http.post(
      "*/verification/:appId/verify-by-login-provider",
      async () => {
        await delay(1000)
        return new HttpResponse(
          JSON.stringify(
            overrideResponse
              ? overrideResponse
              : getVerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPostResponseMock(),
          ),
          {
            status: 200,
            headers: {
              "Content-Type": "application/json",
            },
          },
        )
      },
    )
  }

export const getRequestOrganizationAccessGithubVerificationRequestOrganizationAccessGithubGetMockHandler =
  (overrideResponse?: LinkResponse) => {
    return http.get(
      "*/verification/request-organization-access/github",
      async () => {
        await delay(1000)
        return new HttpResponse(
          JSON.stringify(
            overrideResponse
              ? overrideResponse
              : getRequestOrganizationAccessGithubVerificationRequestOrganizationAccessGithubGetResponseMock(),
          ),
          {
            status: 200,
            headers: {
              "Content-Type": "application/json",
            },
          },
        )
      },
    )
  }

export const getSetupWebsiteVerificationVerificationAppIdSetupWebsiteVerificationPostMockHandler =
  (overrideResponse?: WebsiteVerificationToken) => {
    return http.post(
      "*/verification/:appId/setup-website-verification",
      async () => {
        await delay(1000)
        return new HttpResponse(
          JSON.stringify(
            overrideResponse
              ? overrideResponse
              : getSetupWebsiteVerificationVerificationAppIdSetupWebsiteVerificationPostResponseMock(),
          ),
          {
            status: 200,
            headers: {
              "Content-Type": "application/json",
            },
          },
        )
      },
    )
  }

export const getConfirmWebsiteVerificationVerificationAppIdConfirmWebsiteVerificationPostMockHandler =
  (overrideResponse?: WebsiteVerificationResult) => {
    return http.post(
      "*/verification/:appId/confirm-website-verification",
      async () => {
        await delay(1000)
        return new HttpResponse(
          JSON.stringify(
            overrideResponse
              ? overrideResponse
              : getConfirmWebsiteVerificationVerificationAppIdConfirmWebsiteVerificationPostResponseMock(),
          ),
          {
            status: 200,
            headers: {
              "Content-Type": "application/json",
            },
          },
        )
      },
    )
  }

export const getUnverifyVerificationAppIdUnverifyPostMockHandler = () => {
  return http.post("*/verification/:appId/unverify", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getSwitchToDirectUploadVerificationAppIdSwitchToDirectUploadPostMockHandler =
  () => {
    return http.post(
      "*/verification/:appId/switch_to_direct_upload",
      async () => {
        await delay(1000)
        return new HttpResponse(null, {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        })
      },
    )
  }

export const getArchiveVerificationAppIdArchivePostMockHandler = () => {
  return http.post("*/verification/:appId/archive", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}
export const getVerificationMock = () => [
  getGetVerificationStatusVerificationAppIdStatusGetMockHandler(),
  getGetAvailableMethodsVerificationAppIdAvailableMethodsGetMockHandler(),
  getVerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPostMockHandler(),
  getRequestOrganizationAccessGithubVerificationRequestOrganizationAccessGithubGetMockHandler(),
  getSetupWebsiteVerificationVerificationAppIdSetupWebsiteVerificationPostMockHandler(),
  getConfirmWebsiteVerificationVerificationAppIdConfirmWebsiteVerificationPostMockHandler(),
  getUnverifyVerificationAppIdUnverifyPostMockHandler(),
  getSwitchToDirectUploadVerificationAppIdSwitchToDirectUploadPostMockHandler(),
  getArchiveVerificationAppIdArchivePostMockHandler(),
]
