/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"

import { HttpResponse, delay, http } from "msw"
import type { RequestHandlerOptions } from "msw"

import {
  AvailableLoginMethodStatus,
  AvailableMethodType,
  ErrorDetail,
  LoginProvider,
} from ".././model"
import type {
  AvailableMethods,
  GetVerificationStatusVerificationAppIdStatusGet200,
  LinkResponse,
  VerificationStatusLoginProvider,
  VerificationStatusManual,
  VerificationStatusNone,
  VerificationStatusWebsite,
  VerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPost200,
  WebsiteVerificationResult,
  WebsiteVerificationToken,
} from ".././model"

export const getGetVerificationStatusVerificationAppIdStatusGetResponseVerificationStatusNoneMock =
  (
    overrideResponse: Partial<VerificationStatusNone> = {},
  ): VerificationStatusNone => ({
    ...{
      verified: false,
      method: "none",
      detail: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    },
    ...overrideResponse,
  })

export const getGetVerificationStatusVerificationAppIdStatusGetResponseVerificationStatusManualMock =
  (
    overrideResponse: Partial<VerificationStatusManual> = {},
  ): VerificationStatusManual => ({
    ...{
      verified: true,
      timestamp: faker.number.int({ min: undefined, max: undefined }),
      method: "manual",
      detail: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    },
    ...overrideResponse,
  })

export const getGetVerificationStatusVerificationAppIdStatusGetResponseVerificationStatusWebsiteMock =
  (
    overrideResponse: Partial<VerificationStatusWebsite> = {},
  ): VerificationStatusWebsite => ({
    ...{
      verified: true,
      timestamp: faker.number.int({ min: undefined, max: undefined }),
      method: "website",
      website: faker.string.alpha({ length: { min: 10, max: 20 } }),
      detail: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    },
    ...overrideResponse,
  })

export const getGetVerificationStatusVerificationAppIdStatusGetResponseVerificationStatusLoginProviderMock =
  (
    overrideResponse: Partial<VerificationStatusLoginProvider> = {},
  ): VerificationStatusLoginProvider => ({
    ...{
      verified: true,
      timestamp: faker.number.int({ min: undefined, max: undefined }),
      method: "login_provider",
      login_provider: faker.helpers.arrayElement(Object.values(LoginProvider)),
      login_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      detail: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      login_is_organization: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.datatype.boolean(), null]),
        undefined,
      ]),
    },
    ...overrideResponse,
  })

export const getGetVerificationStatusVerificationAppIdStatusGetResponseMock =
  (): GetVerificationStatusVerificationAppIdStatusGet200 =>
    faker.helpers.arrayElement([
      {
        ...getGetVerificationStatusVerificationAppIdStatusGetResponseVerificationStatusNoneMock(),
      },
      {
        ...getGetVerificationStatusVerificationAppIdStatusGetResponseVerificationStatusManualMock(),
      },
      {
        ...getGetVerificationStatusVerificationAppIdStatusGetResponseVerificationStatusWebsiteMock(),
      },
      {
        ...getGetVerificationStatusVerificationAppIdStatusGetResponseVerificationStatusLoginProviderMock(),
      },
    ])

export const getGetAvailableMethodsVerificationAppIdAvailableMethodsGetResponseMock =
  (overrideResponse: Partial<AvailableMethods> = {}): AvailableMethods => ({
    methods: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          method: faker.helpers.arrayElement(
            Object.values(AvailableMethodType),
          ),
          website: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          website_token: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          login_provider: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(Object.values(LoginProvider)),
              null,
            ]),
            undefined,
          ]),
          login_name: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          login_is_organization: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.datatype.boolean(), null]),
            undefined,
          ]),
          login_status: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(
                Object.values(AvailableLoginMethodStatus),
              ),
              null,
            ]),
            undefined,
          ]),
        })),
        null,
      ]),
      undefined,
    ]),
    detail: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    ...overrideResponse,
  })

export const getVerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPostResponseMock =
  (): VerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPost200 =>
    faker.helpers.arrayElement([
      { detail: faker.helpers.arrayElement(Object.values(ErrorDetail)) },
      null,
    ])

export const getRequestOrganizationAccessGithubVerificationRequestOrganizationAccessGithubGetResponseMock =
  (overrideResponse: Partial<LinkResponse> = {}): LinkResponse => ({
    link: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
  })

export const getSetupWebsiteVerificationVerificationAppIdSetupWebsiteVerificationPostResponseMock =
  (
    overrideResponse: Partial<WebsiteVerificationToken> = {},
  ): WebsiteVerificationToken => ({
    domain: faker.string.alpha({ length: { min: 10, max: 20 } }),
    token: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
  })

export const getConfirmWebsiteVerificationVerificationAppIdConfirmWebsiteVerificationPostResponseMock =
  (
    overrideResponse: Partial<WebsiteVerificationResult> = {},
  ): WebsiteVerificationResult => ({
    verified: faker.datatype.boolean(),
    detail: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(ErrorDetail)),
        null,
      ]),
      undefined,
    ]),
    status_code: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    ...overrideResponse,
  })

export const getGetVerificationStatusVerificationAppIdStatusGetMockHandler = (
  overrideResponse?:
    | GetVerificationStatusVerificationAppIdStatusGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetVerificationStatusVerificationAppIdStatusGet200>
        | GetVerificationStatusVerificationAppIdStatusGet200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/verification/:appId/status",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetVerificationStatusVerificationAppIdStatusGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetAvailableMethodsVerificationAppIdAvailableMethodsGetMockHandler =
  (
    overrideResponse?:
      | AvailableMethods
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => Promise<AvailableMethods> | AvailableMethods),
    options?: RequestHandlerOptions,
  ) => {
    return http.get(
      "*/verification/:appId/available-methods",
      async (info) => {
        await delay(1000)

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getGetAvailableMethodsVerificationAppIdAvailableMethodsGetResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        )
      },
      options,
    )
  }

export const getVerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPostMockHandler =
  (
    overrideResponse?:
      | VerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPost200
      | ((
          info: Parameters<Parameters<typeof http.post>[1]>[0],
        ) =>
          | Promise<VerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPost200>
          | VerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPost200),
    options?: RequestHandlerOptions,
  ) => {
    return http.post(
      "*/verification/:appId/verify-by-login-provider",
      async (info) => {
        await delay(1000)

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getVerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPostResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        )
      },
      options,
    )
  }

export const getRequestOrganizationAccessGithubVerificationRequestOrganizationAccessGithubGetMockHandler =
  (
    overrideResponse?:
      | LinkResponse
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => Promise<LinkResponse> | LinkResponse),
    options?: RequestHandlerOptions,
  ) => {
    return http.get(
      "*/verification/request-organization-access/github",
      async (info) => {
        await delay(1000)

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getRequestOrganizationAccessGithubVerificationRequestOrganizationAccessGithubGetResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        )
      },
      options,
    )
  }

export const getSetupWebsiteVerificationVerificationAppIdSetupWebsiteVerificationPostMockHandler =
  (
    overrideResponse?:
      | WebsiteVerificationToken
      | ((
          info: Parameters<Parameters<typeof http.post>[1]>[0],
        ) => Promise<WebsiteVerificationToken> | WebsiteVerificationToken),
    options?: RequestHandlerOptions,
  ) => {
    return http.post(
      "*/verification/:appId/setup-website-verification",
      async (info) => {
        await delay(1000)

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getSetupWebsiteVerificationVerificationAppIdSetupWebsiteVerificationPostResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        )
      },
      options,
    )
  }

export const getConfirmWebsiteVerificationVerificationAppIdConfirmWebsiteVerificationPostMockHandler =
  (
    overrideResponse?:
      | WebsiteVerificationResult
      | ((
          info: Parameters<Parameters<typeof http.post>[1]>[0],
        ) => Promise<WebsiteVerificationResult> | WebsiteVerificationResult),
    options?: RequestHandlerOptions,
  ) => {
    return http.post(
      "*/verification/:appId/confirm-website-verification",
      async (info) => {
        await delay(1000)

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getConfirmWebsiteVerificationVerificationAppIdConfirmWebsiteVerificationPostResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        )
      },
      options,
    )
  }

export const getUnverifyVerificationAppIdUnverifyPostMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/verification/:appId/unverify",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 204 })
    },
    options,
  )
}

export const getSwitchToDirectUploadVerificationAppIdSwitchToDirectUploadPostMockHandler =
  (
    overrideResponse?:
      | void
      | ((
          info: Parameters<Parameters<typeof http.post>[1]>[0],
        ) => Promise<void> | void),
    options?: RequestHandlerOptions,
  ) => {
    return http.post(
      "*/verification/:appId/switch_to_direct_upload",
      async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
          await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 204 })
      },
      options,
    )
  }

export const getArchiveVerificationAppIdArchivePostMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/verification/:appId/archive",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 204 })
    },
    options,
  )
}
export const getVerificationMock = () => [
  getGetVerificationStatusVerificationAppIdStatusGetMockHandler(),
  getGetAvailableMethodsVerificationAppIdAvailableMethodsGetMockHandler(),
  getVerifyByLoginProviderVerificationAppIdVerifyByLoginProviderPostMockHandler(),
  getRequestOrganizationAccessGithubVerificationRequestOrganizationAccessGithubGetMockHandler(),
  getSetupWebsiteVerificationVerificationAppIdSetupWebsiteVerificationPostMockHandler(),
  getConfirmWebsiteVerificationVerificationAppIdConfirmWebsiteVerificationPostMockHandler(),
  getUnverifyVerificationAppIdUnverifyPostMockHandler(),
  getSwitchToDirectUploadVerificationAppIdSwitchToDirectUploadPostMockHandler(),
  getArchiveVerificationAppIdArchivePostMockHandler(),
]
