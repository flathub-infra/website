/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  GetStatsForAppStatsAppIdGet200,
  GetStatsForAppStatsAppIdGetParams,
  GetStatsStatsGet200,
  HTTPValidationError,
} from ".././model"

/**
 * @summary Get Stats
 */
export type getStatsStatsGetResponse200 = {
  data: GetStatsStatsGet200
  status: 200
}

export type getStatsStatsGetResponse404 = {
  data: null
  status: 404
}

export type getStatsStatsGetResponseComposite =
  | getStatsStatsGetResponse200
  | getStatsStatsGetResponse404

export type getStatsStatsGetResponse = getStatsStatsGetResponseComposite & {
  headers: Headers
}

export const getGetStatsStatsGetUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/stats/`
}

export const getStatsStatsGet = async (
  options?: RequestInit,
): Promise<getStatsStatsGetResponse> => {
  const res = await fetch(getGetStatsStatsGetUrl(), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getStatsStatsGetResponse["data"] = body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getStatsStatsGetResponse
}

export const getGetStatsStatsGetQueryKey = () => {
  return [`${process.env.NEXT_PUBLIC_API_BASE_URI}/stats/`] as const
}

export const getGetStatsStatsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = null,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getStatsStatsGet>>, TError, TData>
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetStatsStatsGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getStatsStatsGet>>
  > = ({ signal }) => getStatsStatsGet({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStatsStatsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStatsStatsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStatsStatsGet>>
>
export type GetStatsStatsGetQueryError = null

export function useGetStatsStatsGet<
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = null,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsStatsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getStatsStatsGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetStatsStatsGet<
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsStatsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsStatsGet>>,
          TError,
          Awaited<ReturnType<typeof getStatsStatsGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetStatsStatsGet<
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsStatsGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Stats
 */

export function useGetStatsStatsGet<
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = null,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsStatsGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetStatsStatsGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Stats For App
 */
export type getStatsForAppStatsAppIdGetResponse200 = {
  data: GetStatsForAppStatsAppIdGet200
  status: 200
}

export type getStatsForAppStatsAppIdGetResponse404 = {
  data: null
  status: 404
}

export type getStatsForAppStatsAppIdGetResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type getStatsForAppStatsAppIdGetResponseComposite =
  | getStatsForAppStatsAppIdGetResponse200
  | getStatsForAppStatsAppIdGetResponse404
  | getStatsForAppStatsAppIdGetResponse422

export type getStatsForAppStatsAppIdGetResponse =
  getStatsForAppStatsAppIdGetResponseComposite & {
    headers: Headers
  }

export const getGetStatsForAppStatsAppIdGetUrl = (
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/stats/${appId}?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/stats/${appId}`
}

export const getStatsForAppStatsAppIdGet = async (
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: RequestInit,
): Promise<getStatsForAppStatsAppIdGetResponse> => {
  const res = await fetch(getGetStatsForAppStatsAppIdGetUrl(appId, params), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getStatsForAppStatsAppIdGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getStatsForAppStatsAppIdGetResponse
}

export const getGetStatsForAppStatsAppIdGetQueryKey = (
  appId?: string,
  params?: GetStatsForAppStatsAppIdGetParams,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/stats/${appId}`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetStatsForAppStatsAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = null | HTTPValidationError,
>(
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetStatsForAppStatsAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>
  > = ({ signal }) =>
    getStatsForAppStatsAppIdGet(appId, params, { signal, ...fetchOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStatsForAppStatsAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>
>
export type GetStatsForAppStatsAppIdGetQueryError = null | HTTPValidationError

export function useGetStatsForAppStatsAppIdGet<
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = null | HTTPValidationError,
>(
  appId: string,
  params: undefined | GetStatsForAppStatsAppIdGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetStatsForAppStatsAppIdGet<
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = null | HTTPValidationError,
>(
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetStatsForAppStatsAppIdGet<
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = null | HTTPValidationError,
>(
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Stats For App
 */

export function useGetStatsForAppStatsAppIdGet<
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = null | HTTPValidationError,
>(
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetStatsForAppStatsAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
