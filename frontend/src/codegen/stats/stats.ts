/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"
import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"
import type {
  GetStatsForAppStatsAppIdGetParams,
  GetStatsStatsGet200,
  HTTPValidationError,
} from ".././model"

/**
 * @summary Get Stats
 */
export const getStatsStatsGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetStatsStatsGet200>> => {
  return axios.get(`/stats/`, options)
}

export const getGetStatsStatsGetQueryKey = () => {
  return [`/stats/`] as const
}

export const getGetStatsStatsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getStatsStatsGet>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetStatsStatsGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getStatsStatsGet>>
  > = ({ signal }) => getStatsStatsGet({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStatsStatsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStatsStatsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStatsStatsGet>>
>
export type GetStatsStatsGetQueryError = AxiosError<unknown>

export function useGetStatsStatsGet<
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getStatsStatsGet>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getStatsStatsGet>>,
        TError,
        Awaited<ReturnType<typeof getStatsStatsGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetStatsStatsGet<
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getStatsStatsGet>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getStatsStatsGet>>,
        TError,
        Awaited<ReturnType<typeof getStatsStatsGet>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetStatsStatsGet<
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getStatsStatsGet>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Stats
 */

export function useGetStatsStatsGet<
  TData = Awaited<ReturnType<typeof getStatsStatsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getStatsStatsGet>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetStatsStatsGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Stats For App
 */
export const getStatsForAppStatsAppIdGet = (
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/stats/${appId}`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getGetStatsForAppStatsAppIdGetQueryKey = (
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
) => {
  return [`/stats/${appId}`, ...(params ? [params] : [])] as const
}

export const getGetStatsForAppStatsAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetStatsForAppStatsAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>
  > = ({ signal }) =>
    getStatsForAppStatsAppIdGet(appId, params, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStatsForAppStatsAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>
>
export type GetStatsForAppStatsAppIdGetQueryError =
  AxiosError<HTTPValidationError>

export function useGetStatsForAppStatsAppIdGet<
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params: undefined | GetStatsForAppStatsAppIdGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetStatsForAppStatsAppIdGet<
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetStatsForAppStatsAppIdGet<
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Stats For App
 */

export function useGetStatsForAppStatsAppIdGet<
  TData = Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  appId: string,
  params?: GetStatsForAppStatsAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStatsForAppStatsAppIdGet>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetStatsForAppStatsAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
