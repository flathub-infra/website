/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"

import { HttpResponse, delay, http } from "msw"
import type { RequestHandlerOptions } from "msw"

import type {
  GetStatsForAppStatsAppIdGet200,
  GetStatsStatsGet200,
} from ".././model"

export const getGetStatsStatsGetResponseMock = (): GetStatsStatsGet200 =>
  faker.helpers.arrayElement([
    {
      totals: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      countries: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      downloads_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      updates_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      delta_downloads_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      category_totals: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        category: faker.string.alpha({ length: { min: 10, max: 20 } }),
        count: faker.number.int({ min: undefined, max: undefined }),
      })),
    },
    null,
  ])

export const getGetStatsForAppStatsAppIdGetResponseMock =
  (): GetStatsForAppStatsAppIdGet200 =>
    faker.helpers.arrayElement([
      {
        installs_total: faker.number.int({ min: undefined, max: undefined }),
        installs_per_day: {
          [faker.string.alphanumeric(5)]: faker.number.int({
            min: undefined,
            max: undefined,
          }),
        },
        installs_per_country: {
          [faker.string.alphanumeric(5)]: faker.number.int({
            min: undefined,
            max: undefined,
          }),
        },
        installs_last_month: faker.number.int({
          min: undefined,
          max: undefined,
        }),
        installs_last_7_days: faker.number.int({
          min: undefined,
          max: undefined,
        }),
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ])

export const getGetStatsStatsGetMockHandler = (
  overrideResponse?:
    | GetStatsStatsGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetStatsStatsGet200> | GetStatsStatsGet200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/stats/",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetStatsStatsGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetStatsForAppStatsAppIdGetMockHandler = (
  overrideResponse?:
    | GetStatsForAppStatsAppIdGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetStatsForAppStatsAppIdGet200>
        | GetStatsForAppStatsAppIdGet200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/stats/:appId",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetStatsForAppStatsAppIdGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}
export const getStatsMock = () => [
  getGetStatsStatsGetMockHandler(),
  getGetStatsForAppStatsAppIdGetMockHandler(),
]
