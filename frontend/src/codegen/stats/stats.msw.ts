/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"

import { HttpResponse, delay, http } from "msw"

import type { GetStatsStatsGet200 } from ".././model"

export const getGetStatsStatsGetResponseMock = (): GetStatsStatsGet200 =>
  faker.helpers.arrayElement([
    {
      totals: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      countries: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      downloads_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      updates_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      delta_downloads_per_day: {
        [faker.string.alphanumeric(5)]: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      },
      category_totals: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        category: faker.string.alpha(20),
        count: faker.number.int({ min: undefined, max: undefined }),
      })),
    },
    null,
  ])

export const getGetStatsStatsGetMockHandler = (
  overrideResponse?:
    | GetStatsStatsGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetStatsStatsGet200> | GetStatsStatsGet200),
) => {
  return http.get("*/stats/", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetStatsStatsGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetStatsForAppStatsAppIdGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/stats/:appId", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getStatsMock = () => [
  getGetStatsStatsGetMockHandler(),
  getGetStatsForAppStatsAppIdGetMockHandler(),
]
