/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

/**
 * @summary Get Recently Updated Apps Feed
 */
export type getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetResponse200 = {
  data: unknown
  status: 200
}

export type getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetResponseComposite =
  getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetResponse200

export type getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetResponse =
  getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetResponseComposite & {
    headers: Headers
  }

export const getGetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/feed/recently-updated`
}

export const getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet = async (
  options?: RequestInit,
): Promise<getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetResponse> => {
  const res = await fetch(
    getGetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetUrl(),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetResponse
}

export const getGetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetQueryKey =
  () => {
    return [
      `${process.env.NEXT_PUBLIC_API_BASE_URI}/feed/recently-updated`,
    ] as const
  }

export const getGetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<
        ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
      >,
      TError,
      TData
    >
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>>
  > = ({ signal }) =>
    getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet({
      signal,
      ...fetchOptions,
    })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<
      ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
    >,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>>
  >
export type GetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetQueryError = unknown

export function useGetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
  >,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Recently Updated Apps Feed
 */

export function useGetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet<
  TData = Awaited<
    ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
  >,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGet>
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetRecentlyUpdatedAppsFeedFeedRecentlyUpdatedGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get New Apps Feed
 */
export type getNewAppsFeedFeedNewGetResponse200 = {
  data: unknown
  status: 200
}

export type getNewAppsFeedFeedNewGetResponseComposite =
  getNewAppsFeedFeedNewGetResponse200

export type getNewAppsFeedFeedNewGetResponse =
  getNewAppsFeedFeedNewGetResponseComposite & {
    headers: Headers
  }

export const getGetNewAppsFeedFeedNewGetUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/feed/new`
}

export const getNewAppsFeedFeedNewGet = async (
  options?: RequestInit,
): Promise<getNewAppsFeedFeedNewGetResponse> => {
  const res = await fetch(getGetNewAppsFeedFeedNewGetUrl(), {
    ...options,
    method: "GET",
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getNewAppsFeedFeedNewGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getNewAppsFeedFeedNewGetResponse
}

export const getGetNewAppsFeedFeedNewGetQueryKey = () => {
  return [`${process.env.NEXT_PUBLIC_API_BASE_URI}/feed/new`] as const
}

export const getGetNewAppsFeedFeedNewGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
      TError,
      TData
    >
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetNewAppsFeedFeedNewGetQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>
  > = ({ signal }) => getNewAppsFeedFeedNewGet({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNewAppsFeedFeedNewGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>
>
export type GetNewAppsFeedFeedNewGetQueryError = unknown

export function useGetNewAppsFeedFeedNewGet<
  TData = Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
          TError,
          Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetNewAppsFeedFeedNewGet<
  TData = Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
          TError,
          Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetNewAppsFeedFeedNewGet<
  TData = Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get New Apps Feed
 */

export function useGetNewAppsFeedFeedNewGet<
  TData = Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewAppsFeedFeedNewGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetNewAppsFeedFeedNewGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
