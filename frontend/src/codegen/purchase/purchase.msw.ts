/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"

import { HttpResponse, delay, http } from "msw"
import type { RequestHandlerOptions } from "msw"

import { LoginProvider } from ".././model"
import type {
  CheckPurchasesResponseSuccess,
  GenerateUpdateTokenResponse,
  GetDownloadTokenResponse,
  StorefrontInfo,
  VerificationStatusLoginProvider,
  VerificationStatusManual,
  VerificationStatusNone,
  VerificationStatusWebsite,
} from ".././model"

export const getGetStorefrontInfoPurchasesStorefrontInfoGetResponseVerificationStatusNoneMock =
  (
    overrideResponse: Partial<VerificationStatusNone> = {},
  ): VerificationStatusNone => ({
    ...{
      verified: false,
      method: "none",
      detail: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    },
    ...overrideResponse,
  })

export const getGetStorefrontInfoPurchasesStorefrontInfoGetResponseVerificationStatusManualMock =
  (
    overrideResponse: Partial<VerificationStatusManual> = {},
  ): VerificationStatusManual => ({
    ...{
      verified: true,
      timestamp: faker.number.int({ min: undefined, max: undefined }),
      method: "manual",
      detail: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    },
    ...overrideResponse,
  })

export const getGetStorefrontInfoPurchasesStorefrontInfoGetResponseVerificationStatusWebsiteMock =
  (
    overrideResponse: Partial<VerificationStatusWebsite> = {},
  ): VerificationStatusWebsite => ({
    ...{
      verified: true,
      timestamp: faker.number.int({ min: undefined, max: undefined }),
      method: "website",
      website: faker.string.alpha({ length: { min: 10, max: 20 } }),
      detail: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    },
    ...overrideResponse,
  })

export const getGetStorefrontInfoPurchasesStorefrontInfoGetResponseVerificationStatusLoginProviderMock =
  (
    overrideResponse: Partial<VerificationStatusLoginProvider> = {},
  ): VerificationStatusLoginProvider => ({
    ...{
      verified: true,
      timestamp: faker.number.int({ min: undefined, max: undefined }),
      method: "login_provider",
      login_provider: faker.helpers.arrayElement(Object.values(LoginProvider)),
      login_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      detail: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      login_is_organization: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.datatype.boolean(), null]),
        undefined,
      ]),
    },
    ...overrideResponse,
  })

export const getGetStorefrontInfoPurchasesStorefrontInfoGetResponseMock = (
  overrideResponse: Partial<StorefrontInfo> = {},
): StorefrontInfo => ({
  verification: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          ...getGetStorefrontInfoPurchasesStorefrontInfoGetResponseVerificationStatusNoneMock(),
        },
        {
          ...getGetStorefrontInfoPurchasesStorefrontInfoGetResponseVerificationStatusManualMock(),
        },
        {
          ...getGetStorefrontInfoPurchasesStorefrontInfoGetResponseVerificationStatusWebsiteMock(),
        },
        {
          ...getGetStorefrontInfoPurchasesStorefrontInfoGetResponseVerificationStatusLoginProviderMock(),
        },
      ]),
      null,
    ]),
    undefined,
  ]),
  pricing: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        recommended_donation: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        minimum_payment: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  is_free_software: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
})

export const getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponseMock =
  (): boolean => faker.datatype.boolean()

export const getGetUpdateTokenPurchasesGenerateUpdateTokenPostResponseMock = (
  overrideResponse: Partial<GenerateUpdateTokenResponse> = {},
): GenerateUpdateTokenResponse => ({
  token: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
})

export const getCheckPurchasesPurchasesCheckPurchasesPostResponseMock = (
  overrideResponse: Partial<CheckPurchasesResponseSuccess> = {},
): CheckPurchasesResponseSuccess => ({
  status: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
})

export const getGetDownloadTokenPurchasesGenerateDownloadTokenPostResponseMock =
  (
    overrideResponse: Partial<GetDownloadTokenResponse> = {},
  ): GetDownloadTokenResponse => ({
    token: faker.string.alpha({ length: { min: 10, max: 20 } }),
    update_token: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
  })

export const getGetStorefrontInfoPurchasesStorefrontInfoGetMockHandler = (
  overrideResponse?:
    | StorefrontInfo
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StorefrontInfo> | StorefrontInfo),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/purchases/storefront-info",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetStorefrontInfoPurchasesStorefrontInfoGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetMockHandler =
  (
    overrideResponse?:
      | boolean
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => Promise<boolean> | boolean),
    options?: RequestHandlerOptions,
  ) => {
    return http.get(
      "*/purchases/storefront-info/is-free-software",
      async (info) => {
        await delay(1000)

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        )
      },
      options,
    )
  }

export const getGetUpdateTokenPurchasesGenerateUpdateTokenPostMockHandler = (
  overrideResponse?:
    | GenerateUpdateTokenResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<GenerateUpdateTokenResponse> | GenerateUpdateTokenResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/purchases/generate-update-token",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetUpdateTokenPurchasesGenerateUpdateTokenPostResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getCheckPurchasesPurchasesCheckPurchasesPostMockHandler = (
  overrideResponse?:
    | CheckPurchasesResponseSuccess
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<CheckPurchasesResponseSuccess>
        | CheckPurchasesResponseSuccess),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/purchases/check-purchases",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCheckPurchasesPurchasesCheckPurchasesPostResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      )
    },
    options,
  )
}

export const getGetDownloadTokenPurchasesGenerateDownloadTokenPostMockHandler =
  (
    overrideResponse?:
      | GetDownloadTokenResponse
      | ((
          info: Parameters<Parameters<typeof http.post>[1]>[0],
        ) => Promise<GetDownloadTokenResponse> | GetDownloadTokenResponse),
    options?: RequestHandlerOptions,
  ) => {
    return http.post(
      "*/purchases/generate-download-token",
      async (info) => {
        await delay(1000)

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getGetDownloadTokenPurchasesGenerateDownloadTokenPostResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        )
      },
      options,
    )
  }
export const getPurchaseMock = () => [
  getGetStorefrontInfoPurchasesStorefrontInfoGetMockHandler(),
  getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetMockHandler(),
  getGetUpdateTokenPurchasesGenerateUpdateTokenPostMockHandler(),
  getCheckPurchasesPurchasesCheckPurchasesPostMockHandler(),
  getGetDownloadTokenPurchasesGenerateDownloadTokenPostMockHandler(),
]
