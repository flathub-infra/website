/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import { LoginProvider, VerificationMethod } from ".././model"
import type {
  CheckPurchasesResponseSuccess,
  GenerateUpdateTokenResponse,
  GetDownloadTokenResponse,
  StorefrontInfo,
} from ".././model"

export const getGetStorefrontInfoPurchasesStorefrontInfoGetResponseMock = (
  overrideResponse: any = {},
): StorefrontInfo => ({
  is_free_software: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  pricing: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        minimum_payment: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            {},
          ]),
          undefined,
        ]),
        recommended_donation: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            {},
          ]),
          undefined,
        ]),
        ...overrideResponse,
      },
      {},
    ]),
    undefined,
  ]),
  verification: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        detail: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), {}]),
          undefined,
        ]),
        login_is_organization: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.datatype.boolean(), {}]),
          undefined,
        ]),
        login_name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), {}]),
          undefined,
        ]),
        login_provider: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(LoginProvider)),
            {},
          ]),
          undefined,
        ]),
        method: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(VerificationMethod)),
            {},
          ]),
          undefined,
        ]),
        timestamp: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), {}]),
          undefined,
        ]),
        verified: faker.datatype.boolean(),
        website: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), {}]),
          undefined,
        ]),
        ...overrideResponse,
      },
      {},
    ]),
    undefined,
  ]),
  ...overrideResponse,
})

export const getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponseMock =
  (): boolean => faker.datatype.boolean()

export const getGetUpdateTokenPurchasesGenerateUpdateTokenPostResponseMock = (
  overrideResponse: any = {},
): GenerateUpdateTokenResponse => ({
  token: faker.word.sample(),
  ...overrideResponse,
})

export const getCheckPurchasesPurchasesCheckPurchasesPostResponseMock = (
  overrideResponse: any = {},
): CheckPurchasesResponseSuccess => ({
  status: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
})

export const getGetDownloadTokenPurchasesGenerateDownloadTokenPostResponseMock =
  (overrideResponse: any = {}): GetDownloadTokenResponse => ({
    token: faker.word.sample(),
    update_token: faker.word.sample(),
    ...overrideResponse,
  })

export const getGetStorefrontInfoPurchasesStorefrontInfoGetMockHandler = (
  overrideResponse?: StorefrontInfo,
) => {
  return http.get("*/purchases/storefront-info", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetStorefrontInfoPurchasesStorefrontInfoGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetMockHandler =
  (overrideResponse?: boolean) => {
    return http.get(
      "*/purchases/storefront-info/is-free-software",
      async () => {
        await delay(1000)
        return new HttpResponse(
          JSON.stringify(
            overrideResponse
              ? overrideResponse
              : getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponseMock(),
          ),
          {
            status: 200,
            headers: {
              "Content-Type": "application/json",
            },
          },
        )
      },
    )
  }

export const getGetUpdateTokenPurchasesGenerateUpdateTokenPostMockHandler = (
  overrideResponse?: GenerateUpdateTokenResponse,
) => {
  return http.post("*/purchases/generate-update-token", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetUpdateTokenPurchasesGenerateUpdateTokenPostResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getCheckPurchasesPurchasesCheckPurchasesPostMockHandler = (
  overrideResponse?: CheckPurchasesResponseSuccess,
) => {
  return http.post("*/purchases/check-purchases", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getCheckPurchasesPurchasesCheckPurchasesPostResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetDownloadTokenPurchasesGenerateDownloadTokenPostMockHandler =
  (overrideResponse?: GetDownloadTokenResponse) => {
    return http.post("*/purchases/generate-download-token", async () => {
      await delay(1000)
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getGetDownloadTokenPurchasesGenerateDownloadTokenPostResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      )
    })
  }
export const getPurchaseMock = () => [
  getGetStorefrontInfoPurchasesStorefrontInfoGetMockHandler(),
  getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetMockHandler(),
  getGetUpdateTokenPurchasesGenerateUpdateTokenPostMockHandler(),
  getCheckPurchasesPurchasesCheckPurchasesPostMockHandler(),
  getGetDownloadTokenPurchasesGenerateDownloadTokenPostMockHandler(),
]
