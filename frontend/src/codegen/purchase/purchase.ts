/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  BodyGetDownloadTokenPurchasesGenerateDownloadTokenPost,
  CheckPurchasesResponseSuccess,
  GenerateUpdateTokenResponse,
  GetDownloadTokenResponse,
  GetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetParams,
  GetStorefrontInfoPurchasesStorefrontInfoGetParams,
  HTTPValidationError,
  StorefrontInfo,
} from ".././model"

/**
 * This endpoint is used by the flathub-hooks scripts to get information about an app to insert into the appstream
file and commit metadata.
 * @summary Get Storefront Info
 */
export type getStorefrontInfoPurchasesStorefrontInfoGetResponse200 = {
  data: StorefrontInfo
  status: 200
}

export type getStorefrontInfoPurchasesStorefrontInfoGetResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type getStorefrontInfoPurchasesStorefrontInfoGetResponseComposite =
  | getStorefrontInfoPurchasesStorefrontInfoGetResponse200
  | getStorefrontInfoPurchasesStorefrontInfoGetResponse422

export type getStorefrontInfoPurchasesStorefrontInfoGetResponse =
  getStorefrontInfoPurchasesStorefrontInfoGetResponseComposite & {
    headers: Headers
  }

export const getGetStorefrontInfoPurchasesStorefrontInfoGetUrl = (
  params: GetStorefrontInfoPurchasesStorefrontInfoGetParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/purchases/storefront-info?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/purchases/storefront-info`
}

export const getStorefrontInfoPurchasesStorefrontInfoGet = async (
  params: GetStorefrontInfoPurchasesStorefrontInfoGetParams,
  options?: RequestInit,
): Promise<getStorefrontInfoPurchasesStorefrontInfoGetResponse> => {
  const res = await fetch(
    getGetStorefrontInfoPurchasesStorefrontInfoGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getStorefrontInfoPurchasesStorefrontInfoGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getStorefrontInfoPurchasesStorefrontInfoGetResponse
}

export const getGetStorefrontInfoPurchasesStorefrontInfoGetQueryKey = (
  params?: GetStorefrontInfoPurchasesStorefrontInfoGetParams,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/purchases/storefront-info`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetStorefrontInfoPurchasesStorefrontInfoGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>
  >,
  TError = HTTPValidationError,
>(
  params: GetStorefrontInfoPurchasesStorefrontInfoGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetStorefrontInfoPurchasesStorefrontInfoGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>>
  > = ({ signal }) =>
    getStorefrontInfoPurchasesStorefrontInfoGet(params, {
      signal,
      ...fetchOptions,
    })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStorefrontInfoPurchasesStorefrontInfoGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>>
  >
export type GetStorefrontInfoPurchasesStorefrontInfoGetQueryError =
  HTTPValidationError

export function useGetStorefrontInfoPurchasesStorefrontInfoGet<
  TData = Awaited<
    ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>
  >,
  TError = HTTPValidationError,
>(
  params: GetStorefrontInfoPurchasesStorefrontInfoGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetStorefrontInfoPurchasesStorefrontInfoGet<
  TData = Awaited<
    ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>
  >,
  TError = HTTPValidationError,
>(
  params: GetStorefrontInfoPurchasesStorefrontInfoGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>
          >,
          TError,
          Awaited<
            ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetStorefrontInfoPurchasesStorefrontInfoGet<
  TData = Awaited<
    ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>
  >,
  TError = HTTPValidationError,
>(
  params: GetStorefrontInfoPurchasesStorefrontInfoGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Storefront Info
 */

export function useGetStorefrontInfoPurchasesStorefrontInfoGet<
  TData = Awaited<
    ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>
  >,
  TError = HTTPValidationError,
>(
  params: GetStorefrontInfoPurchasesStorefrontInfoGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStorefrontInfoPurchasesStorefrontInfoGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetStorefrontInfoPurchasesStorefrontInfoGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Gets whether the app is Free Software based on the app ID and license, even if the app is not in the appstream
database yet. This is needed in flat-manager-hooks to run validations the first time an app is uploaded.
 * @summary Get Is Free Software
 */
export type getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponse200 =
  {
    data: boolean
    status: 200
  }

export type getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponse422 =
  {
    data: HTTPValidationError
    status: 422
  }

export type getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponseComposite =

    | getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponse200
    | getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponse422

export type getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponse =
  getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponseComposite & {
    headers: Headers
  }

export const getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetUrl = (
  params: GetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/purchases/storefront-info/is-free-software?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/purchases/storefront-info/is-free-software`
}

export const getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet = async (
  params: GetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetParams,
  options?: RequestInit,
): Promise<getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponse> => {
  const res = await fetch(
    getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetResponse
}

export const getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetQueryKey =
  (
    params?: GetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetParams,
  ) => {
    return [
      `${process.env.NEXT_PUBLIC_API_BASE_URI}/purchases/storefront-info/is-free-software`,
      ...(params ? [params] : []),
    ] as const
  }

export const getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
      >
    >,
    TError = HTTPValidationError,
  >(
    params: GetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
            >
          >,
          TError,
          TData
        >
      >
      fetch?: RequestInit
    },
  ) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetQueryKey(
        params,
      )

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
        >
      >
    > = ({ signal }) =>
      getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet(params, {
        signal,
        ...fetchOptions,
      })

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
        >
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
  }

export type GetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
      >
    >
  >
export type GetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetQueryError =
  HTTPValidationError

export function useGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet<
  TData = Awaited<
    ReturnType<typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet>
  >,
  TError = HTTPValidationError,
>(
  params: GetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet<
  TData = Awaited<
    ReturnType<typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet>
  >,
  TError = HTTPValidationError,
>(
  params: GetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
            >
          >
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet<
  TData = Awaited<
    ReturnType<typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet>
  >,
  TError = HTTPValidationError,
>(
  params: GetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Is Free Software
 */

export function useGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet<
  TData = Awaited<
    ReturnType<typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet>
  >,
  TError = HTTPValidationError,
>(
  params: GetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGet
          >
        >,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetIsFreeSoftwarePurchasesStorefrontInfoIsFreeSoftwareGetQueryOptions(
      params,
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Generates an update token for a user account. This token allows the user to generate download tokens for apps they
already own, but does not grant permission to do anything else. By storing this token, flathub-authenticator is
able to update apps without user interaction.
 * @summary Get Update Token
 */
export type getUpdateTokenPurchasesGenerateUpdateTokenPostResponse200 = {
  data: GenerateUpdateTokenResponse
  status: 200
}

export type getUpdateTokenPurchasesGenerateUpdateTokenPostResponse401 = {
  data: null
  status: 401
}

export type getUpdateTokenPurchasesGenerateUpdateTokenPostResponseComposite =
  | getUpdateTokenPurchasesGenerateUpdateTokenPostResponse200
  | getUpdateTokenPurchasesGenerateUpdateTokenPostResponse401

export type getUpdateTokenPurchasesGenerateUpdateTokenPostResponse =
  getUpdateTokenPurchasesGenerateUpdateTokenPostResponseComposite & {
    headers: Headers
  }

export const getGetUpdateTokenPurchasesGenerateUpdateTokenPostUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/purchases/generate-update-token`
}

export const getUpdateTokenPurchasesGenerateUpdateTokenPost = async (
  options?: RequestInit,
): Promise<getUpdateTokenPurchasesGenerateUpdateTokenPostResponse> => {
  const res = await fetch(
    getGetUpdateTokenPurchasesGenerateUpdateTokenPostUrl(),
    {
      ...options,
      method: "POST",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getUpdateTokenPurchasesGenerateUpdateTokenPostResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getUpdateTokenPurchasesGenerateUpdateTokenPostResponse
}

export const getGetUpdateTokenPurchasesGenerateUpdateTokenPostMutationOptions =
  <TError = null, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof getUpdateTokenPurchasesGenerateUpdateTokenPost>
      >,
      TError,
      void,
      TContext
    >
    fetch?: RequestInit
  }): UseMutationOptions<
    Awaited<ReturnType<typeof getUpdateTokenPurchasesGenerateUpdateTokenPost>>,
    TError,
    void,
    TContext
  > => {
    const mutationKey = ["getUpdateTokenPurchasesGenerateUpdateTokenPost"]
    const { mutation: mutationOptions, fetch: fetchOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, fetch: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof getUpdateTokenPurchasesGenerateUpdateTokenPost>
      >,
      void
    > = () => {
      return getUpdateTokenPurchasesGenerateUpdateTokenPost(fetchOptions)
    }

    return { mutationFn, ...mutationOptions }
  }

export type GetUpdateTokenPurchasesGenerateUpdateTokenPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof getUpdateTokenPurchasesGenerateUpdateTokenPost>>
  >

export type GetUpdateTokenPurchasesGenerateUpdateTokenPostMutationError = null

/**
 * @summary Get Update Token
 */
export const useGetUpdateTokenPurchasesGenerateUpdateTokenPost = <
  TError = null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof getUpdateTokenPurchasesGenerateUpdateTokenPost>
      >,
      TError,
      void,
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof getUpdateTokenPurchasesGenerateUpdateTokenPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getGetUpdateTokenPurchasesGenerateUpdateTokenPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Checks whether the logged in user is able to download all of the given app refs.

App IDs can be in the form of full refs, e.g. "app/org.gnome.Maps/x86_64/stable", or just the app ID, e.g.
"org.gnome.Maps".
 * @summary Check Purchases
 */
export type checkPurchasesPurchasesCheckPurchasesPostResponse200 = {
  data: CheckPurchasesResponseSuccess
  status: 200
}

export type checkPurchasesPurchasesCheckPurchasesPostResponse401 = {
  data: null
  status: 401
}

export type checkPurchasesPurchasesCheckPurchasesPostResponse403 = {
  data: null
  status: 403
}

export type checkPurchasesPurchasesCheckPurchasesPostResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type checkPurchasesPurchasesCheckPurchasesPostResponseComposite =
  | checkPurchasesPurchasesCheckPurchasesPostResponse200
  | checkPurchasesPurchasesCheckPurchasesPostResponse401
  | checkPurchasesPurchasesCheckPurchasesPostResponse403
  | checkPurchasesPurchasesCheckPurchasesPostResponse422

export type checkPurchasesPurchasesCheckPurchasesPostResponse =
  checkPurchasesPurchasesCheckPurchasesPostResponseComposite & {
    headers: Headers
  }

export const getCheckPurchasesPurchasesCheckPurchasesPostUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/purchases/check-purchases`
}

export const checkPurchasesPurchasesCheckPurchasesPost = async (
  checkPurchasesPurchasesCheckPurchasesPostBody: string[],
  options?: RequestInit,
): Promise<checkPurchasesPurchasesCheckPurchasesPostResponse> => {
  const res = await fetch(getCheckPurchasesPurchasesCheckPurchasesPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(checkPurchasesPurchasesCheckPurchasesPostBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: checkPurchasesPurchasesCheckPurchasesPostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as checkPurchasesPurchasesCheckPurchasesPostResponse
}

export const getCheckPurchasesPurchasesCheckPurchasesPostMutationOptions = <
  TError = null | null | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkPurchasesPurchasesCheckPurchasesPost>>,
    TError,
    { data: string[] },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof checkPurchasesPurchasesCheckPurchasesPost>>,
  TError,
  { data: string[] },
  TContext
> => {
  const mutationKey = ["checkPurchasesPurchasesCheckPurchasesPost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checkPurchasesPurchasesCheckPurchasesPost>>,
    { data: string[] }
  > = (props) => {
    const { data } = props ?? {}

    return checkPurchasesPurchasesCheckPurchasesPost(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CheckPurchasesPurchasesCheckPurchasesPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof checkPurchasesPurchasesCheckPurchasesPost>>
  >
export type CheckPurchasesPurchasesCheckPurchasesPostMutationBody = string[]
export type CheckPurchasesPurchasesCheckPurchasesPostMutationError =
  null | null | HTTPValidationError

/**
 * @summary Check Purchases
 */
export const useCheckPurchasesPurchasesCheckPurchasesPost = <
  TError = null | null | HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof checkPurchasesPurchasesCheckPurchasesPost>>,
      TError,
      { data: string[] },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof checkPurchasesPurchasesCheckPurchasesPost>>,
  TError,
  { data: string[] },
  TContext
> => {
  const mutationOptions =
    getCheckPurchasesPurchasesCheckPurchasesPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Generates a download token for the given app IDs. App IDs should be in the form of full refs, e.g.
"app/org.gnome.Maps/x86_64/stable".
 * @summary Get Download Token
 */
export type getDownloadTokenPurchasesGenerateDownloadTokenPostResponse200 = {
  data: GetDownloadTokenResponse
  status: 200
}

export type getDownloadTokenPurchasesGenerateDownloadTokenPostResponse400 = {
  data: null
  status: 400
}

export type getDownloadTokenPurchasesGenerateDownloadTokenPostResponse401 = {
  data: null
  status: 401
}

export type getDownloadTokenPurchasesGenerateDownloadTokenPostResponse403 = {
  data: null
  status: 403
}

export type getDownloadTokenPurchasesGenerateDownloadTokenPostResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type getDownloadTokenPurchasesGenerateDownloadTokenPostResponseComposite =

    | getDownloadTokenPurchasesGenerateDownloadTokenPostResponse200
    | getDownloadTokenPurchasesGenerateDownloadTokenPostResponse400
    | getDownloadTokenPurchasesGenerateDownloadTokenPostResponse401
    | getDownloadTokenPurchasesGenerateDownloadTokenPostResponse403
    | getDownloadTokenPurchasesGenerateDownloadTokenPostResponse422

export type getDownloadTokenPurchasesGenerateDownloadTokenPostResponse =
  getDownloadTokenPurchasesGenerateDownloadTokenPostResponseComposite & {
    headers: Headers
  }

export const getGetDownloadTokenPurchasesGenerateDownloadTokenPostUrl = () => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/purchases/generate-download-token`
}

export const getDownloadTokenPurchasesGenerateDownloadTokenPost = async (
  bodyGetDownloadTokenPurchasesGenerateDownloadTokenPost: BodyGetDownloadTokenPurchasesGenerateDownloadTokenPost,
  options?: RequestInit,
): Promise<getDownloadTokenPurchasesGenerateDownloadTokenPostResponse> => {
  const res = await fetch(
    getGetDownloadTokenPurchasesGenerateDownloadTokenPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(
        bodyGetDownloadTokenPurchasesGenerateDownloadTokenPost,
      ),
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getDownloadTokenPurchasesGenerateDownloadTokenPostResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getDownloadTokenPurchasesGenerateDownloadTokenPostResponse
}

export const getGetDownloadTokenPurchasesGenerateDownloadTokenPostMutationOptions =
  <
    TError = null | null | null | HTTPValidationError,
    TContext = unknown,
  >(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof getDownloadTokenPurchasesGenerateDownloadTokenPost>
      >,
      TError,
      { data: BodyGetDownloadTokenPurchasesGenerateDownloadTokenPost },
      TContext
    >
    fetch?: RequestInit
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof getDownloadTokenPurchasesGenerateDownloadTokenPost>
    >,
    TError,
    { data: BodyGetDownloadTokenPurchasesGenerateDownloadTokenPost },
    TContext
  > => {
    const mutationKey = ["getDownloadTokenPurchasesGenerateDownloadTokenPost"]
    const { mutation: mutationOptions, fetch: fetchOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, fetch: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof getDownloadTokenPurchasesGenerateDownloadTokenPost>
      >,
      { data: BodyGetDownloadTokenPurchasesGenerateDownloadTokenPost }
    > = (props) => {
      const { data } = props ?? {}

      return getDownloadTokenPurchasesGenerateDownloadTokenPost(
        data,
        fetchOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type GetDownloadTokenPurchasesGenerateDownloadTokenPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getDownloadTokenPurchasesGenerateDownloadTokenPost>
    >
  >
export type GetDownloadTokenPurchasesGenerateDownloadTokenPostMutationBody =
  BodyGetDownloadTokenPurchasesGenerateDownloadTokenPost
export type GetDownloadTokenPurchasesGenerateDownloadTokenPostMutationError =
  null | null | null | HTTPValidationError

/**
 * @summary Get Download Token
 */
export const useGetDownloadTokenPurchasesGenerateDownloadTokenPost = <
  TError = null | null | null | HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof getDownloadTokenPurchasesGenerateDownloadTokenPost>
      >,
      TError,
      { data: BodyGetDownloadTokenPurchasesGenerateDownloadTokenPost },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof getDownloadTokenPurchasesGenerateDownloadTokenPost>
  >,
  TError,
  { data: BodyGetDownloadTokenPurchasesGenerateDownloadTokenPost },
  TContext
> => {
  const mutationOptions =
    getGetDownloadTokenPurchasesGenerateDownloadTokenPostMutationOptions(
      options,
    )

  return useMutation(mutationOptions, queryClient)
}
