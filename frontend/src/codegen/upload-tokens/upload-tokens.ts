/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  GetUploadTokensUploadTokensAppIdGetParams,
  HTTPValidationError,
  NewTokenResponse,
  TokensResponse,
  UploadTokenRequest,
} from ".././model"

/**
 * Get all upload tokens for the given app
 * @summary Get Upload Tokens
 */
export type getUploadTokensUploadTokensAppIdGetResponse200 = {
  data: TokensResponse
  status: 200
}

export type getUploadTokensUploadTokensAppIdGetResponse401 = {
  data: null
  status: 401
}

export type getUploadTokensUploadTokensAppIdGetResponse403 = {
  data: null
  status: 403
}

export type getUploadTokensUploadTokensAppIdGetResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type getUploadTokensUploadTokensAppIdGetResponseComposite =
  | getUploadTokensUploadTokensAppIdGetResponse200
  | getUploadTokensUploadTokensAppIdGetResponse401
  | getUploadTokensUploadTokensAppIdGetResponse403
  | getUploadTokensUploadTokensAppIdGetResponse422

export type getUploadTokensUploadTokensAppIdGetResponse =
  getUploadTokensUploadTokensAppIdGetResponseComposite & {
    headers: Headers
  }

export const getGetUploadTokensUploadTokensAppIdGetUrl = (
  appId: string,
  params?: GetUploadTokensUploadTokensAppIdGetParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `${process.env.NEXT_PUBLIC_API_BASE_URI}/upload-tokens/${appId}?${stringifiedParams}`
    : `${process.env.NEXT_PUBLIC_API_BASE_URI}/upload-tokens/${appId}`
}

export const getUploadTokensUploadTokensAppIdGet = async (
  appId: string,
  params?: GetUploadTokensUploadTokensAppIdGetParams,
  options?: RequestInit,
): Promise<getUploadTokensUploadTokensAppIdGetResponse> => {
  const res = await fetch(
    getGetUploadTokensUploadTokensAppIdGetUrl(appId, params),
    {
      ...options,
      method: "GET",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getUploadTokensUploadTokensAppIdGetResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getUploadTokensUploadTokensAppIdGetResponse
}

export const getGetUploadTokensUploadTokensAppIdGetQueryKey = (
  appId?: string,
  params?: GetUploadTokensUploadTokensAppIdGetParams,
) => {
  return [
    `${process.env.NEXT_PUBLIC_API_BASE_URI}/upload-tokens/${appId}`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetUploadTokensUploadTokensAppIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
  TError = null | null | HTTPValidationError,
>(
  appId: string,
  params?: GetUploadTokensUploadTokensAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetUploadTokensUploadTokensAppIdGetQueryKey(appId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>
  > = ({ signal }) =>
    getUploadTokensUploadTokensAppIdGet(appId, params, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUploadTokensUploadTokensAppIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>
>
export type GetUploadTokensUploadTokensAppIdGetQueryError =
  null | null | HTTPValidationError

export function useGetUploadTokensUploadTokensAppIdGet<
  TData = Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
  TError = null | null | HTTPValidationError,
>(
  appId: string,
  params: undefined | GetUploadTokensUploadTokensAppIdGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetUploadTokensUploadTokensAppIdGet<
  TData = Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
  TError = null | null | HTTPValidationError,
>(
  appId: string,
  params?: GetUploadTokensUploadTokensAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
          TError,
          Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>
        >,
        "initialData"
      >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetUploadTokensUploadTokensAppIdGet<
  TData = Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
  TError = null | null | HTTPValidationError,
>(
  appId: string,
  params?: GetUploadTokensUploadTokensAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Upload Tokens
 */

export function useGetUploadTokensUploadTokensAppIdGet<
  TData = Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
  TError = null | null | HTTPValidationError,
>(
  appId: string,
  params?: GetUploadTokensUploadTokensAppIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUploadTokensUploadTokensAppIdGet>>,
        TError,
        TData
      >
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetUploadTokensUploadTokensAppIdGetQueryOptions(
    appId,
    params,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create Upload Token
 */
export type createUploadTokenUploadTokensAppIdPostResponse200 = {
  data: NewTokenResponse
  status: 200
}

export type createUploadTokenUploadTokensAppIdPostResponse400 = {
  data: null
  status: 400
}

export type createUploadTokenUploadTokensAppIdPostResponse401 = {
  data: null
  status: 401
}

export type createUploadTokenUploadTokensAppIdPostResponse403 = {
  data: null
  status: 403
}

export type createUploadTokenUploadTokensAppIdPostResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type createUploadTokenUploadTokensAppIdPostResponse500 = {
  data: null
  status: 500
}

export type createUploadTokenUploadTokensAppIdPostResponseComposite =
  | createUploadTokenUploadTokensAppIdPostResponse200
  | createUploadTokenUploadTokensAppIdPostResponse400
  | createUploadTokenUploadTokensAppIdPostResponse401
  | createUploadTokenUploadTokensAppIdPostResponse403
  | createUploadTokenUploadTokensAppIdPostResponse422
  | createUploadTokenUploadTokensAppIdPostResponse500

export type createUploadTokenUploadTokensAppIdPostResponse =
  createUploadTokenUploadTokensAppIdPostResponseComposite & {
    headers: Headers
  }

export const getCreateUploadTokenUploadTokensAppIdPostUrl = (appId: string) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/upload-tokens/${appId}`
}

export const createUploadTokenUploadTokensAppIdPost = async (
  appId: string,
  uploadTokenRequest: UploadTokenRequest,
  options?: RequestInit,
): Promise<createUploadTokenUploadTokensAppIdPostResponse> => {
  const res = await fetch(getCreateUploadTokenUploadTokensAppIdPostUrl(appId), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(uploadTokenRequest),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createUploadTokenUploadTokensAppIdPostResponse["data"] = body
    ? JSON.parse(body)
    : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as createUploadTokenUploadTokensAppIdPostResponse
}

export const getCreateUploadTokenUploadTokensAppIdPostMutationOptions = <
  TError = null | null | null | HTTPValidationError | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUploadTokenUploadTokensAppIdPost>>,
    TError,
    { appId: string; data: UploadTokenRequest },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUploadTokenUploadTokensAppIdPost>>,
  TError,
  { appId: string; data: UploadTokenRequest },
  TContext
> => {
  const mutationKey = ["createUploadTokenUploadTokensAppIdPost"]
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUploadTokenUploadTokensAppIdPost>>,
    { appId: string; data: UploadTokenRequest }
  > = (props) => {
    const { appId, data } = props ?? {}

    return createUploadTokenUploadTokensAppIdPost(appId, data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateUploadTokenUploadTokensAppIdPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUploadTokenUploadTokensAppIdPost>>
>
export type CreateUploadTokenUploadTokensAppIdPostMutationBody =
  UploadTokenRequest
export type CreateUploadTokenUploadTokensAppIdPostMutationError =
  null | null | null | HTTPValidationError | null

/**
 * @summary Create Upload Token
 */
export const useCreateUploadTokenUploadTokensAppIdPost = <
  TError = null | null | null | HTTPValidationError | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createUploadTokenUploadTokensAppIdPost>>,
      TError,
      { appId: string; data: UploadTokenRequest },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createUploadTokenUploadTokensAppIdPost>>,
  TError,
  { appId: string; data: UploadTokenRequest },
  TContext
> => {
  const mutationOptions =
    getCreateUploadTokenUploadTokensAppIdPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Revoke Upload Token
 */
export type revokeUploadTokenUploadTokensTokenIdRevokePostResponse204 = {
  data: null
  status: 204
}

export type revokeUploadTokenUploadTokensTokenIdRevokePostResponse401 = {
  data: null
  status: 401
}

export type revokeUploadTokenUploadTokensTokenIdRevokePostResponse403 = {
  data: null
  status: 403
}

export type revokeUploadTokenUploadTokensTokenIdRevokePostResponse404 = {
  data: null
  status: 404
}

export type revokeUploadTokenUploadTokensTokenIdRevokePostResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type revokeUploadTokenUploadTokensTokenIdRevokePostResponse500 = {
  data: null
  status: 500
}

export type revokeUploadTokenUploadTokensTokenIdRevokePostResponseComposite =
  | revokeUploadTokenUploadTokensTokenIdRevokePostResponse204
  | revokeUploadTokenUploadTokensTokenIdRevokePostResponse401
  | revokeUploadTokenUploadTokensTokenIdRevokePostResponse403
  | revokeUploadTokenUploadTokensTokenIdRevokePostResponse404
  | revokeUploadTokenUploadTokensTokenIdRevokePostResponse422
  | revokeUploadTokenUploadTokensTokenIdRevokePostResponse500

export type revokeUploadTokenUploadTokensTokenIdRevokePostResponse =
  revokeUploadTokenUploadTokensTokenIdRevokePostResponseComposite & {
    headers: Headers
  }

export const getRevokeUploadTokenUploadTokensTokenIdRevokePostUrl = (
  tokenId: number,
) => {
  return `${process.env.NEXT_PUBLIC_API_BASE_URI}/upload-tokens/${tokenId}/revoke`
}

export const revokeUploadTokenUploadTokensTokenIdRevokePost = async (
  tokenId: number,
  options?: RequestInit,
): Promise<revokeUploadTokenUploadTokensTokenIdRevokePostResponse> => {
  const res = await fetch(
    getRevokeUploadTokenUploadTokensTokenIdRevokePostUrl(tokenId),
    {
      ...options,
      method: "POST",
    },
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: revokeUploadTokenUploadTokensTokenIdRevokePostResponse["data"] =
    body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as revokeUploadTokenUploadTokensTokenIdRevokePostResponse
}

export const getRevokeUploadTokenUploadTokensTokenIdRevokePostMutationOptions =
  <
    TError = null | null | null | HTTPValidationError | null,
    TContext = unknown,
  >(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof revokeUploadTokenUploadTokensTokenIdRevokePost>
      >,
      TError,
      { tokenId: number },
      TContext
    >
    fetch?: RequestInit
  }): UseMutationOptions<
    Awaited<ReturnType<typeof revokeUploadTokenUploadTokensTokenIdRevokePost>>,
    TError,
    { tokenId: number },
    TContext
  > => {
    const mutationKey = ["revokeUploadTokenUploadTokensTokenIdRevokePost"]
    const { mutation: mutationOptions, fetch: fetchOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, fetch: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof revokeUploadTokenUploadTokensTokenIdRevokePost>
      >,
      { tokenId: number }
    > = (props) => {
      const { tokenId } = props ?? {}

      return revokeUploadTokenUploadTokensTokenIdRevokePost(
        tokenId,
        fetchOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type RevokeUploadTokenUploadTokensTokenIdRevokePostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof revokeUploadTokenUploadTokensTokenIdRevokePost>>
  >

export type RevokeUploadTokenUploadTokensTokenIdRevokePostMutationError =
  null | null | null | HTTPValidationError | null

/**
 * @summary Revoke Upload Token
 */
export const useRevokeUploadTokenUploadTokensTokenIdRevokePost = <
  TError = null | null | null | HTTPValidationError | null,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof revokeUploadTokenUploadTokensTokenIdRevokePost>
      >,
      TError,
      { tokenId: number },
      TContext
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof revokeUploadTokenUploadTokensTokenIdRevokePost>>,
  TError,
  { tokenId: number },
  TContext
> => {
  const mutationOptions =
    getRevokeUploadTokenUploadTokensTokenIdRevokePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
