/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"

import { HttpResponse, delay, http } from "msw"

import type {
  PostTransactionResponse,
  StripeKeys,
  Transaction,
  TransactionStripeData,
  TransactionSummary,
  WalletInfo,
} from ".././model"

export const getGetWalletinfoWalletWalletinfoGetResponseMock = (
  overrideResponse: Partial<WalletInfo> = {},
): WalletInfo => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  cards: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
    country: faker.string.alpha({ length: { min: 10, max: 20 } }),
    exp_month: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    exp_year: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    last4: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  ...overrideResponse,
})

export const getPostRemovecardWalletRemovecardPostResponseMock = ():
  | unknown
  | null => faker.helpers.arrayElement([undefined, undefined])

export const getGetTransactionsWalletTransactionsGetResponseMock =
  (): TransactionSummary[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      value: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      currency: faker.string.alpha({ length: { min: 10, max: 20 } }),
      kind: faker.helpers.arrayElement(["donation", "purchase"] as const),
      status: faker.helpers.arrayElement([
        "new",
        "retry",
        "pending",
        "success",
        "cancelled",
      ] as const),
      reason: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      created: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          null,
        ]),
        undefined,
      ]),
      updated: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          null,
        ]),
        undefined,
      ]),
    }))

export const getCreateTransactionWalletTransactionsPostResponseMock = (
  overrideResponse: Partial<PostTransactionResponse> = {},
): PostTransactionResponse => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
})

export const getGetTransactionByIdWalletTransactionsTxnGetResponseMock = (
  overrideResponse: Partial<Transaction> = {},
): Transaction => ({
  summary: {
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    value: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    currency: faker.string.alpha({ length: { min: 10, max: 20 } }),
    kind: faker.helpers.arrayElement(["donation", "purchase"] as const),
    status: faker.helpers.arrayElement([
      "new",
      "retry",
      "pending",
      "success",
      "cancelled",
    ] as const),
    reason: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    created: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
    updated: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
  },
  card: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
        country: faker.string.alpha({ length: { min: 10, max: 20 } }),
        exp_month: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        exp_year: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        last4: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  details: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    recipient: faker.string.alpha({ length: { min: 10, max: 20 } }),
    amount: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    currency: faker.string.alpha({ length: { min: 10, max: 20 } }),
    kind: faker.helpers.arrayElement(["donation", "purchase"] as const),
  })),
  receipt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
})

export const getCancelTransactionWalletTransactionsTxnCancelPostResponseMock =
  (): unknown | null => faker.helpers.arrayElement([undefined, undefined])

export const getGetStripedataWalletStripedataGetResponseMock = (
  overrideResponse: Partial<StripeKeys> = {},
): StripeKeys => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  public_key: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
})

export const getGetTxnStripedataWalletTransactionsTxnStripeGetResponseMock = (
  overrideResponse: Partial<TransactionStripeData> = {},
): TransactionStripeData => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  client_secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
  card: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
        country: faker.string.alpha({ length: { min: 10, max: 20 } }),
        exp_month: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        exp_year: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        last4: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
})

export const getSetSavecardWalletTransactionsTxnSavecardPostResponseMock = ():
  | unknown
  | null => faker.helpers.arrayElement([undefined, undefined])

export const getSetPendingWalletTransactionsTxnSetpendingPostResponseMock = ():
  | unknown
  | null => faker.helpers.arrayElement([undefined, undefined])

export const getGetWalletinfoWalletWalletinfoGetMockHandler = (
  overrideResponse?:
    | WalletInfo
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<WalletInfo> | WalletInfo),
) => {
  return http.get("*/wallet/walletinfo", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetWalletinfoWalletWalletinfoGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getPostRemovecardWalletRemovecardPostMockHandler = (
  overrideResponse?:
    | unknown
    | null
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown | null> | unknown | null),
) => {
  return http.post("*/wallet/removecard", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostRemovecardWalletRemovecardPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetTransactionsWalletTransactionsGetMockHandler = (
  overrideResponse?:
    | TransactionSummary[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TransactionSummary[]> | TransactionSummary[]),
) => {
  return http.get("*/wallet/transactions", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTransactionsWalletTransactionsGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getCreateTransactionWalletTransactionsPostMockHandler = (
  overrideResponse?:
    | PostTransactionResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostTransactionResponse> | PostTransactionResponse),
) => {
  return http.post("*/wallet/transactions", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateTransactionWalletTransactionsPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetTransactionByIdWalletTransactionsTxnGetMockHandler = (
  overrideResponse?:
    | Transaction
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Transaction> | Transaction),
) => {
  return http.get("*/wallet/transactions/:txn", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTransactionByIdWalletTransactionsTxnGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getSetTransactionCardWalletTransactionsTxnSetcardPostMockHandler =
  (
    overrideResponse?:
      | unknown
      | ((
          info: Parameters<Parameters<typeof http.post>[1]>[0],
        ) => Promise<unknown> | unknown),
  ) => {
    return http.post("*/wallet/transactions/:txn/setcard", async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 200 })
    })
  }

export const getCancelTransactionWalletTransactionsTxnCancelPostMockHandler = (
  overrideResponse?:
    | unknown
    | null
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown | null> | unknown | null),
) => {
  return http.post("*/wallet/transactions/:txn/cancel", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCancelTransactionWalletTransactionsTxnCancelPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetStripedataWalletStripedataGetMockHandler = (
  overrideResponse?:
    | StripeKeys
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StripeKeys> | StripeKeys),
) => {
  return http.get("*/wallet/stripedata", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetStripedataWalletStripedataGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getGetTxnStripedataWalletTransactionsTxnStripeGetMockHandler = (
  overrideResponse?:
    | TransactionStripeData
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TransactionStripeData> | TransactionStripeData),
) => {
  return http.get("*/wallet/transactions/:txn/stripe", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTxnStripedataWalletTransactionsTxnStripeGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getSetSavecardWalletTransactionsTxnSavecardPostMockHandler = (
  overrideResponse?:
    | unknown
    | null
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown | null> | unknown | null),
) => {
  return http.post("*/wallet/transactions/:txn/savecard", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSetSavecardWalletTransactionsTxnSavecardPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getSetPendingWalletTransactionsTxnSetpendingPostMockHandler = (
  overrideResponse?:
    | unknown
    | null
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown | null> | unknown | null),
) => {
  return http.post("*/wallet/transactions/:txn/setpending", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSetPendingWalletTransactionsTxnSetpendingPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    )
  })
}

export const getWebhookWalletWebhookStripePostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/wallet/webhook/stripe", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}
export const getWalletMock = () => [
  getGetWalletinfoWalletWalletinfoGetMockHandler(),
  getPostRemovecardWalletRemovecardPostMockHandler(),
  getGetTransactionsWalletTransactionsGetMockHandler(),
  getCreateTransactionWalletTransactionsPostMockHandler(),
  getGetTransactionByIdWalletTransactionsTxnGetMockHandler(),
  getSetTransactionCardWalletTransactionsTxnSetcardPostMockHandler(),
  getCancelTransactionWalletTransactionsTxnCancelPostMockHandler(),
  getGetStripedataWalletStripedataGetMockHandler(),
  getGetTxnStripedataWalletTransactionsTxnStripeGetMockHandler(),
  getSetSavecardWalletTransactionsTxnSavecardPostMockHandler(),
  getSetPendingWalletTransactionsTxnSetpendingPostMockHandler(),
  getWebhookWalletWebhookStripePostMockHandler(),
]
