/**
 * Generated by orval v6.26.0 🍺
 * Do not edit manually.
 * Flathub API
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker"
import { HttpResponse, delay, http } from "msw"
import type {
  PostTransactionResponse,
  Transaction,
  TransactionSummary,
  WalletInfo,
} from ".././model"

export const getGetWalletinfoWalletWalletinfoGetResponseMock = (
  overrideResponse: any = {},
): WalletInfo => ({
  cards: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    brand: faker.word.sample(),
    country: faker.word.sample(),
    exp_month: faker.number.int({ min: undefined, max: undefined }),
    exp_year: faker.number.int({ min: undefined, max: undefined }),
    id: faker.word.sample(),
    last4: faker.word.sample(),
    ...overrideResponse,
  })),
  status: faker.word.sample(),
  ...overrideResponse,
})

export const getGetTransactionsWalletTransactionsGetResponseMock = (
  overrideResponse: any = {},
): TransactionSummary[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    created: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        {},
      ]),
      undefined,
    ]),
    currency: faker.word.sample(),
    id: faker.word.sample(),
    kind: faker.helpers.arrayElement(["donation", "purchase"] as const),
    reason: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), {}]),
      undefined,
    ]),
    status: faker.word.sample(),
    updated: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        {},
      ]),
      undefined,
    ]),
    value: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  }))

export const getCreateTransactionWalletTransactionsPostResponseMock = (
  overrideResponse: any = {},
): PostTransactionResponse => ({
  id: faker.word.sample(),
  status: faker.word.sample(),
  ...overrideResponse,
})

export const getGetTransactionByIdWalletTransactionsTxnGetResponseMock = (
  overrideResponse: any = {},
): Transaction => ({
  card: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        brand: faker.word.sample(),
        country: faker.word.sample(),
        exp_month: faker.number.int({ min: undefined, max: undefined }),
        exp_year: faker.number.int({ min: undefined, max: undefined }),
        id: faker.word.sample(),
        last4: faker.word.sample(),
        ...overrideResponse,
      },
      {},
    ]),
    undefined,
  ]),
  details: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    amount: faker.number.int({ min: undefined, max: undefined }),
    currency: faker.word.sample(),
    kind: faker.helpers.arrayElement(["donation", "purchase"] as const),
    recipient: faker.word.sample(),
    ...overrideResponse,
  })),
  receipt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), {}]),
    undefined,
  ]),
  summary: {
    created: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        {},
      ]),
      undefined,
    ]),
    currency: faker.word.sample(),
    id: faker.word.sample(),
    kind: faker.helpers.arrayElement(["donation", "purchase"] as const),
    reason: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), {}]),
      undefined,
    ]),
    status: faker.word.sample(),
    updated: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        {},
      ]),
      undefined,
    ]),
    value: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  ...overrideResponse,
})

export const getGetWalletinfoWalletWalletinfoGetMockHandler = (
  overrideResponse?: WalletInfo,
) => {
  return http.get("*/wallet/walletinfo", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetWalletinfoWalletWalletinfoGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getPostRemovecardWalletRemovecardPostMockHandler = () => {
  return http.post("*/wallet/removecard", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getGetTransactionsWalletTransactionsGetMockHandler = (
  overrideResponse?: TransactionSummary[],
) => {
  return http.get("*/wallet/transactions", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetTransactionsWalletTransactionsGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getCreateTransactionWalletTransactionsPostMockHandler = (
  overrideResponse?: PostTransactionResponse,
) => {
  return http.post("*/wallet/transactions", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getCreateTransactionWalletTransactionsPostResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getGetTransactionByIdWalletTransactionsTxnGetMockHandler = (
  overrideResponse?: Transaction,
) => {
  return http.get("*/wallet/transactions/:txn", async () => {
    await delay(1000)
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetTransactionByIdWalletTransactionsTxnGetResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  })
}

export const getSetTransactionCardWalletTransactionsTxnSetcardPostMockHandler =
  () => {
    return http.post("*/wallet/transactions/:txn/setcard", async () => {
      await delay(1000)
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      })
    })
  }

export const getCancelTransactionWalletTransactionsTxnCancelPostMockHandler =
  () => {
    return http.post("*/wallet/transactions/:txn/cancel", async () => {
      await delay(1000)
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      })
    })
  }

export const getGetStripedataWalletStripedataGetMockHandler = () => {
  return http.get("*/wallet/stripedata", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}

export const getGetTxnStripedataWalletTransactionsTxnStripeGetMockHandler =
  () => {
    return http.get("*/wallet/transactions/:txn/stripe", async () => {
      await delay(1000)
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      })
    })
  }

export const getSetSavecardWalletTransactionsTxnSavecardPostMockHandler =
  () => {
    return http.post("*/wallet/transactions/:txn/savecard", async () => {
      await delay(1000)
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      })
    })
  }

export const getSetPendingWalletTransactionsTxnSetpendingPostMockHandler =
  () => {
    return http.post("*/wallet/transactions/:txn/setpending", async () => {
      await delay(1000)
      return new HttpResponse(null, {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      })
    })
  }

export const getWebhookWalletWebhookStripePostMockHandler = () => {
  return http.post("*/wallet/webhook/stripe", async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    })
  })
}
export const getWalletMock = () => [
  getGetWalletinfoWalletWalletinfoGetMockHandler(),
  getPostRemovecardWalletRemovecardPostMockHandler(),
  getGetTransactionsWalletTransactionsGetMockHandler(),
  getCreateTransactionWalletTransactionsPostMockHandler(),
  getGetTransactionByIdWalletTransactionsTxnGetMockHandler(),
  getSetTransactionCardWalletTransactionsTxnSetcardPostMockHandler(),
  getCancelTransactionWalletTransactionsTxnCancelPostMockHandler(),
  getGetStripedataWalletStripedataGetMockHandler(),
  getGetTxnStripedataWalletTransactionsTxnStripeGetMockHandler(),
  getSetSavecardWalletTransactionsTxnSavecardPostMockHandler(),
  getSetPendingWalletTransactionsTxnSetpendingPostMockHandler(),
  getWebhookWalletWebhookStripePostMockHandler(),
]
